{
    "cells": [
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "9cKZJfY9Fwx1"
        },
        "source": [
          "# Importing Library required for Medical Diagnosis"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 48,
        "metadata": {
          "executionInfo": {
            "elapsed": 470,
            "status": "ok",
            "timestamp": 1733211376804,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "FTbIv8r-GFxd"
        },
        "outputs": [],
        "source": [
          "import numpy as np\n",
          "import matplotlib.pyplot as plt\n",
          "import seaborn as sns\n",
          "import warnings\n",
          "warnings.filterwarnings('ignore')\n",
          "#we will using three model as svm , ANN , CNN\n",
          "from sklearn.svm import SVC\n",
          "from tensorflow.keras.models import Sequential  #adding sequential model for neural networks\n",
          "from tensorflow.keras.layers import Dense , Conv2D , MaxPooling2D , Dropout , Flatten\n",
          "from tensorflow.keras.callbacks import EarlyStopping\n",
          "from tensorflow.keras.regularizers import l2\n",
          "from tensorflow.keras.utils import image_dataset_from_directory\n",
          "from tensorflow.keras.utils import img_to_array,load_img\n",
          "from tensorflow.keras.utils import array_to_img\n",
          "from tensorflow.keras.preprocessing.image import smart_resize\n",
          "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
          "import os\n",
          "#adding an evaluation metrics\n",
          "from sklearn.metrics import accuracy_score , roc_curve , classification_report\n",
          "from sklearn.metrics import confusion_matrix\n",
          "from sklearn.pipeline import Pipeline\n",
          "import joblib\n",
          "import shap\n",
          "import logging"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "MICnWXjtMACC"
        },
        "source": [
          "# Data Extraction"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 49,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 720,
            "status": "ok",
            "timestamp": 1733211381550,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "lF2K9uZ0GWtr",
          "outputId": "22c3baac-2fac-49b7-f196-97d293e638a4"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "Found 148 files belonging to 2 classes.\n",
              " train image file <_PrefetchDataset element_spec=(TensorSpec(shape=(None, 128, 128, 3), dtype=tf.float32, name=None), TensorSpec(shape=(None, 1), dtype=tf.float32, name=None))>\n"
            ]
          }
        ],
        "source": [
          "#loading the datasets from file directory\n",
          "train_image_directory = \"drive/MyDrive/COVID19/train\"\n",
          "\n",
          "train_image_file = image_dataset_from_directory(\n",
          "    train_image_directory,\n",
          "    labels='inferred',\n",
          "    label_mode='binary',\n",
          "    image_size=(128,128)\n",
          ")\n",
          "print(f\" train image file {train_image_file}\")"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 50,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 546,
            "status": "ok",
            "timestamp": 1733211382729,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "7S2vdWK-Ms7b",
          "outputId": "313c83c9-7a93-4db1-b46a-1ff8a20e6414"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "Found 40 files belonging to 2 classes.\n"
            ]
          }
        ],
        "source": [
          "test_image_directory = \"/content/drive/MyDrive/COVID19/test\"\n",
          "\n",
          "test_image_file = image_dataset_from_directory(\n",
          "    test_image_directory,\n",
          "    labels='inferred',\n",
          "    label_mode='binary',\n",
          "    image_size=(128,128)\n",
          ")"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 31,
        "metadata": {
          "executionInfo": {
            "elapsed": 6760,
            "status": "ok",
            "timestamp": 1733211186031,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "VQRVWx7SNEMz"
        },
        "outputs": [],
        "source": [
          "#now access the each file of each class\n",
          "Normal_class_images = []\n",
          "Pneumonia_class_images = []\n",
          "\n",
          "\n",
          "#giving file directory\n",
          "normal_class_directory = '/content/drive/MyDrive/COVID19/train/NORMAL'\n",
          "pneumonia_class_directory = '/content/drive/MyDrive/COVID19/train/PNEUMONIA'\n",
          "def normal_load_images(normal_class_directory):\n",
          "  Normal_class_images = []\n",
          "  # Iterate through files in the directory\n",
          "  for filename in os.listdir(normal_class_directory ):\n",
          "    if filename.endswith(('.jpg', '.jpeg', '.png')):  # Check if it's an image file\n",
          "      # Create full image path\n",
          "      img_path = os.path.join(normal_class_directory, filename)\n",
          "      # Load and append image to the list\n",
          "      normal_image_loading = load_img(img_path)\n",
          "      Normal_class_images.append(normal_image_loading)\n",
          "  return Normal_class_images\n",
          "\n",
          "def pneumonia_load_images(pneumonia_class_directory):\n",
          "  Pneumonia_class_images = []\n",
          "  # Iterate through files in the directory\n",
          "  for filename in os.listdir(pneumonia_class_directory ):\n",
          "    if filename.endswith(('.jpg', '.jpeg', '.png')):  # Check if it's an image file\n",
          "      # Create full image path\n",
          "      img_path = os.path.join(pneumonia_class_directory, filename)\n",
          "      # Load and append image to the list\n",
          "      pneu_image_loading = load_img(img_path)\n",
          "      Pneumonia_class_images.append(pneu_image_loading)\n",
          "  return Pneumonia_class_images\n",
          "\n",
          "\n",
          "normal_class_images = normal_load_images(normal_class_directory)\n",
          "penumonia_class_images = pneumonia_load_images(pneumonia_class_directory)"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 51,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 401,
            "status": "ok",
            "timestamp": 1733211390314,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "_RFHWgBkPrDD",
          "outputId": "10fc48a7-957b-4aa4-b985-759e9bb1d797"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              " normal class_images [<PIL.Image.Image image mode=RGB size=1857x1317 at 0x7FCD93E575B0>, <PIL.Image.Image image mode=RGB size=1663x1326 at 0x7FCD93D5A350>, <PIL.Image.Image image mode=RGB size=2031x1837 at 0x7FCD93D5BBB0>, <PIL.Image.Image image mode=RGB size=2111x1509 at 0x7FCD93D5A530>, <PIL.Image.Image image mode=RGB size=2444x2155 at 0x7FCD93D5AF80>, <PIL.Image.Image image mode=RGB size=1762x1060 at 0x7FCD93D5BA60>, <PIL.Image.Image image mode=RGB size=1866x1311 at 0x7FCD74D89600>, <PIL.Image.Image image mode=RGB size=1774x1230 at 0x7FCD9B046DA0>, <PIL.Image.Image image mode=RGB size=2297x2032 at 0x7FCD89E52B30>, <PIL.Image.Image image mode=RGB size=1616x1041 at 0x7FCD93D5A290>, <PIL.Image.Image image mode=RGB size=1917x1432 at 0x7FCD74E2AEF0>, <PIL.Image.Image image mode=RGB size=1873x1478 at 0x7FCD74E29C30>, <PIL.Image.Image image mode=RGB size=1910x1303 at 0x7FCD74E2A2F0>, <PIL.Image.Image image mode=RGB size=1658x1534 at 0x7FCD74E29C90>, <PIL.Image.Image image mode=RGB size=2053x1818 at 0x7FCE2D90E800>, <PIL.Image.Image image mode=RGB size=2153x1793 at 0x7FCD89E524D0>, <PIL.Image.Image image mode=RGB size=2024x1836 at 0x7FCD93D5A7A0>, <PIL.Image.Image image mode=RGB size=1240x925 at 0x7FCD74E2AE00>, <PIL.Image.Image image mode=RGB size=2144x1916 at 0x7FCD89E3C2B0>, <PIL.Image.Image image mode=RGB size=1754x1187 at 0x7FCD89E3FE80>, <PIL.Image.Image image mode=RGB size=1984x1559 at 0x7FCD89E3CE50>, <PIL.Image.Image image mode=RGB size=1542x871 at 0x7FCD89E3D1E0>, <PIL.Image.Image image mode=RGB size=1472x863 at 0x7FCD89E3F2E0>, <PIL.Image.Image image mode=RGB size=2426x2076 at 0x7FCD89E3E6B0>, <PIL.Image.Image image mode=RGB size=1862x1326 at 0x7FCD89E3C250>, <PIL.Image.Image image mode=RGB size=1260x767 at 0x7FCD89E3C430>, <PIL.Image.Image image mode=RGB size=1890x1357 at 0x7FCD89E3C610>, <PIL.Image.Image image mode=RGB size=2343x2139 at 0x7FCD89E527D0>, <PIL.Image.Image image mode=RGB size=1863x1785 at 0x7FCD89E3C640>, <PIL.Image.Image image mode=RGB size=2480x2329 at 0x7FCD89E3FA60>, <PIL.Image.Image image mode=RGB size=1949x1632 at 0x7FCD89E3CB50>, <PIL.Image.Image image mode=RGB size=1784x1440 at 0x7FCD89E3DE10>, <PIL.Image.Image image mode=RGB size=2006x1461 at 0x7FCD89E3DE40>, <PIL.Image.Image image mode=RGB size=1974x1226 at 0x7FCD89E3C310>, <PIL.Image.Image image mode=RGB size=1460x906 at 0x7FCD89E3FAC0>, <PIL.Image.Image image mode=RGB size=1741x1504 at 0x7FCD89E3F310>, <PIL.Image.Image image mode=RGB size=2498x2057 at 0x7FCD89E3DD80>, <PIL.Image.Image image mode=RGB size=2271x1827 at 0x7FCD89E3DC90>, <PIL.Image.Image image mode=RGB size=2060x1558 at 0x7FCD89E3C940>, <PIL.Image.Image image mode=RGB size=2170x1953 at 0x7FCD89E3FBE0>, <PIL.Image.Image image mode=RGB size=2022x2071 at 0x7FCD89E3EC50>, <PIL.Image.Image image mode=RGB size=2746x2382 at 0x7FCD89E3EEF0>, <PIL.Image.Image image mode=RGB size=1558x925 at 0x7FCD89E3F370>, <PIL.Image.Image image mode=RGB size=2022x1384 at 0x7FCD89E3D1B0>, <PIL.Image.Image image mode=RGB size=2034x1392 at 0x7FCD89E3F190>, <PIL.Image.Image image mode=RGB size=1647x1314 at 0x7FCD89E3F340>, <PIL.Image.Image image mode=RGB size=2034x1761 at 0x7FCD89E3F850>, <PIL.Image.Image image mode=RGB size=1754x1036 at 0x7FCD89E3EF50>, <PIL.Image.Image image mode=RGB size=2001x1725 at 0x7FCD89E3DD50>, <PIL.Image.Image image mode=RGB size=2214x1945 at 0x7FCD89E3F9D0>, <PIL.Image.Image image mode=RGB size=1824x1125 at 0x7FCD89E3F220>, <PIL.Image.Image image mode=RGB size=2165x1907 at 0x7FCD89E3EE30>, <PIL.Image.Image image mode=RGB size=1786x1068 at 0x7FCD89E3EA70>, <PIL.Image.Image image mode=RGB size=1788x1282 at 0x7FCD89E3C6D0>, <PIL.Image.Image image mode=RGB size=2624x1893 at 0x7FCD89E3EB30>, <PIL.Image.Image image mode=RGB size=1558x1014 at 0x7FCD89E3C2E0>, <PIL.Image.Image image mode=RGB size=1754x1318 at 0x7FCD89E3FF10>, <PIL.Image.Image image mode=RGB size=1740x1246 at 0x7FCD89E3CF70>, <PIL.Image.Image image mode=RGB size=2022x1299 at 0x7FCD89E3CF40>, <PIL.Image.Image image mode=RGB size=2752x1882 at 0x7FCD89E3F820>, <PIL.Image.Image image mode=RGB size=2096x1709 at 0x7FCD89E3F0D0>, <PIL.Image.Image image mode=RGB size=1322x650 at 0x7FCD89E3EAD0>, <PIL.Image.Image image mode=RGB size=2165x1749 at 0x7FCD89E3E6E0>, <PIL.Image.Image image mode=RGB size=2720x2458 at 0x7FCD89E3E680>, <PIL.Image.Image image mode=RGB size=1300x617 at 0x7FCD89E3C4C0>, <PIL.Image.Image image mode=RGB size=1803x1238 at 0x7FCD89E3FA30>, <PIL.Image.Image image mode=RGB size=1852x1443 at 0x7FCD89E3E8F0>, <PIL.Image.Image image mode=RGB size=1970x2085 at 0x7FCD89E3C550>, <PIL.Image.Image image mode=RGB size=2517x2713 at 0x7FCD89E3C100>, <PIL.Image.Image image mode=RGB size=2381x1965 at 0x7FCD89E3F880>, <PIL.Image.Image image mode=RGB size=2431x2195 at 0x7FCD89E3CE20>, <PIL.Image.Image image mode=RGB size=1928x1756 at 0x7FCD89E3F0A0>, <PIL.Image.Image image mode=RGB size=1856x1418 at 0x7FCD89E3E710>, <PIL.Image.Image image mode=RGB size=2071x1296 at 0x7FCD89E3C400>]\n",
              " pnuemonia class images [<PIL.Image.Image image mode=RGB size=256x247 at 0x7FCD89E3CD60>, <PIL.Image.Image image mode=RGB size=439x391 at 0x7FCD89E3C3D0>, <PIL.Image.Image image mode=RGB size=2836x2336 at 0x7FCD89E3C460>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1024x1024 at 0x7FCD89E3E800>, <PIL.Image.Image image mode=RGB size=439x362 at 0x7FCD89E3F4F0>, <PIL.Image.Image image mode=RGB size=445x362 at 0x7FCD94024E80>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=2563x1148 at 0x7FCD89E52DA0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1723x1466 at 0x7FCD89E52C80>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1989x1482 at 0x7FCD89E52BF0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=4248x3480 at 0x7FCD89E506A0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1641x1668 at 0x7FCD89E50C70>, <PIL.Image.Image image mode=RGB size=255x249 at 0x7FCD89E53AF0>, <PIL.Image.Image image mode=RGB size=436x391 at 0x7FCD89E53AC0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1696x1403 at 0x7FCD89E52D70>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=2500x2048 at 0x7FCD89E52D10>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=508x500 at 0x7FCD89E51D50>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=477x411 at 0x7FCD89E51E10>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1884x1447 at 0x7FCD89E51F00>, <PIL.Image.Image image mode=RGB size=1726x1552 at 0x7FCD89E528F0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1727x1442 at 0x7FCD89E513C0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=2059x1483 at 0x7FCD89E52CE0>, <PIL.PngImagePlugin.PngImageFile image mode=RGB size=790x631 at 0x7FCD89E3CF10>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1793x1479 at 0x7FCD89E3ED40>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1592x1448 at 0x7FCD89E3D360>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=4248x3480 at 0x7FCD89E3E0E0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=651x659 at 0x7FCD89E3D330>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1024x842 at 0x7FCD89E3EF80>, <PIL.Image.Image image mode=RGB size=1384x1326 at 0x7FCD89E50CA0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1799x1472 at 0x7FCD89E3E980>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1992x1285 at 0x7FCD89E3EA10>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=2150x1648 at 0x7FCD74DAC0D0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1989x1463 at 0x7FCD74DAC220>, <PIL.Image.Image image mode=RGB size=1458x1303 at 0x7FCD89E3CBE0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1024x842 at 0x7FCD74DAC520>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1249x1243 at 0x7FCD74DAC4C0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=657x657 at 0x7FCD74DAC5E0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1837x1505 at 0x7FCD74DAC820>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=4200x3408 at 0x7FCD74DAC8B0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1652x1308 at 0x7FCD74DAC9D0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=523x400 at 0x7FCD89E504F0>, <PIL.Image.Image image mode=RGB size=3342x4095 at 0x7FCD93F01450>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1598x1550 at 0x7FCD74DACD30>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=417x342 at 0x7FCD74DACA60>, <PIL.Image.Image image mode=RGB size=424x437 at 0x7FCD89E3C370>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=298x294 at 0x7FCD74DAD0F0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=880x891 at 0x7FCD74DAD390>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1090x842 at 0x7FCD74DAD3C0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=2386x1835 at 0x7FCD74DAD4E0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=2494x2048 at 0x7FCD74DAD750>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=448x493 at 0x7FCD74DAD960>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1560x1668 at 0x7FCD74DAD9F0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=2061x1369 at 0x7FCD74DADC00>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1800x1439 at 0x7FCD74DADD20>, <PIL.Image.Image image mode=RGB size=927x795 at 0x7FCD89E51F60>, <PIL.Image.Image image mode=RGB size=694x613 at 0x7FCD74DADE70>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=880x874 at 0x7FCD74DADF30>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1645x1272 at 0x7FCD74DADFC0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=2972x2840 at 0x7FCD74DAE0B0>, <PIL.Image.Image image mode=RGB size=2567x2190 at 0x7FCD74DAE3E0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1677x1611 at 0x7FCD74DAE350>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1107x841 at 0x7FCD74DADF60>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=2800x3368 at 0x7FCD74DAE560>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=416x341 at 0x7FCD74DAE710>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=417x341 at 0x7FCD74DAE770>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=328x237 at 0x7FCD74DAE980>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=882x876 at 0x7FCD74DAEB90>, <PIL.Image.Image image mode=RGB size=955x954 at 0x7FCD74DAEE30>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=700x630 at 0x7FCD74DAEDD0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1104x874 at 0x7FCD74DAE2F0>, <PIL.Image.Image image mode=RGB size=625x707 at 0x7FCD74DAEBF0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1401x1402 at 0x7FCD74DAF190>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=763x598 at 0x7FCD74DAF220>, <PIL.Image.Image image mode=RGB size=629x708 at 0x7FCD74DAEFE0>, <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=425x448 at 0x7FCD74DAF5B0>]\n"
            ]
          }
        ],
        "source": [
          "print(f\" normal class_images {normal_class_images}\")\n",
          "print(f\" pnuemonia class images {penumonia_class_images}\")"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "KJBBZH1pPzH1"
        },
        "source": [
          "# Data Preprocessing"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 52,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 1705,
            "status": "ok",
            "timestamp": 1733211393970,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "97oJTFxAMimQ",
          "outputId": "98bd5892-25d7-4070-81fc-604eed0d6560"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              " new nomral class images path :[array([[[ 0.,  0.,  0.],\n",
              "        [32., 32., 32.],\n",
              "        [33., 33., 33.],\n",
              "        ...,\n",
              "        [33., 33., 33.],\n",
              "        [34., 34., 34.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [33., 33., 33.],\n",
              "        [33., 33., 33.],\n",
              "        ...,\n",
              "        [34., 34., 34.],\n",
              "        [34., 34., 34.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [33., 33., 33.],\n",
              "        [33., 33., 33.],\n",
              "        ...,\n",
              "        [34., 34., 34.],\n",
              "        [34., 34., 34.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [28., 28., 28.],\n",
              "        [28., 28., 28.],\n",
              "        ...,\n",
              "        [34., 34., 34.],\n",
              "        [35., 35., 35.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [29., 29., 29.],\n",
              "        [28., 28., 28.],\n",
              "        ...,\n",
              "        [34., 34., 34.],\n",
              "        [35., 35., 35.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [29., 29., 29.],\n",
              "        [29., 29., 29.],\n",
              "        ...,\n",
              "        [35., 35., 35.],\n",
              "        [34., 34., 34.],\n",
              "        [ 0.,  0.,  0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[  2.,   2.,   2.],\n",
              "        [ 64.,  64.,  64.],\n",
              "        [ 77.,  77.,  77.],\n",
              "        ...,\n",
              "        [206., 206., 206.],\n",
              "        [203., 203., 203.],\n",
              "        [  3.,   3.,   3.]],\n",
              "\n",
              "       [[  3.,   3.,   3.],\n",
              "        [ 65.,  65.,  65.],\n",
              "        [ 77.,  77.,  77.],\n",
              "        ...,\n",
              "        [204., 204., 204.],\n",
              "        [205., 205., 205.],\n",
              "        [  5.,   5.,   5.]],\n",
              "\n",
              "       [[  4.,   4.,   4.],\n",
              "        [ 65.,  65.,  65.],\n",
              "        [ 77.,  77.,  77.],\n",
              "        ...,\n",
              "        [196., 196., 196.],\n",
              "        [200., 200., 200.],\n",
              "        [  3.,   3.,   3.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [ 16.,  16.,  16.],\n",
              "        [ 19.,  19.,  19.],\n",
              "        ...,\n",
              "        [132., 132., 132.],\n",
              "        [130., 130., 130.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [ 16.,  16.,  16.],\n",
              "        [ 19.,  19.,  19.],\n",
              "        ...,\n",
              "        [132., 132., 132.],\n",
              "        [128., 128., 128.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [ 16.,  16.,  16.],\n",
              "        [ 19.,  19.,  19.],\n",
              "        ...,\n",
              "        [132., 132., 132.],\n",
              "        [127., 127., 127.],\n",
              "        [  0.,   0.,   0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 0.,  0.,  0.],\n",
              "        [40., 40., 40.],\n",
              "        [41., 41., 41.],\n",
              "        ...,\n",
              "        [27., 27., 27.],\n",
              "        [33., 33., 33.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [40., 40., 40.],\n",
              "        [41., 41., 41.],\n",
              "        ...,\n",
              "        [30., 30., 30.],\n",
              "        [35., 35., 35.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [40., 40., 40.],\n",
              "        [41., 41., 41.],\n",
              "        ...,\n",
              "        [30., 30., 30.],\n",
              "        [35., 35., 35.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [28., 28., 28.],\n",
              "        [28., 28., 28.],\n",
              "        ...,\n",
              "        [38., 38., 38.],\n",
              "        [32., 32., 32.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [29., 29., 29.],\n",
              "        [29., 29., 29.],\n",
              "        ...,\n",
              "        [36., 36., 36.],\n",
              "        [32., 32., 32.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [31., 31., 31.],\n",
              "        [31., 31., 31.],\n",
              "        ...,\n",
              "        [35., 35., 35.],\n",
              "        [31., 31., 31.],\n",
              "        [ 3.,  3.,  3.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[  0.,   0.,   0.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [103., 103., 103.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [104., 104., 104.],\n",
              "        [  2.,   2.,   2.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [106., 106., 106.],\n",
              "        [  3.,   3.,   3.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  2.,   2.,   2.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [ 36.,  36.,  36.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  1.,   1.,   1.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [ 36.,  36.,  36.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  1.,   1.,   1.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [ 36.,  36.,  36.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  2.,   2.,   2.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 3.,  3.,  3.],\n",
              "        [10., 10., 10.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [14., 14., 14.],\n",
              "        [11., 11., 11.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        [13., 13., 13.],\n",
              "        ...,\n",
              "        [14., 14., 14.],\n",
              "        [11., 11., 11.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        [12., 12., 12.],\n",
              "        ...,\n",
              "        [14., 14., 14.],\n",
              "        [11., 11., 11.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [58., 58., 58.],\n",
              "        [57., 57., 57.],\n",
              "        ...,\n",
              "        [13., 13., 13.],\n",
              "        [10., 10., 10.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [57., 57., 57.],\n",
              "        [57., 57., 57.],\n",
              "        ...,\n",
              "        [13., 13., 13.],\n",
              "        [10., 10., 10.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [57., 57., 57.],\n",
              "        [56., 56., 56.],\n",
              "        ...,\n",
              "        [13., 13., 13.],\n",
              "        [10., 10., 10.],\n",
              "        [ 3.,  3.,  3.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 0.,  0.,  0.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        [12., 12., 12.],\n",
              "        ...,\n",
              "        [31., 31., 31.],\n",
              "        [29., 29., 29.],\n",
              "        [29., 29., 29.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        [12., 12., 12.],\n",
              "        ...,\n",
              "        [31., 31., 31.],\n",
              "        [26., 26., 26.],\n",
              "        [26., 26., 26.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 4.,  4.,  4.],\n",
              "        [11., 11., 11.],\n",
              "        ...,\n",
              "        [31., 31., 31.],\n",
              "        [25., 25., 25.],\n",
              "        [25., 25., 25.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [27., 27., 27.],\n",
              "        [24., 24., 24.],\n",
              "        [24., 24., 24.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [25., 25., 25.],\n",
              "        [24., 24., 24.],\n",
              "        [24., 24., 24.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [24., 24., 24.],\n",
              "        [24., 24., 24.],\n",
              "        [24., 24., 24.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [16., 16., 16.],\n",
              "        [17., 17., 17.],\n",
              "        [17., 17., 17.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [16., 16., 16.],\n",
              "        [15., 15., 15.],\n",
              "        [15., 15., 15.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [16., 16., 16.],\n",
              "        [13., 13., 13.],\n",
              "        [13., 13., 13.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[13., 13., 13.],\n",
              "        [13., 13., 13.],\n",
              "        [13., 13., 13.],\n",
              "        ...,\n",
              "        [14., 14., 14.],\n",
              "        [13., 13., 13.],\n",
              "        [13., 13., 13.]],\n",
              "\n",
              "       [[14., 14., 14.],\n",
              "        [14., 14., 14.],\n",
              "        [13., 13., 13.],\n",
              "        ...,\n",
              "        [14., 14., 14.],\n",
              "        [12., 12., 12.],\n",
              "        [12., 12., 12.]],\n",
              "\n",
              "       [[14., 14., 14.],\n",
              "        [14., 14., 14.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [14., 14., 14.],\n",
              "        [12., 12., 12.],\n",
              "        [12., 12., 12.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[  4.,   4.,   4.],\n",
              "        [154., 154., 154.],\n",
              "        [155., 155., 155.],\n",
              "        ...,\n",
              "        [127., 127., 127.],\n",
              "        [125., 125., 125.],\n",
              "        [125., 125., 125.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [150., 150., 150.],\n",
              "        [151., 151., 151.],\n",
              "        ...,\n",
              "        [128., 128., 128.],\n",
              "        [127., 127., 127.],\n",
              "        [126., 126., 126.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [148., 148., 148.],\n",
              "        [150., 150., 150.],\n",
              "        ...,\n",
              "        [129., 129., 129.],\n",
              "        [129., 129., 129.],\n",
              "        [128., 128., 128.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[  2.,   2.,   2.],\n",
              "        [  6.,   6.,   6.],\n",
              "        [ 10.,  10.,  10.],\n",
              "        ...,\n",
              "        [ 11.,  11.,  11.],\n",
              "        [ 11.,  11.,  11.],\n",
              "        [ 11.,  11.,  11.]],\n",
              "\n",
              "       [[  2.,   2.,   2.],\n",
              "        [  6.,   6.,   6.],\n",
              "        [ 10.,  10.,  10.],\n",
              "        ...,\n",
              "        [ 11.,  11.,  11.],\n",
              "        [ 11.,  11.,  11.],\n",
              "        [ 11.,  11.,  11.]],\n",
              "\n",
              "       [[  2.,   2.,   2.],\n",
              "        [  6.,   6.,   6.],\n",
              "        [ 10.,  10.,  10.],\n",
              "        ...,\n",
              "        [ 11.,  11.,  11.],\n",
              "        [ 11.,  11.,  11.],\n",
              "        [ 11.,  11.,  11.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 2.,  2.,  2.],\n",
              "        [20., 20., 20.],\n",
              "        [23., 23., 23.],\n",
              "        ...,\n",
              "        [20., 20., 20.],\n",
              "        [20., 20., 20.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [19., 19., 19.],\n",
              "        [24., 24., 24.],\n",
              "        ...,\n",
              "        [20., 20., 20.],\n",
              "        [20., 20., 20.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [18., 18., 18.],\n",
              "        [24., 24., 24.],\n",
              "        ...,\n",
              "        [20., 20., 20.],\n",
              "        [20., 20., 20.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [16., 16., 16.],\n",
              "        [19., 19., 19.],\n",
              "        ...,\n",
              "        [20., 20., 20.],\n",
              "        [20., 20., 20.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [16., 16., 16.],\n",
              "        [19., 19., 19.],\n",
              "        ...,\n",
              "        [21., 21., 21.],\n",
              "        [21., 21., 21.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [16., 16., 16.],\n",
              "        [19., 19., 19.],\n",
              "        ...,\n",
              "        [23., 23., 23.],\n",
              "        [23., 23., 23.],\n",
              "        [ 0.,  0.,  0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 1.,  1.,  1.],\n",
              "        [54., 54., 54.],\n",
              "        [43., 43., 43.],\n",
              "        ...,\n",
              "        [10., 10., 10.],\n",
              "        [10., 10., 10.],\n",
              "        [10., 10., 10.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [55., 55., 55.],\n",
              "        [43., 43., 43.],\n",
              "        ...,\n",
              "        [10., 10., 10.],\n",
              "        [10., 10., 10.],\n",
              "        [10., 10., 10.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [55., 55., 55.],\n",
              "        [44., 44., 44.],\n",
              "        ...,\n",
              "        [10., 10., 10.],\n",
              "        [10., 10., 10.],\n",
              "        [ 9.,  9.,  9.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [29., 29., 29.],\n",
              "        [18., 18., 18.],\n",
              "        ...,\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [29., 29., 29.],\n",
              "        [18., 18., 18.],\n",
              "        ...,\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [29., 29., 29.],\n",
              "        [20., 20., 20.],\n",
              "        ...,\n",
              "        [ 4.,  4.,  4.],\n",
              "        [ 4.,  4.,  4.],\n",
              "        [ 4.,  4.,  4.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 0.,  0.,  0.],\n",
              "        [27., 27., 27.],\n",
              "        [25., 25., 25.],\n",
              "        ...,\n",
              "        [31., 31., 31.],\n",
              "        [33., 33., 33.],\n",
              "        [ 1.,  1.,  1.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [26., 26., 26.],\n",
              "        [24., 24., 24.],\n",
              "        ...,\n",
              "        [31., 31., 31.],\n",
              "        [33., 33., 33.],\n",
              "        [ 1.,  1.,  1.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [27., 27., 27.],\n",
              "        [25., 25., 25.],\n",
              "        ...,\n",
              "        [31., 31., 31.],\n",
              "        [33., 33., 33.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [32., 32., 32.],\n",
              "        [30., 30., 30.],\n",
              "        ...,\n",
              "        [39., 39., 39.],\n",
              "        [41., 41., 41.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [32., 32., 32.],\n",
              "        [30., 30., 30.],\n",
              "        ...,\n",
              "        [39., 39., 39.],\n",
              "        [41., 41., 41.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [32., 32., 32.],\n",
              "        [30., 30., 30.],\n",
              "        ...,\n",
              "        [39., 39., 39.],\n",
              "        [41., 41., 41.],\n",
              "        [ 0.,  0.,  0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 2.,  2.,  2.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        [10., 10., 10.],\n",
              "        ...,\n",
              "        [14., 14., 14.],\n",
              "        [15., 15., 15.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        [10., 10., 10.],\n",
              "        ...,\n",
              "        [14., 14., 14.],\n",
              "        [14., 14., 14.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        [10., 10., 10.],\n",
              "        ...,\n",
              "        [13., 13., 13.],\n",
              "        [13., 13., 13.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        [10., 10., 10.],\n",
              "        ...,\n",
              "        [10., 10., 10.],\n",
              "        [10., 10., 10.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        [11., 11., 11.],\n",
              "        ...,\n",
              "        [10., 10., 10.],\n",
              "        [10., 10., 10.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        [11., 11., 11.],\n",
              "        ...,\n",
              "        [10., 10., 10.],\n",
              "        [10., 10., 10.],\n",
              "        [ 0.,  0.,  0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[  4.,   4.,   4.],\n",
              "        [104., 104., 104.],\n",
              "        [105., 105., 105.],\n",
              "        ...,\n",
              "        [ 64.,  64.,  64.],\n",
              "        [ 64.,  64.,  64.],\n",
              "        [ 63.,  63.,  63.]],\n",
              "\n",
              "       [[  3.,   3.,   3.],\n",
              "        [103., 103., 103.],\n",
              "        [104., 104., 104.],\n",
              "        ...,\n",
              "        [ 65.,  65.,  65.],\n",
              "        [ 64.,  64.,  64.],\n",
              "        [ 64.,  64.,  64.]],\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [102., 102., 102.],\n",
              "        [103., 103., 103.],\n",
              "        ...,\n",
              "        [ 65.,  65.,  65.],\n",
              "        [ 65.,  65.,  65.],\n",
              "        [ 64.,  64.,  64.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  4.,   4.,   4.],\n",
              "        ...,\n",
              "        [  7.,   7.,   7.],\n",
              "        [  8.,   8.,   8.],\n",
              "        [  8.,   8.,   8.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  4.,   4.,   4.],\n",
              "        ...,\n",
              "        [  8.,   8.,   8.],\n",
              "        [  8.,   8.,   8.],\n",
              "        [  8.,   8.,   8.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  4.,   4.,   4.],\n",
              "        ...,\n",
              "        [  8.,   8.,   8.],\n",
              "        [  9.,   9.,   9.],\n",
              "        [  9.,   9.,   9.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 0.,  0.,  0.],\n",
              "        [34., 34., 34.],\n",
              "        [36., 36., 36.],\n",
              "        ...,\n",
              "        [36., 36., 36.],\n",
              "        [35., 35., 35.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [35., 35., 35.],\n",
              "        [36., 36., 36.],\n",
              "        ...,\n",
              "        [35., 35., 35.],\n",
              "        [35., 35., 35.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [35., 35., 35.],\n",
              "        [36., 36., 36.],\n",
              "        ...,\n",
              "        [34., 34., 34.],\n",
              "        [35., 35., 35.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [24., 24., 24.],\n",
              "        [31., 31., 31.],\n",
              "        ...,\n",
              "        [41., 41., 41.],\n",
              "        [42., 42., 42.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [24., 24., 24.],\n",
              "        [31., 31., 31.],\n",
              "        ...,\n",
              "        [40., 40., 40.],\n",
              "        [42., 42., 42.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [24., 24., 24.],\n",
              "        [31., 31., 31.],\n",
              "        ...,\n",
              "        [36., 36., 36.],\n",
              "        [41., 41., 41.],\n",
              "        [ 0.,  0.,  0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 0.,  0.,  0.],\n",
              "        [42., 42., 42.],\n",
              "        [42., 42., 42.],\n",
              "        ...,\n",
              "        [44., 44., 44.],\n",
              "        [44., 44., 44.],\n",
              "        [ 1.,  1.,  1.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [42., 42., 42.],\n",
              "        [42., 42., 42.],\n",
              "        ...,\n",
              "        [44., 44., 44.],\n",
              "        [44., 44., 44.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [42., 42., 42.],\n",
              "        [42., 42., 42.],\n",
              "        ...,\n",
              "        [43., 43., 43.],\n",
              "        [43., 43., 43.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [44., 44., 44.],\n",
              "        [46., 46., 46.],\n",
              "        ...,\n",
              "        [48., 48., 48.],\n",
              "        [48., 48., 48.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [41., 41., 41.],\n",
              "        [40., 40., 40.],\n",
              "        ...,\n",
              "        [48., 48., 48.],\n",
              "        [48., 48., 48.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [41., 41., 41.],\n",
              "        [40., 40., 40.],\n",
              "        ...,\n",
              "        [48., 48., 48.],\n",
              "        [48., 48., 48.],\n",
              "        [ 2.,  2.,  2.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 2.,  2.,  2.],\n",
              "        [23., 23., 23.],\n",
              "        [29., 29., 29.],\n",
              "        ...,\n",
              "        [31., 31., 31.],\n",
              "        [32., 32., 32.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [22., 22., 22.],\n",
              "        [29., 29., 29.],\n",
              "        ...,\n",
              "        [29., 29., 29.],\n",
              "        [31., 31., 31.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [22., 22., 22.],\n",
              "        [28., 28., 28.],\n",
              "        ...,\n",
              "        [30., 30., 30.],\n",
              "        [32., 32., 32.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [27., 27., 27.],\n",
              "        [27., 27., 27.],\n",
              "        ...,\n",
              "        [39., 39., 39.],\n",
              "        [40., 40., 40.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [26., 26., 26.],\n",
              "        [25., 25., 25.],\n",
              "        ...,\n",
              "        [38., 38., 38.],\n",
              "        [40., 40., 40.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [28., 28., 28.],\n",
              "        [26., 26., 26.],\n",
              "        ...,\n",
              "        [39., 39., 39.],\n",
              "        [37., 37., 37.],\n",
              "        [ 0.,  0.,  0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 1.,  1.,  1.],\n",
              "        [15., 15., 15.],\n",
              "        [16., 16., 16.],\n",
              "        ...,\n",
              "        [14., 14., 14.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [15., 15., 15.],\n",
              "        [16., 16., 16.],\n",
              "        ...,\n",
              "        [14., 14., 14.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [15., 15., 15.],\n",
              "        [16., 16., 16.],\n",
              "        ...,\n",
              "        [14., 14., 14.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [19., 19., 19.],\n",
              "        [17., 17., 17.],\n",
              "        [ 1.,  1.,  1.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [19., 19., 19.],\n",
              "        [17., 17., 17.],\n",
              "        [ 1.,  1.,  1.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [19., 19., 19.],\n",
              "        [17., 17., 17.],\n",
              "        [ 1.,  1.,  1.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 2.,  2.,  2.],\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 2.,  2.,  2.],\n",
              "        ...,\n",
              "        [27., 27., 27.],\n",
              "        [25., 25., 25.],\n",
              "        [24., 24., 24.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 2.,  2.,  2.],\n",
              "        ...,\n",
              "        [27., 27., 27.],\n",
              "        [25., 25., 25.],\n",
              "        [24., 24., 24.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 2.,  2.,  2.],\n",
              "        ...,\n",
              "        [28., 28., 28.],\n",
              "        [26., 26., 26.],\n",
              "        [25., 25., 25.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[37., 37., 37.],\n",
              "        [38., 38., 38.],\n",
              "        [39., 39., 39.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[38., 38., 38.],\n",
              "        [38., 38., 38.],\n",
              "        [39., 39., 39.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[39., 39., 39.],\n",
              "        [39., 39., 39.],\n",
              "        [39., 39., 39.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 1.,  1.,  1.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [10., 10., 10.],\n",
              "        [ 6.,  6.,  6.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [10., 10., 10.],\n",
              "        [ 6.,  6.,  6.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [10., 10., 10.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        [ 1.,  1.,  1.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [13., 13., 13.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [20., 20., 20.],\n",
              "        [16., 16., 16.],\n",
              "        [ 1.,  1.,  1.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [13., 13., 13.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [20., 20., 20.],\n",
              "        [16., 16., 16.],\n",
              "        [ 1.,  1.,  1.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [13., 13., 13.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [20., 20., 20.],\n",
              "        [16., 16., 16.],\n",
              "        [ 1.,  1.,  1.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 5.,  5.,  5.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        ...,\n",
              "        [23., 23., 23.],\n",
              "        [22., 22., 22.],\n",
              "        [22., 22., 22.]],\n",
              "\n",
              "       [[ 6.,  6.,  6.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        ...,\n",
              "        [23., 23., 23.],\n",
              "        [21., 21., 21.],\n",
              "        [21., 21., 21.]],\n",
              "\n",
              "       [[ 6.,  6.,  6.],\n",
              "        [ 6.,  6.,  6.],\n",
              "        [ 6.,  6.,  6.],\n",
              "        ...,\n",
              "        [23., 23., 23.],\n",
              "        [21., 21., 21.],\n",
              "        [21., 21., 21.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[17., 17., 17.],\n",
              "        [16., 16., 16.],\n",
              "        [15., 15., 15.],\n",
              "        ...,\n",
              "        [19., 19., 19.],\n",
              "        [18., 18., 18.],\n",
              "        [18., 18., 18.]],\n",
              "\n",
              "       [[17., 17., 17.],\n",
              "        [16., 16., 16.],\n",
              "        [15., 15., 15.],\n",
              "        ...,\n",
              "        [19., 19., 19.],\n",
              "        [18., 18., 18.],\n",
              "        [18., 18., 18.]],\n",
              "\n",
              "       [[17., 17., 17.],\n",
              "        [16., 16., 16.],\n",
              "        [15., 15., 15.],\n",
              "        ...,\n",
              "        [19., 19., 19.],\n",
              "        [18., 18., 18.],\n",
              "        [18., 18., 18.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 0.,  0.,  0.],\n",
              "        [18., 18., 18.],\n",
              "        [22., 22., 22.],\n",
              "        ...,\n",
              "        [27., 27., 27.],\n",
              "        [22., 22., 22.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [18., 18., 18.],\n",
              "        [22., 22., 22.],\n",
              "        ...,\n",
              "        [27., 27., 27.],\n",
              "        [22., 22., 22.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [19., 19., 19.],\n",
              "        [22., 22., 22.],\n",
              "        ...,\n",
              "        [27., 27., 27.],\n",
              "        [22., 22., 22.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [20., 20., 20.],\n",
              "        [24., 24., 24.],\n",
              "        ...,\n",
              "        [25., 25., 25.],\n",
              "        [27., 27., 27.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [19., 19., 19.],\n",
              "        [23., 23., 23.],\n",
              "        ...,\n",
              "        [25., 25., 25.],\n",
              "        [27., 27., 27.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [19., 19., 19.],\n",
              "        [23., 23., 23.],\n",
              "        ...,\n",
              "        [26., 26., 26.],\n",
              "        [27., 27., 27.],\n",
              "        [ 0.,  0.,  0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 1.,  1.,  1.],\n",
              "        [44., 44., 44.],\n",
              "        [43., 43., 43.],\n",
              "        ...,\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [44., 44., 44.],\n",
              "        [43., 43., 43.],\n",
              "        ...,\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [44., 44., 44.],\n",
              "        [43., 43., 43.],\n",
              "        ...,\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        [ 1.,  1.,  1.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [15., 15., 15.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [16., 16., 16.],\n",
              "        [ 6.,  6.,  6.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [16., 16., 16.],\n",
              "        [ 6.,  6.,  6.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[8., 8., 8.],\n",
              "        [8., 8., 8.],\n",
              "        [9., 9., 9.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[8., 8., 8.],\n",
              "        [8., 8., 8.],\n",
              "        [8., 8., 8.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[7., 7., 7.],\n",
              "        [7., 7., 7.],\n",
              "        [7., 7., 7.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 86.,  86.,  86.],\n",
              "        [ 86.,  86.,  86.],\n",
              "        [ 87.,  87.,  87.],\n",
              "        ...,\n",
              "        [117., 117., 117.],\n",
              "        [111., 111., 111.],\n",
              "        [111., 111., 111.]],\n",
              "\n",
              "       [[ 85.,  85.,  85.],\n",
              "        [ 85.,  85.,  85.],\n",
              "        [ 86.,  86.,  86.],\n",
              "        ...,\n",
              "        [115., 115., 115.],\n",
              "        [115., 115., 115.],\n",
              "        [115., 115., 115.]],\n",
              "\n",
              "       [[ 84.,  84.,  84.],\n",
              "        [ 84.,  84.,  84.],\n",
              "        [ 85.,  85.,  85.],\n",
              "        ...,\n",
              "        [113., 113., 113.],\n",
              "        [113., 113., 113.],\n",
              "        [113., 113., 113.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 38.,  38.,  38.],\n",
              "        [ 38.,  38.,  38.],\n",
              "        [ 37.,  37.,  37.],\n",
              "        ...,\n",
              "        [ 35.,  35.,  35.],\n",
              "        [ 36.,  36.,  36.],\n",
              "        [ 36.,  36.,  36.]],\n",
              "\n",
              "       [[ 38.,  38.,  38.],\n",
              "        [ 38.,  38.,  38.],\n",
              "        [ 37.,  37.,  37.],\n",
              "        ...,\n",
              "        [ 35.,  35.,  35.],\n",
              "        [ 37.,  37.,  37.],\n",
              "        [ 37.,  37.,  37.]],\n",
              "\n",
              "       [[ 38.,  38.,  38.],\n",
              "        [ 38.,  38.,  38.],\n",
              "        [ 37.,  37.,  37.],\n",
              "        ...,\n",
              "        [ 35.,  35.,  35.],\n",
              "        [ 39.,  39.,  39.],\n",
              "        [ 39.,  39.,  39.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [25., 25., 25.],\n",
              "        [23., 23., 23.],\n",
              "        [23., 23., 23.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [25., 25., 25.],\n",
              "        [23., 23., 23.],\n",
              "        [23., 23., 23.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [25., 25., 25.],\n",
              "        [23., 23., 23.],\n",
              "        [23., 23., 23.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 7.,  7.,  7.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        [ 6.,  6.,  6.],\n",
              "        ...,\n",
              "        [ 4.,  4.,  4.],\n",
              "        [ 4.,  4.,  4.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[ 7.,  7.,  7.],\n",
              "        [ 6.,  6.,  6.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        ...,\n",
              "        [ 4.,  4.,  4.],\n",
              "        [ 4.,  4.,  4.],\n",
              "        [ 4.,  4.,  4.]],\n",
              "\n",
              "       [[ 6.,  6.,  6.],\n",
              "        [ 6.,  6.,  6.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        ...,\n",
              "        [ 4.,  4.,  4.],\n",
              "        [ 4.,  4.,  4.],\n",
              "        [ 4.,  4.,  4.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 88.,  88.,  88.],\n",
              "        [ 88.,  88.,  88.],\n",
              "        [ 89.,  89.,  89.],\n",
              "        ...,\n",
              "        [234., 234., 234.],\n",
              "        [247., 247., 247.],\n",
              "        [255., 255., 255.]],\n",
              "\n",
              "       [[ 87.,  87.,  87.],\n",
              "        [ 88.,  88.,  88.],\n",
              "        [ 88.,  88.,  88.],\n",
              "        ...,\n",
              "        [234., 234., 234.],\n",
              "        [247., 247., 247.],\n",
              "        [255., 255., 255.]],\n",
              "\n",
              "       [[ 87.,  87.,  87.],\n",
              "        [ 87.,  87.,  87.],\n",
              "        [ 88.,  88.,  88.],\n",
              "        ...,\n",
              "        [234., 234., 234.],\n",
              "        [247., 247., 247.],\n",
              "        [255., 255., 255.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 14.,  14.,  14.],\n",
              "        [ 15.,  15.,  15.],\n",
              "        [ 16.,  16.,  16.],\n",
              "        ...,\n",
              "        [ 89.,  89.,  89.],\n",
              "        [ 99.,  99.,  99.],\n",
              "        [106., 106., 106.]],\n",
              "\n",
              "       [[ 14.,  14.,  14.],\n",
              "        [ 15.,  15.,  15.],\n",
              "        [ 16.,  16.,  16.],\n",
              "        ...,\n",
              "        [ 85.,  85.,  85.],\n",
              "        [ 95.,  95.,  95.],\n",
              "        [103., 103., 103.]],\n",
              "\n",
              "       [[ 14.,  14.,  14.],\n",
              "        [ 15.,  15.,  15.],\n",
              "        [ 16.,  16.,  16.],\n",
              "        ...,\n",
              "        [ 83.,  83.,  83.],\n",
              "        [ 93.,  93.,  93.],\n",
              "        [101., 101., 101.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[77., 77., 77.],\n",
              "        [78., 78., 78.],\n",
              "        [79., 79., 79.],\n",
              "        ...,\n",
              "        [60., 60., 60.],\n",
              "        [61., 61., 61.],\n",
              "        [61., 61., 61.]],\n",
              "\n",
              "       [[77., 77., 77.],\n",
              "        [78., 78., 78.],\n",
              "        [79., 79., 79.],\n",
              "        ...,\n",
              "        [60., 60., 60.],\n",
              "        [62., 62., 62.],\n",
              "        [62., 62., 62.]],\n",
              "\n",
              "       [[77., 77., 77.],\n",
              "        [78., 78., 78.],\n",
              "        [79., 79., 79.],\n",
              "        ...,\n",
              "        [59., 59., 59.],\n",
              "        [62., 62., 62.],\n",
              "        [62., 62., 62.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 0.,  0.,  0.],\n",
              "        [16., 16., 16.],\n",
              "        [21., 21., 21.],\n",
              "        ...,\n",
              "        [13., 13., 13.],\n",
              "        [16., 16., 16.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [18., 18., 18.],\n",
              "        [22., 22., 22.],\n",
              "        ...,\n",
              "        [16., 16., 16.],\n",
              "        [18., 18., 18.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [19., 19., 19.],\n",
              "        [23., 23., 23.],\n",
              "        ...,\n",
              "        [16., 16., 16.],\n",
              "        [18., 18., 18.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [19., 19., 19.],\n",
              "        [15., 15., 15.],\n",
              "        ...,\n",
              "        [26., 26., 26.],\n",
              "        [24., 24., 24.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [19., 19., 19.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [26., 26., 26.],\n",
              "        [24., 24., 24.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [14., 14., 14.],\n",
              "        [23., 23., 23.],\n",
              "        ...,\n",
              "        [27., 27., 27.],\n",
              "        [26., 26., 26.],\n",
              "        [ 2.,  2.,  2.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 0.,  0.,  0.],\n",
              "        [32., 32., 32.],\n",
              "        [35., 35., 35.],\n",
              "        ...,\n",
              "        [28., 28., 28.],\n",
              "        [42., 42., 42.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [32., 32., 32.],\n",
              "        [33., 33., 33.],\n",
              "        ...,\n",
              "        [30., 30., 30.],\n",
              "        [41., 41., 41.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [33., 33., 33.],\n",
              "        [32., 32., 32.],\n",
              "        ...,\n",
              "        [31., 31., 31.],\n",
              "        [40., 40., 40.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [27., 27., 27.],\n",
              "        [27., 27., 27.],\n",
              "        ...,\n",
              "        [38., 38., 38.],\n",
              "        [39., 39., 39.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [27., 27., 27.],\n",
              "        [26., 26., 26.],\n",
              "        ...,\n",
              "        [40., 40., 40.],\n",
              "        [41., 41., 41.],\n",
              "        [ 1.,  1.,  1.]],\n",
              "\n",
              "       [[ 3.,  3.,  3.],\n",
              "        [30., 30., 30.],\n",
              "        [26., 26., 26.],\n",
              "        ...,\n",
              "        [38., 38., 38.],\n",
              "        [40., 40., 40.],\n",
              "        [ 1.,  1.,  1.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[  1.,   1.,   1.],\n",
              "        [ 26.,  26.,  26.],\n",
              "        [ 22.,  22.,  22.],\n",
              "        ...,\n",
              "        [128., 128., 128.],\n",
              "        [131., 131., 131.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [ 26.,  26.,  26.],\n",
              "        [ 22.,  22.,  22.],\n",
              "        ...,\n",
              "        [131., 131., 131.],\n",
              "        [135., 135., 135.],\n",
              "        [  3.,   3.,   3.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [ 26.,  26.,  26.],\n",
              "        [ 22.,  22.,  22.],\n",
              "        ...,\n",
              "        [133., 133., 133.],\n",
              "        [137., 137., 137.],\n",
              "        [  4.,   4.,   4.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [ 19.,  19.,  19.],\n",
              "        [ 22.,  22.,  22.],\n",
              "        ...,\n",
              "        [ 56.,  56.,  56.],\n",
              "        [ 53.,  53.,  53.],\n",
              "        [  3.,   3.,   3.]],\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [ 19.,  19.,  19.],\n",
              "        [ 21.,  21.,  21.],\n",
              "        ...,\n",
              "        [ 55.,  55.,  55.],\n",
              "        [ 53.,  53.,  53.],\n",
              "        [  3.,   3.,   3.]],\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [ 19.,  19.,  19.],\n",
              "        [ 21.,  21.,  21.],\n",
              "        ...,\n",
              "        [ 55.,  55.,  55.],\n",
              "        [ 52.,  52.,  52.],\n",
              "        [  3.,   3.,   3.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [25., 25., 25.],\n",
              "        [24., 24., 24.],\n",
              "        [23., 23., 23.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [25., 25., 25.],\n",
              "        [24., 24., 24.],\n",
              "        [23., 23., 23.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [25., 25., 25.],\n",
              "        [23., 23., 23.],\n",
              "        [22., 22., 22.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[19., 19., 19.],\n",
              "        [19., 19., 19.],\n",
              "        [19., 19., 19.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[19., 19., 19.],\n",
              "        [19., 19., 19.],\n",
              "        [19., 19., 19.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[20., 20., 20.],\n",
              "        [20., 20., 20.],\n",
              "        [20., 20., 20.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[11., 11., 11.],\n",
              "        [13., 13., 13.],\n",
              "        [15., 15., 15.],\n",
              "        ...,\n",
              "        [17., 17., 17.],\n",
              "        [17., 17., 17.],\n",
              "        [18., 18., 18.]],\n",
              "\n",
              "       [[13., 13., 13.],\n",
              "        [12., 12., 12.],\n",
              "        [12., 12., 12.],\n",
              "        ...,\n",
              "        [18., 18., 18.],\n",
              "        [18., 18., 18.],\n",
              "        [19., 19., 19.]],\n",
              "\n",
              "       [[13., 13., 13.],\n",
              "        [12., 12., 12.],\n",
              "        [12., 12., 12.],\n",
              "        ...,\n",
              "        [18., 18., 18.],\n",
              "        [18., 18., 18.],\n",
              "        [19., 19., 19.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 1.,  1.,  1.],\n",
              "        [16., 16., 16.],\n",
              "        [20., 20., 20.],\n",
              "        ...,\n",
              "        [92., 92., 92.],\n",
              "        [90., 90., 90.],\n",
              "        [ 1.,  1.,  1.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [17., 17., 17.],\n",
              "        [21., 21., 21.],\n",
              "        ...,\n",
              "        [94., 94., 94.],\n",
              "        [92., 92., 92.],\n",
              "        [ 1.,  1.,  1.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [18., 18., 18.],\n",
              "        [22., 22., 22.],\n",
              "        ...,\n",
              "        [97., 97., 97.],\n",
              "        [95., 95., 95.],\n",
              "        [ 1.,  1.,  1.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [15., 15., 15.],\n",
              "        [18., 18., 18.],\n",
              "        ...,\n",
              "        [20., 20., 20.],\n",
              "        [25., 25., 25.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [15., 15., 15.],\n",
              "        [18., 18., 18.],\n",
              "        ...,\n",
              "        [18., 18., 18.],\n",
              "        [24., 24., 24.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [15., 15., 15.],\n",
              "        [18., 18., 18.],\n",
              "        ...,\n",
              "        [17., 17., 17.],\n",
              "        [23., 23., 23.],\n",
              "        [ 0.,  0.,  0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 1.,  1.,  1.],\n",
              "        [13., 13., 13.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [21., 21., 21.],\n",
              "        [22., 22., 22.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [14., 14., 14.],\n",
              "        [15., 15., 15.],\n",
              "        ...,\n",
              "        [21., 21., 21.],\n",
              "        [21., 21., 21.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [15., 15., 15.],\n",
              "        [17., 17., 17.],\n",
              "        ...,\n",
              "        [21., 21., 21.],\n",
              "        [20., 20., 20.],\n",
              "        [ 1.,  1.,  1.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [17., 17., 17.],\n",
              "        [21., 21., 21.],\n",
              "        ...,\n",
              "        [20., 20., 20.],\n",
              "        [22., 22., 22.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [17., 17., 17.],\n",
              "        [21., 21., 21.],\n",
              "        ...,\n",
              "        [23., 23., 23.],\n",
              "        [22., 22., 22.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [18., 18., 18.],\n",
              "        [20., 20., 20.],\n",
              "        ...,\n",
              "        [24., 24., 24.],\n",
              "        [23., 23., 23.],\n",
              "        [ 3.,  3.,  3.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 0.,  0.,  0.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        ...,\n",
              "        [23., 23., 23.],\n",
              "        [21., 21., 21.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        ...,\n",
              "        [23., 23., 23.],\n",
              "        [21., 21., 21.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        ...,\n",
              "        [23., 23., 23.],\n",
              "        [21., 21., 21.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 4.,  4.,  4.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        ...,\n",
              "        [ 6.,  6.,  6.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 4.,  4.,  4.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        ...,\n",
              "        [ 6.,  6.,  6.],\n",
              "        [ 6.,  6.,  6.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 4.,  4.,  4.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        ...,\n",
              "        [ 7.,  7.,  7.],\n",
              "        [ 6.,  6.,  6.],\n",
              "        [ 3.,  3.,  3.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[  4.,   4.,   4.],\n",
              "        [ 30.,  30.,  30.],\n",
              "        [ 27.,  27.,  27.],\n",
              "        ...,\n",
              "        [255., 255., 255.],\n",
              "        [255., 255., 255.],\n",
              "        [255., 255., 255.]],\n",
              "\n",
              "       [[  3.,   3.,   3.],\n",
              "        [ 30.,  30.,  30.],\n",
              "        [ 26.,  26.,  26.],\n",
              "        ...,\n",
              "        [255., 255., 255.],\n",
              "        [255., 255., 255.],\n",
              "        [255., 255., 255.]],\n",
              "\n",
              "       [[  2.,   2.,   2.],\n",
              "        [ 28.,  28.,  28.],\n",
              "        [ 25.,  25.,  25.],\n",
              "        ...,\n",
              "        [255., 255., 255.],\n",
              "        [255., 255., 255.],\n",
              "        [255., 255., 255.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [126., 126., 126.],\n",
              "        [136., 136., 136.],\n",
              "        [141., 141., 141.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [126., 126., 126.],\n",
              "        [136., 136., 136.],\n",
              "        [142., 142., 142.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [127., 127., 127.],\n",
              "        [136., 136., 136.],\n",
              "        [142., 142., 142.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [2., 2., 2.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [2., 2., 2.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [2., 2., 2.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [9., 9., 9.],\n",
              "        [7., 7., 7.],\n",
              "        [2., 2., 2.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [9., 9., 9.],\n",
              "        [7., 7., 7.],\n",
              "        [2., 2., 2.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [9., 9., 9.],\n",
              "        [7., 7., 7.],\n",
              "        [2., 2., 2.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 1.,  1.,  1.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        [13., 13., 13.],\n",
              "        ...,\n",
              "        [11., 11., 11.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        [ 1.,  1.,  1.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        [13., 13., 13.],\n",
              "        ...,\n",
              "        [11., 11., 11.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        [ 1.,  1.,  1.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        [13., 13., 13.],\n",
              "        ...,\n",
              "        [11., 11., 11.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        [ 1.,  1.,  1.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 6.,  6.,  6.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        ...,\n",
              "        [12., 12., 12.],\n",
              "        [10., 10., 10.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 6.,  6.,  6.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        ...,\n",
              "        [12., 12., 12.],\n",
              "        [10., 10., 10.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        ...,\n",
              "        [12., 12., 12.],\n",
              "        [10., 10., 10.],\n",
              "        [ 3.,  3.,  3.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 1.,  1.,  1.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [16., 16., 16.],\n",
              "        [17., 17., 17.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [18., 18., 18.],\n",
              "        [17., 17., 17.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [18., 18., 18.],\n",
              "        [17., 17., 17.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.],\n",
              "        ...,\n",
              "        [14., 14., 14.],\n",
              "        [14., 14., 14.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.],\n",
              "        ...,\n",
              "        [15., 15., 15.],\n",
              "        [14., 14., 14.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.],\n",
              "        ...,\n",
              "        [17., 17., 17.],\n",
              "        [14., 14., 14.],\n",
              "        [ 0.,  0.,  0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 0.,  0.,  0.],\n",
              "        [71., 71., 71.],\n",
              "        [59., 59., 59.],\n",
              "        ...,\n",
              "        [16., 16., 16.],\n",
              "        [16., 16., 16.],\n",
              "        [16., 16., 16.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [71., 71., 71.],\n",
              "        [59., 59., 59.],\n",
              "        ...,\n",
              "        [15., 15., 15.],\n",
              "        [15., 15., 15.],\n",
              "        [15., 15., 15.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [70., 70., 70.],\n",
              "        [59., 59., 59.],\n",
              "        ...,\n",
              "        [15., 15., 15.],\n",
              "        [15., 15., 15.],\n",
              "        [15., 15., 15.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [21., 21., 21.],\n",
              "        [12., 12., 12.],\n",
              "        ...,\n",
              "        [19., 19., 19.],\n",
              "        [19., 19., 19.],\n",
              "        [18., 18., 18.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [21., 21., 21.],\n",
              "        [12., 12., 12.],\n",
              "        ...,\n",
              "        [18., 18., 18.],\n",
              "        [18., 18., 18.],\n",
              "        [18., 18., 18.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [21., 21., 21.],\n",
              "        [12., 12., 12.],\n",
              "        ...,\n",
              "        [18., 18., 18.],\n",
              "        [18., 18., 18.],\n",
              "        [18., 18., 18.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 2.,  2.,  2.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        [15., 15., 15.],\n",
              "        ...,\n",
              "        [24., 24., 24.],\n",
              "        [16., 16., 16.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        [15., 15., 15.],\n",
              "        ...,\n",
              "        [24., 24., 24.],\n",
              "        [16., 16., 16.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        [15., 15., 15.],\n",
              "        ...,\n",
              "        [25., 25., 25.],\n",
              "        [17., 17., 17.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        [13., 13., 13.],\n",
              "        ...,\n",
              "        [24., 24., 24.],\n",
              "        [17., 17., 17.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[ 3.,  3.,  3.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        [13., 13., 13.],\n",
              "        ...,\n",
              "        [24., 24., 24.],\n",
              "        [16., 16., 16.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 3.,  3.,  3.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        [13., 13., 13.],\n",
              "        ...,\n",
              "        [24., 24., 24.],\n",
              "        [16., 16., 16.],\n",
              "        [ 1.,  1.,  1.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [63., 63., 63.],\n",
              "        [71., 71., 71.],\n",
              "        [76., 76., 76.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [63., 63., 63.],\n",
              "        [71., 71., 71.],\n",
              "        [76., 76., 76.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [63., 63., 63.],\n",
              "        [71., 71., 71.],\n",
              "        [76., 76., 76.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 4.,  4.,  4.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        ...,\n",
              "        [ 7.,  7.,  7.],\n",
              "        [12., 12., 12.],\n",
              "        [12., 12., 12.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 4.,  4.,  4.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        ...,\n",
              "        [ 7.,  7.,  7.],\n",
              "        [12., 12., 12.],\n",
              "        [12., 12., 12.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 4.,  4.,  4.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        ...,\n",
              "        [ 7.,  7.,  7.],\n",
              "        [12., 12., 12.],\n",
              "        [12., 12., 12.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 1.,  1.,  1.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        [13., 13., 13.],\n",
              "        ...,\n",
              "        [87., 87., 87.],\n",
              "        [91., 91., 91.],\n",
              "        [91., 91., 91.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        [13., 13., 13.],\n",
              "        ...,\n",
              "        [86., 86., 86.],\n",
              "        [90., 90., 90.],\n",
              "        [90., 90., 90.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        [13., 13., 13.],\n",
              "        ...,\n",
              "        [86., 86., 86.],\n",
              "        [88., 88., 88.],\n",
              "        [88., 88., 88.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 2.,  2.,  2.],\n",
              "        ...,\n",
              "        [ 9.,  9.,  9.],\n",
              "        [10., 10., 10.],\n",
              "        [10., 10., 10.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 2.,  2.,  2.],\n",
              "        ...,\n",
              "        [ 9.,  9.,  9.],\n",
              "        [10., 10., 10.],\n",
              "        [10., 10., 10.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 3.,  3.,  3.],\n",
              "        ...,\n",
              "        [ 9.,  9.,  9.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        [ 8.,  8.,  8.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[77., 77., 77.],\n",
              "        [76., 76., 76.],\n",
              "        [76., 76., 76.],\n",
              "        ...,\n",
              "        [12., 12., 12.],\n",
              "        [12., 12., 12.],\n",
              "        [12., 12., 12.]],\n",
              "\n",
              "       [[75., 75., 75.],\n",
              "        [75., 75., 75.],\n",
              "        [75., 75., 75.],\n",
              "        ...,\n",
              "        [12., 12., 12.],\n",
              "        [12., 12., 12.],\n",
              "        [12., 12., 12.]],\n",
              "\n",
              "       [[73., 73., 73.],\n",
              "        [74., 74., 74.],\n",
              "        [74., 74., 74.],\n",
              "        ...,\n",
              "        [13., 13., 13.],\n",
              "        [12., 12., 12.],\n",
              "        [12., 12., 12.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[10., 10., 10.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        ...,\n",
              "        [ 1.,  1.,  1.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[10., 10., 10.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        ...,\n",
              "        [ 1.,  1.,  1.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[10., 10., 10.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        ...,\n",
              "        [ 1.,  1.,  1.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 0.,  0.,  0.],\n",
              "        [14., 14., 14.],\n",
              "        [15., 15., 15.],\n",
              "        ...,\n",
              "        [61., 61., 61.],\n",
              "        [61., 61., 61.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [14., 14., 14.],\n",
              "        [15., 15., 15.],\n",
              "        ...,\n",
              "        [56., 56., 56.],\n",
              "        [55., 55., 55.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [14., 14., 14.],\n",
              "        [15., 15., 15.],\n",
              "        ...,\n",
              "        [55., 55., 55.],\n",
              "        [53., 53., 53.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [10., 10., 10.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [18., 18., 18.],\n",
              "        [18., 18., 18.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [10., 10., 10.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [18., 18., 18.],\n",
              "        [18., 18., 18.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [10., 10., 10.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [18., 18., 18.],\n",
              "        [18., 18., 18.],\n",
              "        [ 0.,  0.,  0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 2.,  2.,  2.],\n",
              "        [16., 16., 16.],\n",
              "        [18., 18., 18.],\n",
              "        ...,\n",
              "        [26., 26., 26.],\n",
              "        [19., 19., 19.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [16., 16., 16.],\n",
              "        [18., 18., 18.],\n",
              "        ...,\n",
              "        [26., 26., 26.],\n",
              "        [19., 19., 19.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [16., 16., 16.],\n",
              "        [18., 18., 18.],\n",
              "        ...,\n",
              "        [26., 26., 26.],\n",
              "        [19., 19., 19.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [45., 45., 45.],\n",
              "        [47., 47., 47.],\n",
              "        ...,\n",
              "        [32., 32., 32.],\n",
              "        [33., 33., 33.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [44., 44., 44.],\n",
              "        [45., 45., 45.],\n",
              "        ...,\n",
              "        [33., 33., 33.],\n",
              "        [35., 35., 35.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [44., 44., 44.],\n",
              "        [45., 45., 45.],\n",
              "        ...,\n",
              "        [28., 28., 28.],\n",
              "        [35., 35., 35.],\n",
              "        [ 0.,  0.,  0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [16., 16., 16.],\n",
              "        [16., 16., 16.],\n",
              "        [16., 16., 16.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [16., 16., 16.],\n",
              "        [16., 16., 16.],\n",
              "        [16., 16., 16.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [15., 15., 15.],\n",
              "        [16., 16., 16.],\n",
              "        [16., 16., 16.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        ...,\n",
              "        [11., 11., 11.],\n",
              "        [12., 12., 12.],\n",
              "        [12., 12., 12.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        ...,\n",
              "        [11., 11., 11.],\n",
              "        [12., 12., 12.],\n",
              "        [13., 13., 13.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        ...,\n",
              "        [11., 11., 11.],\n",
              "        [12., 12., 12.],\n",
              "        [13., 13., 13.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [61., 61., 61.],\n",
              "        [62., 62., 62.],\n",
              "        [62., 62., 62.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [64., 64., 64.],\n",
              "        [62., 62., 62.],\n",
              "        [62., 62., 62.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [67., 67., 67.],\n",
              "        [61., 61., 61.],\n",
              "        [61., 61., 61.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[92., 92., 92.],\n",
              "        [93., 93., 93.],\n",
              "        [93., 93., 93.],\n",
              "        ...,\n",
              "        [35., 35., 35.],\n",
              "        [35., 35., 35.],\n",
              "        [34., 34., 34.]],\n",
              "\n",
              "       [[96., 96., 96.],\n",
              "        [96., 96., 96.],\n",
              "        [95., 95., 95.],\n",
              "        ...,\n",
              "        [35., 35., 35.],\n",
              "        [34., 34., 34.],\n",
              "        [34., 34., 34.]],\n",
              "\n",
              "       [[96., 96., 96.],\n",
              "        [95., 95., 95.],\n",
              "        [95., 95., 95.],\n",
              "        ...,\n",
              "        [34., 34., 34.],\n",
              "        [34., 34., 34.],\n",
              "        [34., 34., 34.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[42., 42., 42.],\n",
              "        [42., 42., 42.],\n",
              "        [40., 40., 40.],\n",
              "        ...,\n",
              "        [18., 18., 18.],\n",
              "        [19., 19., 19.],\n",
              "        [20., 20., 20.]],\n",
              "\n",
              "       [[42., 42., 42.],\n",
              "        [43., 43., 43.],\n",
              "        [44., 44., 44.],\n",
              "        ...,\n",
              "        [19., 19., 19.],\n",
              "        [20., 20., 20.],\n",
              "        [21., 21., 21.]],\n",
              "\n",
              "       [[42., 42., 42.],\n",
              "        [43., 43., 43.],\n",
              "        [44., 44., 44.],\n",
              "        ...,\n",
              "        [19., 19., 19.],\n",
              "        [20., 20., 20.],\n",
              "        [21., 21., 21.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [105., 105., 105.],\n",
              "        [105., 105., 105.],\n",
              "        ...,\n",
              "        [105., 105., 105.],\n",
              "        [100., 100., 100.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [104., 104., 104.],\n",
              "        [104., 104., 104.],\n",
              "        ...,\n",
              "        [103., 103., 103.],\n",
              "        [ 99.,  99.,  99.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [106., 106., 106.],\n",
              "        [106., 106., 106.],\n",
              "        ...,\n",
              "        [100., 100., 100.],\n",
              "        [ 98.,  98.,  98.],\n",
              "        [  1.,   1.,   1.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 1.,  1.,  1.],\n",
              "        [41., 41., 41.],\n",
              "        [39., 39., 39.],\n",
              "        ...,\n",
              "        [77., 77., 77.],\n",
              "        [74., 74., 74.],\n",
              "        [74., 74., 74.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [41., 41., 41.],\n",
              "        [38., 38., 38.],\n",
              "        ...,\n",
              "        [77., 77., 77.],\n",
              "        [74., 74., 74.],\n",
              "        [74., 74., 74.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [40., 40., 40.],\n",
              "        [37., 37., 37.],\n",
              "        ...,\n",
              "        [78., 78., 78.],\n",
              "        [75., 75., 75.],\n",
              "        [74., 74., 74.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[29., 29., 29.],\n",
              "        [28., 28., 28.],\n",
              "        [27., 27., 27.],\n",
              "        ...,\n",
              "        [16., 16., 16.],\n",
              "        [15., 15., 15.],\n",
              "        [15., 15., 15.]],\n",
              "\n",
              "       [[29., 29., 29.],\n",
              "        [29., 29., 29.],\n",
              "        [27., 27., 27.],\n",
              "        ...,\n",
              "        [16., 16., 16.],\n",
              "        [16., 16., 16.],\n",
              "        [16., 16., 16.]],\n",
              "\n",
              "       [[29., 29., 29.],\n",
              "        [28., 28., 28.],\n",
              "        [27., 27., 27.],\n",
              "        ...,\n",
              "        [17., 17., 17.],\n",
              "        [16., 16., 16.],\n",
              "        [16., 16., 16.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[24., 24., 24.],\n",
              "        [26., 26., 26.],\n",
              "        [28., 28., 28.],\n",
              "        ...,\n",
              "        [24., 24., 24.],\n",
              "        [27., 27., 27.],\n",
              "        [27., 27., 27.]],\n",
              "\n",
              "       [[23., 23., 23.],\n",
              "        [25., 25., 25.],\n",
              "        [28., 28., 28.],\n",
              "        ...,\n",
              "        [24., 24., 24.],\n",
              "        [28., 28., 28.],\n",
              "        [28., 28., 28.]],\n",
              "\n",
              "       [[22., 22., 22.],\n",
              "        [24., 24., 24.],\n",
              "        [27., 27., 27.],\n",
              "        ...,\n",
              "        [23., 23., 23.],\n",
              "        [28., 28., 28.],\n",
              "        [28., 28., 28.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[  0.,   0.,   0.],\n",
              "        [ 26.,  26.,  26.],\n",
              "        [ 26.,  26.,  26.],\n",
              "        ...,\n",
              "        [ 13.,  13.,  13.],\n",
              "        [ 12.,  12.,  12.],\n",
              "        [ 10.,  10.,  10.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [ 26.,  26.,  26.],\n",
              "        [ 26.,  26.,  26.],\n",
              "        ...,\n",
              "        [ 14.,  14.,  14.],\n",
              "        [ 13.,  13.,  13.],\n",
              "        [ 11.,  11.,  11.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [ 26.,  26.,  26.],\n",
              "        [ 26.,  26.,  26.],\n",
              "        ...,\n",
              "        [ 15.,  15.,  15.],\n",
              "        [ 14.,  14.,  14.],\n",
              "        [ 12.,  12.,  12.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [242., 242., 242.],\n",
              "        [241., 241., 241.],\n",
              "        ...,\n",
              "        [233., 233., 233.],\n",
              "        [233., 233., 233.],\n",
              "        [233., 233., 233.]],\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [243., 243., 243.],\n",
              "        [242., 242., 242.],\n",
              "        ...,\n",
              "        [233., 233., 233.],\n",
              "        [233., 233., 233.],\n",
              "        [233., 233., 233.]],\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [244., 244., 244.],\n",
              "        [243., 243., 243.],\n",
              "        ...,\n",
              "        [233., 233., 233.],\n",
              "        [233., 233., 233.],\n",
              "        [233., 233., 233.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[  0.,   0.,   0.],\n",
              "        [ 71.,  71.,  71.],\n",
              "        [ 61.,  61.,  61.],\n",
              "        ...,\n",
              "        [162., 162., 162.],\n",
              "        [174., 174., 174.],\n",
              "        [184., 184., 184.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [ 72.,  72.,  72.],\n",
              "        [ 62.,  62.,  62.],\n",
              "        ...,\n",
              "        [161., 161., 161.],\n",
              "        [173., 173., 173.],\n",
              "        [183., 183., 183.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [ 73.,  73.,  73.],\n",
              "        [ 63.,  63.,  63.],\n",
              "        ...,\n",
              "        [160., 160., 160.],\n",
              "        [171., 171., 171.],\n",
              "        [182., 182., 182.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [ 18.,  18.,  18.],\n",
              "        [ 25.,  25.,  25.],\n",
              "        ...,\n",
              "        [ 63.,  63.,  63.],\n",
              "        [ 66.,  66.,  66.],\n",
              "        [ 68.,  68.,  68.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [ 18.,  18.,  18.],\n",
              "        [ 25.,  25.,  25.],\n",
              "        ...,\n",
              "        [ 63.,  63.,  63.],\n",
              "        [ 66.,  66.,  66.],\n",
              "        [ 68.,  68.,  68.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [ 18.,  18.,  18.],\n",
              "        [ 25.,  25.,  25.],\n",
              "        ...,\n",
              "        [ 63.,  63.,  63.],\n",
              "        [ 66.,  66.,  66.],\n",
              "        [ 68.,  68.,  68.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        ...,\n",
              "        [70., 70., 70.],\n",
              "        [67., 67., 67.],\n",
              "        [68., 68., 68.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        ...,\n",
              "        [70., 70., 70.],\n",
              "        [68., 68., 68.],\n",
              "        [68., 68., 68.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        ...,\n",
              "        [71., 71., 71.],\n",
              "        [69., 69., 69.],\n",
              "        [70., 70., 70.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [21., 21., 21.],\n",
              "        [21., 21., 21.],\n",
              "        [21., 21., 21.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [21., 21., 21.],\n",
              "        [21., 21., 21.],\n",
              "        [21., 21., 21.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [21., 21., 21.],\n",
              "        [21., 21., 21.],\n",
              "        [21., 21., 21.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 2.,  2.,  2.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [17., 17., 17.],\n",
              "        [16., 16., 16.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [17., 17., 17.],\n",
              "        [16., 16., 16.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [17., 17., 17.],\n",
              "        [16., 16., 16.],\n",
              "        [ 2.,  2.,  2.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[88., 88., 88.],\n",
              "        [88., 88., 88.],\n",
              "        [87., 87., 87.],\n",
              "        ...,\n",
              "        [74., 74., 74.],\n",
              "        [71., 71., 71.],\n",
              "        [71., 71., 71.]],\n",
              "\n",
              "       [[91., 91., 91.],\n",
              "        [90., 90., 90.],\n",
              "        [87., 87., 87.],\n",
              "        ...,\n",
              "        [73., 73., 73.],\n",
              "        [71., 71., 71.],\n",
              "        [71., 71., 71.]],\n",
              "\n",
              "       [[90., 90., 90.],\n",
              "        [89., 89., 89.],\n",
              "        [85., 85., 85.],\n",
              "        ...,\n",
              "        [72., 72., 72.],\n",
              "        [70., 70., 70.],\n",
              "        [70., 70., 70.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [8., 8., 8.],\n",
              "        [7., 7., 7.],\n",
              "        [2., 2., 2.]],\n",
              "\n",
              "       [[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [8., 8., 8.],\n",
              "        [7., 7., 7.],\n",
              "        [2., 2., 2.]],\n",
              "\n",
              "       [[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [8., 8., 8.],\n",
              "        [6., 6., 6.],\n",
              "        [2., 2., 2.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [5., 5., 5.],\n",
              "        [4., 4., 4.],\n",
              "        [2., 2., 2.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [5., 5., 5.],\n",
              "        [3., 3., 3.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [5., 5., 5.],\n",
              "        [3., 3., 3.],\n",
              "        [0., 0., 0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[82., 82., 82.],\n",
              "        [84., 84., 84.],\n",
              "        [77., 77., 77.],\n",
              "        ...,\n",
              "        [25., 25., 25.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[83., 83., 83.],\n",
              "        [86., 86., 86.],\n",
              "        [79., 79., 79.],\n",
              "        ...,\n",
              "        [25., 25., 25.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[83., 83., 83.],\n",
              "        [85., 85., 85.],\n",
              "        [78., 78., 78.],\n",
              "        ...,\n",
              "        [25., 25., 25.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 7.,  7.,  7.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 7.,  7.,  7.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 7.,  7.,  7.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        [ 8.,  8.,  8.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[ 0.,  0.,  0.],\n",
              "        [31., 31., 31.],\n",
              "        [30., 30., 30.],\n",
              "        ...,\n",
              "        [20., 20., 20.],\n",
              "        [23., 23., 23.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [31., 31., 31.],\n",
              "        [30., 30., 30.],\n",
              "        ...,\n",
              "        [20., 20., 20.],\n",
              "        [23., 23., 23.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [31., 31., 31.],\n",
              "        [29., 29., 29.],\n",
              "        ...,\n",
              "        [20., 20., 20.],\n",
              "        [23., 23., 23.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [25., 25., 25.],\n",
              "        [20., 20., 20.],\n",
              "        ...,\n",
              "        [20., 20., 20.],\n",
              "        [23., 23., 23.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 2.,  2.,  2.],\n",
              "        [26., 26., 26.],\n",
              "        [20., 20., 20.],\n",
              "        ...,\n",
              "        [20., 20., 20.],\n",
              "        [23., 23., 23.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [26., 26., 26.],\n",
              "        [21., 21., 21.],\n",
              "        ...,\n",
              "        [20., 20., 20.],\n",
              "        [23., 23., 23.],\n",
              "        [ 0.,  0.,  0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[115., 115., 115.],\n",
              "        [129., 129., 129.],\n",
              "        [119., 119., 119.],\n",
              "        ...,\n",
              "        [228., 228., 228.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  2.,   2.,   2.]],\n",
              "\n",
              "       [[115., 115., 115.],\n",
              "        [128., 128., 128.],\n",
              "        [116., 116., 116.],\n",
              "        ...,\n",
              "        [227., 227., 227.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  2.,   2.,   2.]],\n",
              "\n",
              "       [[120., 120., 120.],\n",
              "        [130., 130., 130.],\n",
              "        [116., 116., 116.],\n",
              "        ...,\n",
              "        [227., 227., 227.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  3.,   3.,   3.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 67.,  67.,  67.],\n",
              "        [ 54.,  54.,  54.],\n",
              "        [ 62.,  62.,  62.],\n",
              "        ...,\n",
              "        [209., 209., 209.],\n",
              "        [  3.,   3.,   3.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       [[ 66.,  66.,  66.],\n",
              "        [ 53.,  53.,  53.],\n",
              "        [ 61.,  61.,  61.],\n",
              "        ...,\n",
              "        [209., 209., 209.],\n",
              "        [  3.,   3.,   3.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       [[ 64.,  64.,  64.],\n",
              "        [ 51.,  51.,  51.],\n",
              "        [ 60.,  60.,  60.],\n",
              "        ...,\n",
              "        [209., 209., 209.],\n",
              "        [  3.,   3.,   3.],\n",
              "        [  0.,   0.,   0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[  0.,   0.,   0.],\n",
              "        [ 92.,  92.,  92.],\n",
              "        [ 85.,  85.,  85.],\n",
              "        ...,\n",
              "        [110., 110., 110.],\n",
              "        [109., 109., 109.],\n",
              "        [109., 109., 109.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [ 91.,  91.,  91.],\n",
              "        [ 85.,  85.,  85.],\n",
              "        ...,\n",
              "        [109., 109., 109.],\n",
              "        [107., 107., 107.],\n",
              "        [107., 107., 107.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [ 91.,  91.,  91.],\n",
              "        [ 85.,  85.,  85.],\n",
              "        ...,\n",
              "        [108., 108., 108.],\n",
              "        [106., 106., 106.],\n",
              "        [106., 106., 106.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[  3.,   3.,   3.],\n",
              "        [ 15.,  15.,  15.],\n",
              "        [ 24.,  24.,  24.],\n",
              "        ...,\n",
              "        [  3.,   3.,   3.],\n",
              "        [  5.,   5.,   5.],\n",
              "        [  5.,   5.,   5.]],\n",
              "\n",
              "       [[  3.,   3.,   3.],\n",
              "        [ 15.,  15.,  15.],\n",
              "        [ 24.,  24.,  24.],\n",
              "        ...,\n",
              "        [  4.,   4.,   4.],\n",
              "        [  5.,   5.,   5.],\n",
              "        [  5.,   5.,   5.]],\n",
              "\n",
              "       [[  3.,   3.,   3.],\n",
              "        [ 15.,  15.,  15.],\n",
              "        [ 24.,  24.,  24.],\n",
              "        ...,\n",
              "        [  4.,   4.,   4.],\n",
              "        [  5.,   5.,   5.],\n",
              "        [  5.,   5.,   5.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[14., 14., 14.],\n",
              "        [14., 14., 14.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[14., 14., 14.],\n",
              "        [14., 14., 14.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[14., 14., 14.],\n",
              "        [14., 14., 14.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [13., 13., 13.],\n",
              "        [13., 13., 13.],\n",
              "        ...,\n",
              "        [14., 14., 14.],\n",
              "        [13., 13., 13.],\n",
              "        [13., 13., 13.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [13., 13., 13.],\n",
              "        [13., 13., 13.],\n",
              "        ...,\n",
              "        [14., 14., 14.],\n",
              "        [13., 13., 13.],\n",
              "        [13., 13., 13.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [13., 13., 13.],\n",
              "        [13., 13., 13.],\n",
              "        ...,\n",
              "        [15., 15., 15.],\n",
              "        [15., 15., 15.],\n",
              "        [15., 15., 15.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]]], dtype=float32)]\n",
              " new nomral class images path :[array([[[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]]], dtype=float32)]\n"
            ]
          }
        ],
        "source": [
          "#converting the normal images into array\n",
          "for array_converting in normal_class_images:\n",
          "  new_normal_class_images = []\n",
          "  array_conversion = img_to_array(array_converting)\n",
          "  new_normal_class_images.append(array_conversion)\n",
          "  print(f\" new nomral class images path :{new_normal_class_images}\")"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 53,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 1924,
            "status": "ok",
            "timestamp": 1733211401547,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "tkpYrQtERh5p",
          "outputId": "5ab71600-a7ef-4fb2-cb38-739c4bc2d206"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              " new penumonia class images path :[array([[[ 13.,  13.,  13.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       [[ 13.,  13.,  13.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       [[ 13.,  13.,  13.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[153., 153., 153.],\n",
              "        [158., 158., 158.],\n",
              "        [165., 165., 165.],\n",
              "        ...,\n",
              "        [ 58.,  58.,  58.],\n",
              "        [ 55.,  55.,  55.],\n",
              "        [ 43.,  43.,  43.]],\n",
              "\n",
              "       [[153., 153., 153.],\n",
              "        [158., 158., 158.],\n",
              "        [167., 166., 167.],\n",
              "        ...,\n",
              "        [ 57.,  57.,  57.],\n",
              "        [ 51.,  51.,  51.],\n",
              "        [ 41.,  41.,  41.]],\n",
              "\n",
              "       [[153., 153., 153.],\n",
              "        [158., 158., 158.],\n",
              "        [169., 169., 169.],\n",
              "        ...,\n",
              "        [ 55.,  55.,  55.],\n",
              "        [ 47.,  47.,  47.],\n",
              "        [ 38.,  38.,  38.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [ 89.,  89.,  89.],\n",
              "        [ 96.,  96.,  96.],\n",
              "        [129., 129., 129.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [ 97.,  97.,  97.],\n",
              "        [110., 110., 110.],\n",
              "        [126., 126., 126.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [103., 103., 103.],\n",
              "        [106., 106., 106.],\n",
              "        [119., 119., 119.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [136., 136., 136.],\n",
              "        [137., 137., 137.],\n",
              "        [121., 121., 121.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [137., 137., 137.],\n",
              "        [138., 138., 138.],\n",
              "        [123., 123., 123.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [134., 134., 134.],\n",
              "        [136., 136., 136.],\n",
              "        [127., 127., 127.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[10., 10., 10.],\n",
              "        [10., 10., 10.],\n",
              "        [10., 10., 10.],\n",
              "        ...,\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[10., 10., 10.],\n",
              "        [10., 10., 10.],\n",
              "        [11., 11., 11.],\n",
              "        ...,\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[10., 10., 10.],\n",
              "        [10., 10., 10.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        ...,\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[22., 22., 22.],\n",
              "        [22., 22., 22.],\n",
              "        [23., 23., 23.],\n",
              "        ...,\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[22., 22., 22.],\n",
              "        [23., 23., 23.],\n",
              "        [24., 24., 24.],\n",
              "        ...,\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[23., 23., 23.],\n",
              "        [22., 22., 22.],\n",
              "        [25., 25., 25.],\n",
              "        ...,\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.]],\n",
              "\n",
              "       [[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.]],\n",
              "\n",
              "       [[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.]],\n",
              "\n",
              "       [[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.]],\n",
              "\n",
              "       [[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[  6.,   6.,   6.],\n",
              "        [  6.,   6.,   6.],\n",
              "        [  6.,   6.,   6.],\n",
              "        ...,\n",
              "        [  2.,   2.,   2.],\n",
              "        [  3.,   3.,   3.],\n",
              "        [  2.,   2.,   2.]],\n",
              "\n",
              "       [[  6.,   6.,   6.],\n",
              "        [  7.,   7.,   7.],\n",
              "        [  7.,   7.,   7.],\n",
              "        ...,\n",
              "        [  3.,   3.,   3.],\n",
              "        [  3.,   3.,   3.],\n",
              "        [  3.,   3.,   3.]],\n",
              "\n",
              "       [[  6.,   6.,   6.],\n",
              "        [  7.,   7.,   7.],\n",
              "        [  7.,   7.,   7.],\n",
              "        ...,\n",
              "        [  3.,   3.,   3.],\n",
              "        [  3.,   3.,   3.],\n",
              "        [  3.,   3.,   3.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[175., 175., 175.],\n",
              "        [ 82.,  82.,  82.],\n",
              "        [121., 121., 121.],\n",
              "        ...,\n",
              "        [ 29.,  29.,  29.],\n",
              "        [ 88.,  88.,  88.],\n",
              "        [ 70.,  70.,  70.]],\n",
              "\n",
              "       [[163., 163., 163.],\n",
              "        [  5.,   5.,   5.],\n",
              "        [ 88.,  88.,  88.],\n",
              "        ...,\n",
              "        [ 18.,  18.,  18.],\n",
              "        [ 34.,  34.,  34.],\n",
              "        [ 19.,  19.,  19.]],\n",
              "\n",
              "       [[ 96.,  96.,  96.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [ 77.,  77.,  77.],\n",
              "        ...,\n",
              "        [ 11.,  11.,  11.],\n",
              "        [  8.,   8.,   8.],\n",
              "        [ 10.,  10.,  10.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[ 6.,  6.,  6.],\n",
              "        [ 6.,  6.,  6.],\n",
              "        [ 6.,  6.,  6.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 6.,  6.,  6.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        ...,\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 4.,  4.,  4.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 7.,  7.,  7.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        ...,\n",
              "        [ 4.,  4.,  4.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        [ 5.,  5.,  5.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[10., 10., 10.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        [10., 10., 10.],\n",
              "        ...,\n",
              "        [ 7.,  7.,  7.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        [ 8.,  8.,  8.]],\n",
              "\n",
              "       [[10., 10., 10.],\n",
              "        [10., 10., 10.],\n",
              "        [10., 10., 10.],\n",
              "        ...,\n",
              "        [ 7.,  7.,  7.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[10., 10., 10.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        [10., 10., 10.],\n",
              "        ...,\n",
              "        [ 5.,  5.,  5.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        [ 5.,  5.,  5.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[35., 29., 31.],\n",
              "        [35., 31., 32.],\n",
              "        [35., 31., 32.],\n",
              "        ...,\n",
              "        [35., 31., 32.],\n",
              "        [32., 28., 29.],\n",
              "        [34., 30., 31.]],\n",
              "\n",
              "       [[34., 30., 31.],\n",
              "        [39., 35., 36.],\n",
              "        [43., 39., 40.],\n",
              "        ...,\n",
              "        [46., 42., 43.],\n",
              "        [39., 35., 36.],\n",
              "        [36., 32., 33.]],\n",
              "\n",
              "       [[34., 30., 31.],\n",
              "        [43., 39., 40.],\n",
              "        [51., 47., 48.],\n",
              "        ...,\n",
              "        [58., 54., 55.],\n",
              "        [45., 41., 42.],\n",
              "        [35., 31., 32.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[35., 33., 34.],\n",
              "        [55., 53., 54.],\n",
              "        [77., 75., 76.],\n",
              "        ...,\n",
              "        [80., 78., 79.],\n",
              "        [55., 53., 54.],\n",
              "        [37., 33., 34.]],\n",
              "\n",
              "       [[33., 29., 30.],\n",
              "        [43., 39., 40.],\n",
              "        [52., 50., 51.],\n",
              "        ...,\n",
              "        [55., 53., 54.],\n",
              "        [42., 40., 41.],\n",
              "        [36., 32., 33.]],\n",
              "\n",
              "       [[34., 30., 31.],\n",
              "        [35., 31., 32.],\n",
              "        [36., 32., 33.],\n",
              "        ...,\n",
              "        [33., 31., 32.],\n",
              "        [31., 29., 30.],\n",
              "        [34., 30., 31.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[ 90.,  90.,  90.],\n",
              "        [ 93.,  93.,  93.],\n",
              "        [ 93.,  93.,  93.],\n",
              "        ...,\n",
              "        [ 41.,  41.,  41.],\n",
              "        [ 42.,  42.,  42.],\n",
              "        [ 43.,  43.,  43.]],\n",
              "\n",
              "       [[ 90.,  90.,  90.],\n",
              "        [ 90.,  90.,  90.],\n",
              "        [ 88.,  88.,  88.],\n",
              "        ...,\n",
              "        [ 42.,  42.,  42.],\n",
              "        [ 42.,  42.,  42.],\n",
              "        [ 43.,  43.,  43.]],\n",
              "\n",
              "       [[ 89.,  89.,  89.],\n",
              "        [ 90.,  90.,  90.],\n",
              "        [ 89.,  89.,  89.],\n",
              "        ...,\n",
              "        [ 44.,  44.,  44.],\n",
              "        [ 43.,  43.,  43.],\n",
              "        [ 43.,  43.,  43.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[155., 155., 155.],\n",
              "        [158., 158., 158.],\n",
              "        [158., 158., 158.],\n",
              "        ...,\n",
              "        [126., 126., 126.],\n",
              "        [127., 127., 127.],\n",
              "        [128., 128., 128.]],\n",
              "\n",
              "       [[157., 157., 157.],\n",
              "        [155., 155., 155.],\n",
              "        [154., 154., 154.],\n",
              "        ...,\n",
              "        [122., 122., 122.],\n",
              "        [120., 120., 120.],\n",
              "        [122., 122., 122.]],\n",
              "\n",
              "       [[156., 156., 156.],\n",
              "        [155., 155., 155.],\n",
              "        [153., 153., 153.],\n",
              "        ...,\n",
              "        [122., 122., 122.],\n",
              "        [120., 120., 120.],\n",
              "        [122., 122., 122.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[182., 182., 182.],\n",
              "        [169., 169., 169.],\n",
              "        [152., 152., 152.],\n",
              "        ...,\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.]],\n",
              "\n",
              "       [[165., 165., 165.],\n",
              "        [150., 150., 150.],\n",
              "        [138., 138., 138.],\n",
              "        ...,\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.]],\n",
              "\n",
              "       [[146., 146., 146.],\n",
              "        [134., 134., 134.],\n",
              "        [128., 128., 128.],\n",
              "        ...,\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[243., 243., 243.],\n",
              "        [244., 244., 244.],\n",
              "        [245., 245., 245.],\n",
              "        ...,\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.]],\n",
              "\n",
              "       [[245., 245., 245.],\n",
              "        [245., 245., 245.],\n",
              "        [245., 245., 245.],\n",
              "        ...,\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.]],\n",
              "\n",
              "       [[254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        ...,\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[19., 19., 19.],\n",
              "        [24., 24., 24.],\n",
              "        [25., 25., 25.],\n",
              "        ...,\n",
              "        [53., 53., 53.],\n",
              "        [54., 54., 54.],\n",
              "        [62., 62., 62.]],\n",
              "\n",
              "       [[24., 24., 24.],\n",
              "        [22., 22., 22.],\n",
              "        [22., 22., 22.],\n",
              "        ...,\n",
              "        [57., 57., 57.],\n",
              "        [54., 54., 54.],\n",
              "        [56., 56., 56.]],\n",
              "\n",
              "       [[20., 20., 20.],\n",
              "        [22., 22., 22.],\n",
              "        [25., 25., 25.],\n",
              "        ...,\n",
              "        [55., 55., 55.],\n",
              "        [61., 61., 61.],\n",
              "        [61., 61., 61.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [24., 24., 24.],\n",
              "        [27., 27., 27.],\n",
              "        [27., 27., 27.]],\n",
              "\n",
              "       [[ 7.,  7.,  7.],\n",
              "        [ 6.,  6.,  6.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        ...,\n",
              "        [25., 25., 25.],\n",
              "        [25., 25., 25.],\n",
              "        [25., 25., 25.]],\n",
              "\n",
              "       [[ 8.,  8.,  8.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        ...,\n",
              "        [22., 22., 22.],\n",
              "        [21., 21., 21.],\n",
              "        [27., 27., 27.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[255., 255., 255.],\n",
              "        [255., 255., 255.],\n",
              "        [126., 126., 126.],\n",
              "        ...,\n",
              "        [ 82.,  82.,  82.],\n",
              "        [ 56.,  56.,  56.],\n",
              "        [ 55.,  55.,  55.]],\n",
              "\n",
              "       [[253., 253., 253.],\n",
              "        [254., 254., 254.],\n",
              "        [120., 120., 120.],\n",
              "        ...,\n",
              "        [ 77.,  77.,  77.],\n",
              "        [ 54.,  54.,  54.],\n",
              "        [ 55.,  55.,  55.]],\n",
              "\n",
              "       [[255., 255., 255.],\n",
              "        [255., 255., 255.],\n",
              "        [112., 112., 112.],\n",
              "        ...,\n",
              "        [ 71.,  71.,  71.],\n",
              "        [ 56.,  56.,  56.],\n",
              "        [ 55.,  55.,  55.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[255., 255., 255.],\n",
              "        [253., 253., 253.],\n",
              "        [ 39.,  39.,  39.],\n",
              "        ...,\n",
              "        [ 24.,  24.,  24.],\n",
              "        [ 68.,  68.,  68.],\n",
              "        [ 70.,  70.,  70.]],\n",
              "\n",
              "       [[253., 253., 253.],\n",
              "        [254., 254., 254.],\n",
              "        [255., 255., 255.],\n",
              "        ...,\n",
              "        [251., 251., 251.],\n",
              "        [254., 254., 254.],\n",
              "        [253., 253., 253.]],\n",
              "\n",
              "       [[253., 253., 253.],\n",
              "        [253., 253., 253.],\n",
              "        [252., 252., 252.],\n",
              "        ...,\n",
              "        [255., 255., 255.],\n",
              "        [255., 255., 255.],\n",
              "        [255., 255., 255.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[109., 109., 109.],\n",
              "        [ 43.,  43.,  43.],\n",
              "        [ 16.,  16.,  16.],\n",
              "        ...,\n",
              "        [  2.,   2.,   2.],\n",
              "        [  2.,   2.,   2.],\n",
              "        [  6.,   6.,   6.]],\n",
              "\n",
              "       [[107., 107., 107.],\n",
              "        [ 42.,  42.,  42.],\n",
              "        [ 15.,  15.,  15.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  2.,   2.,   2.],\n",
              "        [  6.,   6.,   6.]],\n",
              "\n",
              "       [[105., 105., 105.],\n",
              "        [ 42.,  42.,  42.],\n",
              "        [ 15.,  15.,  15.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  2.,   2.,   2.],\n",
              "        [  6.,   6.,   6.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[  5.,   5.,   5.],\n",
              "        [  3.,   3.,   3.],\n",
              "        [  3.,   3.,   3.],\n",
              "        ...,\n",
              "        [  0.,   0.,   0.],\n",
              "        [  2.,   2.,   2.],\n",
              "        [  6.,   6.,   6.]],\n",
              "\n",
              "       [[  2.,   2.,   2.],\n",
              "        [  3.,   3.,   3.],\n",
              "        [  3.,   3.,   3.],\n",
              "        ...,\n",
              "        [  0.,   0.,   0.],\n",
              "        [  2.,   2.,   2.],\n",
              "        [  6.,   6.,   6.]],\n",
              "\n",
              "       [[ 41.,  41.,  41.],\n",
              "        [ 40.,  40.,  40.],\n",
              "        [ 41.,  41.,  41.],\n",
              "        ...,\n",
              "        [ 40.,  40.,  40.],\n",
              "        [ 35.,  35.,  35.],\n",
              "        [ 49.,  49.,  49.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[77., 77., 77.],\n",
              "        [78., 78., 78.],\n",
              "        [80., 80., 80.],\n",
              "        ...,\n",
              "        [64., 64., 64.],\n",
              "        [61., 61., 61.],\n",
              "        [60., 60., 60.]],\n",
              "\n",
              "       [[81., 81., 81.],\n",
              "        [83., 83., 83.],\n",
              "        [84., 84., 84.],\n",
              "        ...,\n",
              "        [71., 71., 71.],\n",
              "        [68., 68., 68.],\n",
              "        [66., 66., 66.]],\n",
              "\n",
              "       [[85., 85., 85.],\n",
              "        [89., 89., 89.],\n",
              "        [89., 89., 89.],\n",
              "        ...,\n",
              "        [75., 75., 75.],\n",
              "        [72., 72., 72.],\n",
              "        [69., 69., 69.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 4.,  4.,  4.],\n",
              "        ...,\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        ...,\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 6.,  6.,  6.],\n",
              "        ...,\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 3.,  3.,  3.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[178., 178., 178.],\n",
              "        [178., 178., 178.],\n",
              "        [178., 178., 178.],\n",
              "        ...,\n",
              "        [178., 178., 178.],\n",
              "        [178., 178., 178.],\n",
              "        [178., 178., 178.]],\n",
              "\n",
              "       [[254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        ...,\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.]],\n",
              "\n",
              "       [[254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        ...,\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[  5.,   5.,   5.],\n",
              "        [  3.,   3.,   3.],\n",
              "        [ 10.,  10.,  10.],\n",
              "        ...,\n",
              "        [ 17.,  17.,  17.],\n",
              "        [ 17.,  17.,  17.],\n",
              "        [ 16.,  16.,  16.]],\n",
              "\n",
              "       [[  5.,   5.,   5.],\n",
              "        [  4.,   4.,   4.],\n",
              "        [ 10.,  10.,  10.],\n",
              "        ...,\n",
              "        [ 17.,  17.,  17.],\n",
              "        [ 17.,  17.,  17.],\n",
              "        [ 16.,  16.,  16.]],\n",
              "\n",
              "       [[  5.,   5.,   5.],\n",
              "        [  4.,   4.,   4.],\n",
              "        [ 10.,  10.,  10.],\n",
              "        ...,\n",
              "        [ 17.,  17.,  17.],\n",
              "        [ 17.,  17.,  17.],\n",
              "        [ 16.,  16.,  16.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[  0.,   4.,   0.],\n",
              "        [  0.,   4.,   0.],\n",
              "        [  0.,   2.,   0.],\n",
              "        ...,\n",
              "        [  6.,   6.,   6.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  5.,   5.,   5.]],\n",
              "\n",
              "       [[  0.,   3.,   0.],\n",
              "        [  0.,   2.,   0.],\n",
              "        [  0.,   2.,   0.],\n",
              "        ...,\n",
              "        [  5.,   5.,   5.],\n",
              "        [  2.,   2.,   2.],\n",
              "        [  2.,   2.,   2.]],\n",
              "\n",
              "       [[  0.,   0.,   2.],\n",
              "        [  0.,   1.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [205., 205., 205.],\n",
              "        [  4.,   4.,   4.],\n",
              "        [  2.,   2.,   2.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [125., 125., 125.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  5.,   5.,   5.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [  0.,   0.,   0.],\n",
              "        [  4.,   4.,   4.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [  3.,   3.,   3.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  0.,   0.,   0.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[ 19.,  19.,  19.],\n",
              "        [ 19.,  19.,  19.],\n",
              "        [ 20.,  20.,  20.],\n",
              "        ...,\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       [[ 19.,  19.,  19.],\n",
              "        [ 19.,  19.,  19.],\n",
              "        [ 20.,  20.,  20.],\n",
              "        ...,\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       [[ 20.,  20.,  20.],\n",
              "        [ 20.,  20.,  20.],\n",
              "        [ 20.,  20.,  20.],\n",
              "        ...,\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[183., 183., 183.],\n",
              "        [184., 184., 184.],\n",
              "        [185., 185., 185.],\n",
              "        ...,\n",
              "        [148., 148., 148.],\n",
              "        [146., 146., 146.],\n",
              "        [144., 144., 144.]],\n",
              "\n",
              "       [[186., 186., 186.],\n",
              "        [186., 186., 186.],\n",
              "        [187., 187., 187.],\n",
              "        ...,\n",
              "        [148., 148., 148.],\n",
              "        [146., 146., 146.],\n",
              "        [144., 144., 144.]],\n",
              "\n",
              "       [[188., 188., 188.],\n",
              "        [188., 188., 188.],\n",
              "        [189., 189., 189.],\n",
              "        ...,\n",
              "        [148., 148., 148.],\n",
              "        [146., 146., 146.],\n",
              "        [144., 144., 144.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[105., 105., 105.],\n",
              "        [104., 104., 104.],\n",
              "        [103., 103., 103.],\n",
              "        ...,\n",
              "        [103., 103., 103.],\n",
              "        [103., 103., 103.],\n",
              "        [103., 103., 103.]],\n",
              "\n",
              "       [[104., 104., 104.],\n",
              "        [103., 103., 103.],\n",
              "        [102., 102., 102.],\n",
              "        ...,\n",
              "        [104., 104., 104.],\n",
              "        [104., 104., 104.],\n",
              "        [104., 104., 104.]],\n",
              "\n",
              "       [[103., 103., 103.],\n",
              "        [102., 102., 102.],\n",
              "        [101., 101., 101.],\n",
              "        ...,\n",
              "        [105., 105., 105.],\n",
              "        [105., 105., 105.],\n",
              "        [105., 105., 105.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[184., 184., 184.],\n",
              "        [185., 185., 185.],\n",
              "        [186., 186., 186.],\n",
              "        ...,\n",
              "        [195., 195., 195.],\n",
              "        [198., 198., 198.],\n",
              "        [200., 200., 200.]],\n",
              "\n",
              "       [[184., 184., 184.],\n",
              "        [185., 185., 185.],\n",
              "        [186., 186., 186.],\n",
              "        ...,\n",
              "        [195., 195., 195.],\n",
              "        [198., 198., 198.],\n",
              "        [200., 200., 200.]],\n",
              "\n",
              "       [[184., 184., 184.],\n",
              "        [185., 185., 185.],\n",
              "        [186., 186., 186.],\n",
              "        ...,\n",
              "        [195., 195., 195.],\n",
              "        [198., 198., 198.],\n",
              "        [200., 200., 200.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[  2.,   2.,   2.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  5.,   5.,   5.],\n",
              "        ...,\n",
              "        [  4.,   4.,   4.],\n",
              "        [  3.,   3.,   3.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       [[  4.,   4.,   4.],\n",
              "        [  6.,   6.,   6.],\n",
              "        [  6.,   6.,   6.],\n",
              "        ...,\n",
              "        [  4.,   4.,   4.],\n",
              "        [  3.,   3.,   3.],\n",
              "        [  1.,   1.,   1.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  8.,   8.,   8.],\n",
              "        [  9.,   9.,   9.],\n",
              "        ...,\n",
              "        [  4.,   4.,   4.],\n",
              "        [  3.,   3.,   3.],\n",
              "        [  1.,   1.,   1.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[115., 115., 115.],\n",
              "        [113., 113., 113.],\n",
              "        [115., 115., 115.],\n",
              "        ...,\n",
              "        [  6.,   5.,   3.],\n",
              "        [  7.,   5.,   6.],\n",
              "        [  7.,   5.,   8.]],\n",
              "\n",
              "       [[116., 116., 116.],\n",
              "        [115., 115., 115.],\n",
              "        [116., 116., 116.],\n",
              "        ...,\n",
              "        [  5.,   4.,   2.],\n",
              "        [  5.,   3.,   4.],\n",
              "        [  6.,   4.,   7.]],\n",
              "\n",
              "       [[113., 113., 113.],\n",
              "        [115., 115., 115.],\n",
              "        [114., 114., 114.],\n",
              "        ...,\n",
              "        [  5.,   4.,   2.],\n",
              "        [  6.,   4.,   5.],\n",
              "        [  7.,   5.,   8.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[214., 214., 214.],\n",
              "        [214., 214., 214.],\n",
              "        [214., 214., 214.],\n",
              "        ...,\n",
              "        [159., 159., 159.],\n",
              "        [159., 159., 159.],\n",
              "        [145., 145., 145.]],\n",
              "\n",
              "       [[202., 202., 202.],\n",
              "        [202., 202., 202.],\n",
              "        [202., 202., 202.],\n",
              "        ...,\n",
              "        [132., 132., 132.],\n",
              "        [132., 132., 132.],\n",
              "        [132., 132., 132.]],\n",
              "\n",
              "       [[175., 175., 175.],\n",
              "        [175., 175., 175.],\n",
              "        [175., 175., 175.],\n",
              "        ...,\n",
              "        [118., 118., 118.],\n",
              "        [118., 118., 118.],\n",
              "        [118., 118., 118.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 22.,  22.,  22.],\n",
              "        [ 22.,  22.,  22.],\n",
              "        [ 22.,  22.,  22.],\n",
              "        ...,\n",
              "        [ 23.,  23.,  23.],\n",
              "        [ 23.,  23.,  23.],\n",
              "        [ 23.,  23.,  23.]],\n",
              "\n",
              "       [[ 22.,  22.,  22.],\n",
              "        [ 22.,  22.,  22.],\n",
              "        [ 22.,  22.,  22.],\n",
              "        ...,\n",
              "        [ 23.,  23.,  23.],\n",
              "        [ 23.,  23.,  23.],\n",
              "        [ 23.,  23.,  23.]],\n",
              "\n",
              "       [[255., 255., 255.],\n",
              "        [255., 255., 255.],\n",
              "        [255., 255., 255.],\n",
              "        ...,\n",
              "        [255., 255., 255.],\n",
              "        [255., 255., 255.],\n",
              "        [255., 255., 255.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[16., 16., 16.],\n",
              "        [16., 16., 16.],\n",
              "        [16., 16., 16.],\n",
              "        ...,\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 4.,  4.,  4.],\n",
              "        [ 5.,  5.,  5.]],\n",
              "\n",
              "       [[16., 16., 16.],\n",
              "        [16., 16., 16.],\n",
              "        [16., 16., 16.],\n",
              "        ...,\n",
              "        [ 4.,  4.,  4.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        [ 6.,  6.,  6.]],\n",
              "\n",
              "       [[16., 16., 16.],\n",
              "        [16., 16., 16.],\n",
              "        [16., 16., 16.],\n",
              "        ...,\n",
              "        [ 5.,  5.,  5.],\n",
              "        [ 7.,  7.,  7.],\n",
              "        [ 4.,  4.,  4.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[43., 43., 43.],\n",
              "        [50., 50., 50.],\n",
              "        [60., 60., 60.],\n",
              "        ...,\n",
              "        [27., 27., 29.],\n",
              "        [24., 24., 26.],\n",
              "        [21., 21., 23.]],\n",
              "\n",
              "       [[46., 46., 48.],\n",
              "        [52., 52., 52.],\n",
              "        [62., 62., 60.],\n",
              "        ...,\n",
              "        [23., 23., 23.],\n",
              "        [20., 20., 20.],\n",
              "        [23., 21., 24.]],\n",
              "\n",
              "       [[46., 46., 48.],\n",
              "        [52., 52., 52.],\n",
              "        [62., 62., 60.],\n",
              "        ...,\n",
              "        [23., 23., 23.],\n",
              "        [19., 19., 19.],\n",
              "        [22., 20., 23.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[253., 253., 253.],\n",
              "        [109., 109., 109.],\n",
              "        [107., 107., 107.],\n",
              "        ...,\n",
              "        [ 93.,  93.,  93.],\n",
              "        [ 93.,  93.,  93.],\n",
              "        [ 94.,  94.,  94.]],\n",
              "\n",
              "       [[254., 254., 254.],\n",
              "        [111., 111., 111.],\n",
              "        [112., 112., 112.],\n",
              "        ...,\n",
              "        [ 94.,  94.,  94.],\n",
              "        [ 94.,  94.,  94.],\n",
              "        [ 95.,  95.,  95.]],\n",
              "\n",
              "       [[255., 255., 255.],\n",
              "        [113., 113., 113.],\n",
              "        [113., 113., 113.],\n",
              "        ...,\n",
              "        [ 96.,  96.,  96.],\n",
              "        [ 96.,  96.,  96.],\n",
              "        [ 96.,  96.,  96.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[254., 254., 254.],\n",
              "        [235., 235., 235.],\n",
              "        [236., 236., 236.],\n",
              "        ...,\n",
              "        [142., 142., 142.],\n",
              "        [142., 142., 142.],\n",
              "        [141., 141., 141.]],\n",
              "\n",
              "       [[254., 254., 254.],\n",
              "        [235., 235., 235.],\n",
              "        [235., 235., 235.],\n",
              "        ...,\n",
              "        [138., 138., 138.],\n",
              "        [138., 138., 138.],\n",
              "        [138., 138., 138.]],\n",
              "\n",
              "       [[254., 254., 254.],\n",
              "        [235., 235., 235.],\n",
              "        [235., 235., 235.],\n",
              "        ...,\n",
              "        [135., 135., 135.],\n",
              "        [135., 135., 135.],\n",
              "        [135., 135., 135.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[227., 227., 204.],\n",
              "        [227., 227., 204.],\n",
              "        [227., 227., 204.],\n",
              "        ...,\n",
              "        [227., 227., 204.],\n",
              "        [227., 227., 204.],\n",
              "        [227., 227., 204.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       [[152., 152., 152.],\n",
              "        [147., 147., 147.],\n",
              "        [136., 136., 136.],\n",
              "        ...,\n",
              "        [  7.,   7.,   7.],\n",
              "        [  5.,   5.,   5.],\n",
              "        [  6.,   6.,   6.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 20.,  20.,  20.],\n",
              "        [ 23.,  23.,  23.],\n",
              "        [ 23.,  23.,  23.],\n",
              "        ...,\n",
              "        [ 87.,  87.,  87.],\n",
              "        [ 85.,  85.,  85.],\n",
              "        [ 84.,  84.,  84.]],\n",
              "\n",
              "       [[ 21.,  21.,  21.],\n",
              "        [ 22.,  22.,  22.],\n",
              "        [ 26.,  26.,  26.],\n",
              "        ...,\n",
              "        [ 84.,  84.,  84.],\n",
              "        [ 86.,  86.,  86.],\n",
              "        [ 82.,  82.,  82.]],\n",
              "\n",
              "       [[ 22.,  22.,  22.],\n",
              "        [ 21.,  21.,  21.],\n",
              "        [ 23.,  23.,  23.],\n",
              "        ...,\n",
              "        [ 80.,  80.,  80.],\n",
              "        [ 81.,  81.,  81.],\n",
              "        [ 78.,  78.,  78.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[255., 255., 255.],\n",
              "        [255., 255., 255.],\n",
              "        [255., 255., 255.],\n",
              "        ...,\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.]],\n",
              "\n",
              "       [[  9.,   9.,   9.],\n",
              "        [  8.,   8.,   8.],\n",
              "        [  6.,   6.,   6.],\n",
              "        ...,\n",
              "        [246., 246., 246.],\n",
              "        [250., 250., 250.],\n",
              "        [254., 254., 254.]],\n",
              "\n",
              "       [[  7.,   7.,   7.],\n",
              "        [  6.,   6.,   6.],\n",
              "        [  4.,   4.,   4.],\n",
              "        ...,\n",
              "        [240., 240., 240.],\n",
              "        [245., 245., 245.],\n",
              "        [253., 253., 253.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[237., 237., 237.],\n",
              "        [239., 239., 239.],\n",
              "        [239., 239., 239.],\n",
              "        ...,\n",
              "        [253., 253., 253.],\n",
              "        [254., 254., 254.],\n",
              "        [252., 252., 252.]],\n",
              "\n",
              "       [[244., 244., 244.],\n",
              "        [241., 241., 241.],\n",
              "        [238., 238., 238.],\n",
              "        ...,\n",
              "        [252., 252., 252.],\n",
              "        [253., 253., 253.],\n",
              "        [255., 255., 255.]],\n",
              "\n",
              "       [[250., 250., 250.],\n",
              "        [243., 243., 243.],\n",
              "        [239., 239., 239.],\n",
              "        ...,\n",
              "        [254., 254., 254.],\n",
              "        [255., 255., 255.],\n",
              "        [254., 254., 254.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [ 65.,  65.,  65.],\n",
              "        [ 66.,  66.,  66.],\n",
              "        [ 68.,  68.,  68.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [ 70.,  70.,  70.],\n",
              "        [ 74.,  74.,  74.],\n",
              "        [ 79.,  79.,  79.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [ 77.,  77.,  77.],\n",
              "        [ 80.,  80.,  80.],\n",
              "        [ 82.,  82.,  82.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [140., 140., 140.],\n",
              "        [142., 142., 142.],\n",
              "        [144., 144., 144.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [141., 141., 141.],\n",
              "        [142., 142., 142.],\n",
              "        [143., 143., 143.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [139., 139., 139.],\n",
              "        [143., 143., 143.],\n",
              "        [145., 145., 145.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        [ 3.,  3.,  3.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[52., 52., 52.],\n",
              "        [52., 52., 52.],\n",
              "        [54., 54., 54.],\n",
              "        ...,\n",
              "        [34., 34., 34.],\n",
              "        [34., 34., 34.],\n",
              "        [30., 30., 30.]],\n",
              "\n",
              "       [[47., 47., 47.],\n",
              "        [50., 50., 50.],\n",
              "        [50., 50., 50.],\n",
              "        ...,\n",
              "        [33., 33., 33.],\n",
              "        [31., 31., 31.],\n",
              "        [32., 32., 32.]],\n",
              "\n",
              "       [[59., 59., 59.],\n",
              "        [50., 50., 50.],\n",
              "        [44., 44., 44.],\n",
              "        ...,\n",
              "        [31., 31., 31.],\n",
              "        [31., 31., 31.],\n",
              "        [31., 31., 31.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[184., 184., 184.],\n",
              "        [183., 183., 183.],\n",
              "        [183., 183., 183.],\n",
              "        ...,\n",
              "        [169., 169., 169.],\n",
              "        [169., 169., 169.],\n",
              "        [169., 169., 169.]],\n",
              "\n",
              "       [[187., 187., 187.],\n",
              "        [184., 184., 184.],\n",
              "        [181., 181., 181.],\n",
              "        ...,\n",
              "        [169., 169., 169.],\n",
              "        [169., 169., 169.],\n",
              "        [169., 169., 169.]],\n",
              "\n",
              "       [[190., 190., 190.],\n",
              "        [186., 186., 186.],\n",
              "        [183., 183., 183.],\n",
              "        ...,\n",
              "        [107., 107., 107.],\n",
              "        [107., 107., 107.],\n",
              "        [107., 107., 107.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.]],\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.]],\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [ 34.,  34.,  34.],\n",
              "        [ 34.,  34.,  34.],\n",
              "        [ 34.,  34.,  34.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [ 34.,  34.,  34.],\n",
              "        [ 34.,  34.,  34.],\n",
              "        [ 34.,  34.,  34.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [ 34.,  34.,  34.],\n",
              "        [ 34.,  34.,  34.],\n",
              "        [ 34.,  34.,  34.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[160., 160., 160.],\n",
              "        [160., 160., 160.],\n",
              "        [160., 160., 160.],\n",
              "        ...,\n",
              "        [173., 173., 173.],\n",
              "        [174., 174., 174.],\n",
              "        [174., 174., 174.]],\n",
              "\n",
              "       [[160., 160., 160.],\n",
              "        [160., 160., 160.],\n",
              "        [160., 160., 160.],\n",
              "        ...,\n",
              "        [172., 172., 172.],\n",
              "        [173., 173., 173.],\n",
              "        [173., 173., 173.]],\n",
              "\n",
              "       [[160., 160., 160.],\n",
              "        [160., 160., 160.],\n",
              "        [160., 160., 160.],\n",
              "        ...,\n",
              "        [171., 171., 171.],\n",
              "        [172., 172., 172.],\n",
              "        [172., 172., 172.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[255., 255., 255.],\n",
              "        [253., 253., 253.],\n",
              "        [255., 255., 255.],\n",
              "        ...,\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.]],\n",
              "\n",
              "       [[253., 253., 253.],\n",
              "        [253., 253., 253.],\n",
              "        [253., 253., 253.],\n",
              "        ...,\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.]],\n",
              "\n",
              "       [[255., 255., 255.],\n",
              "        [255., 255., 255.],\n",
              "        [252., 252., 252.],\n",
              "        ...,\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[245., 245., 245.],\n",
              "        [238., 238., 238.],\n",
              "        [235., 235., 235.],\n",
              "        ...,\n",
              "        [254., 254., 254.],\n",
              "        [255., 255., 255.],\n",
              "        [253., 253., 253.]],\n",
              "\n",
              "       [[252., 252., 252.],\n",
              "        [244., 244., 244.],\n",
              "        [237., 237., 237.],\n",
              "        ...,\n",
              "        [253., 253., 253.],\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.]],\n",
              "\n",
              "       [[255., 255., 255.],\n",
              "        [248., 248., 248.],\n",
              "        [240., 240., 240.],\n",
              "        ...,\n",
              "        [253., 253., 253.],\n",
              "        [253., 253., 253.],\n",
              "        [255., 255., 255.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[ 31.,  31.,  31.],\n",
              "        [ 30.,  30.,  30.],\n",
              "        [ 30.,  30.,  30.],\n",
              "        ...,\n",
              "        [  3.,   3.,   3.],\n",
              "        [  3.,   3.,   3.],\n",
              "        [  3.,   3.,   3.]],\n",
              "\n",
              "       [[ 70.,  70.,  70.],\n",
              "        [ 69.,  69.,  69.],\n",
              "        [ 69.,  69.,  69.],\n",
              "        ...,\n",
              "        [ 10.,  10.,  10.],\n",
              "        [ 10.,  10.,  10.],\n",
              "        [ 10.,  10.,  10.]],\n",
              "\n",
              "       [[ 67.,  67.,  67.],\n",
              "        [ 67.,  67.,  67.],\n",
              "        [ 66.,  66.,  66.],\n",
              "        ...,\n",
              "        [ 37.,  37.,  37.],\n",
              "        [ 36.,  36.,  36.],\n",
              "        [ 36.,  36.,  36.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 27.,  27.,  27.],\n",
              "        [ 28.,  28.,  28.],\n",
              "        [ 29.,  29.,  29.],\n",
              "        ...,\n",
              "        [128., 128., 128.],\n",
              "        [127., 127., 127.],\n",
              "        [126., 126., 126.]],\n",
              "\n",
              "       [[ 27.,  27.,  27.],\n",
              "        [ 28.,  28.,  28.],\n",
              "        [ 29.,  29.,  29.],\n",
              "        ...,\n",
              "        [128., 128., 128.],\n",
              "        [127., 127., 127.],\n",
              "        [127., 127., 127.]],\n",
              "\n",
              "       [[ 27.,  27.,  27.],\n",
              "        [ 28.,  28.,  28.],\n",
              "        [ 29.,  29.,  29.],\n",
              "        ...,\n",
              "        [128., 128., 128.],\n",
              "        [127., 127., 127.],\n",
              "        [127., 127., 127.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[253., 253., 253.],\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        ...,\n",
              "        [254., 254., 254.],\n",
              "        [255., 255., 255.],\n",
              "        [255., 255., 255.]],\n",
              "\n",
              "       [[255., 255., 255.],\n",
              "        [255., 255., 255.],\n",
              "        [255., 255., 255.],\n",
              "        ...,\n",
              "        [253., 253., 253.],\n",
              "        [253., 253., 253.],\n",
              "        [253., 253., 253.]],\n",
              "\n",
              "       [[127., 127., 127.],\n",
              "        [127., 127., 127.],\n",
              "        [127., 127., 127.],\n",
              "        ...,\n",
              "        [127., 127., 127.],\n",
              "        [127., 127., 127.],\n",
              "        [127., 127., 127.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 95.,  95.,  95.],\n",
              "        [ 94.,  94.,  94.],\n",
              "        [ 93.,  93.,  93.],\n",
              "        ...,\n",
              "        [ 41.,  41.,  41.],\n",
              "        [ 40.,  40.,  40.],\n",
              "        [ 39.,  39.,  39.]],\n",
              "\n",
              "       [[ 94.,  94.,  94.],\n",
              "        [ 91.,  91.,  91.],\n",
              "        [ 91.,  91.,  91.],\n",
              "        ...,\n",
              "        [ 41.,  41.,  41.],\n",
              "        [ 39.,  39.,  39.],\n",
              "        [ 38.,  38.,  38.]],\n",
              "\n",
              "       [[ 92.,  92.,  92.],\n",
              "        [ 90.,  90.,  90.],\n",
              "        [ 90.,  90.,  90.],\n",
              "        ...,\n",
              "        [ 41.,  41.,  41.],\n",
              "        [ 39.,  39.,  39.],\n",
              "        [ 37.,  37.,  37.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[102., 102., 102.],\n",
              "        [ 98.,  98.,  98.],\n",
              "        [106., 106., 106.],\n",
              "        ...,\n",
              "        [ 79.,  79.,  79.],\n",
              "        [ 78.,  78.,  78.],\n",
              "        [ 76.,  76.,  76.]],\n",
              "\n",
              "       [[101., 101., 101.],\n",
              "        [101., 101., 101.],\n",
              "        [104., 104., 104.],\n",
              "        ...,\n",
              "        [ 80.,  80.,  80.],\n",
              "        [ 80.,  80.,  80.],\n",
              "        [ 80.,  80.,  80.]],\n",
              "\n",
              "       [[101., 101., 101.],\n",
              "        [104., 104., 104.],\n",
              "        [102., 102., 102.],\n",
              "        ...,\n",
              "        [ 79.,  79.,  79.],\n",
              "        [ 80.,  80.,  80.],\n",
              "        [ 81.,  81.,  81.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[179., 179., 179.],\n",
              "        [179., 179., 179.],\n",
              "        [179., 179., 179.],\n",
              "        ...,\n",
              "        [135., 135., 135.],\n",
              "        [133., 133., 133.],\n",
              "        [133., 133., 133.]],\n",
              "\n",
              "       [[180., 180., 180.],\n",
              "        [179., 179., 179.],\n",
              "        [178., 178., 178.],\n",
              "        ...,\n",
              "        [131., 131., 131.],\n",
              "        [131., 131., 131.],\n",
              "        [130., 130., 130.]],\n",
              "\n",
              "       [[182., 182., 182.],\n",
              "        [181., 181., 181.],\n",
              "        [180., 180., 180.],\n",
              "        ...,\n",
              "        [128., 128., 128.],\n",
              "        [128., 128., 128.],\n",
              "        [129., 129., 129.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[ 45.,  45.,  45.],\n",
              "        [ 44.,  44.,  44.],\n",
              "        [ 45.,  45.,  45.],\n",
              "        ...,\n",
              "        [  2.,   2.,   2.],\n",
              "        [  2.,   2.,   2.],\n",
              "        [  2.,   2.,   2.]],\n",
              "\n",
              "       [[ 45.,  45.,  45.],\n",
              "        [ 45.,  45.,  45.],\n",
              "        [ 45.,  45.,  45.],\n",
              "        ...,\n",
              "        [  2.,   2.,   2.],\n",
              "        [  2.,   2.,   2.],\n",
              "        [  2.,   2.,   2.]],\n",
              "\n",
              "       [[ 46.,  46.,  46.],\n",
              "        [ 47.,  47.,  47.],\n",
              "        [ 47.,  47.,  47.],\n",
              "        ...,\n",
              "        [  2.,   2.,   2.],\n",
              "        [  2.,   2.,   2.],\n",
              "        [  2.,   2.,   2.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[112., 112., 112.],\n",
              "        [113., 113., 113.],\n",
              "        [113., 113., 113.],\n",
              "        ...,\n",
              "        [ 77.,  77.,  77.],\n",
              "        [ 77.,  77.,  77.],\n",
              "        [ 76.,  76.,  76.]],\n",
              "\n",
              "       [[112., 112., 112.],\n",
              "        [112., 112., 112.],\n",
              "        [113., 113., 113.],\n",
              "        ...,\n",
              "        [ 77.,  77.,  77.],\n",
              "        [ 77.,  77.,  77.],\n",
              "        [ 76.,  76.,  76.]],\n",
              "\n",
              "       [[111., 111., 111.],\n",
              "        [111., 111., 111.],\n",
              "        [111., 111., 111.],\n",
              "        ...,\n",
              "        [ 77.,  77.,  77.],\n",
              "        [ 77.,  77.,  77.],\n",
              "        [ 76.,  76.,  76.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[233., 233., 233.],\n",
              "        [224., 224., 224.],\n",
              "        [230., 230., 230.],\n",
              "        ...,\n",
              "        [227., 227., 227.],\n",
              "        [234., 234., 234.],\n",
              "        [225., 225., 225.]],\n",
              "\n",
              "       [[227., 227., 227.],\n",
              "        [229., 229., 229.],\n",
              "        [225., 225., 225.],\n",
              "        ...,\n",
              "        [237., 237., 237.],\n",
              "        [225., 225., 225.],\n",
              "        [232., 232., 232.]],\n",
              "\n",
              "       [[223., 223., 223.],\n",
              "        [239., 239., 239.],\n",
              "        [232., 232., 232.],\n",
              "        ...,\n",
              "        [230., 230., 230.],\n",
              "        [225., 225., 225.],\n",
              "        [228., 228., 228.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[231., 231., 231.],\n",
              "        [223., 223., 223.],\n",
              "        [121., 121., 121.],\n",
              "        ...,\n",
              "        [ 75.,  75.,  75.],\n",
              "        [124., 124., 124.],\n",
              "        [225., 225., 225.]],\n",
              "\n",
              "       [[231., 231., 231.],\n",
              "        [228., 228., 228.],\n",
              "        [224., 224., 224.],\n",
              "        ...,\n",
              "        [120., 120., 120.],\n",
              "        [198., 198., 198.],\n",
              "        [231., 231., 231.]],\n",
              "\n",
              "       [[232., 232., 232.],\n",
              "        [223., 223., 223.],\n",
              "        [232., 232., 232.],\n",
              "        ...,\n",
              "        [195., 195., 195.],\n",
              "        [232., 232., 232.],\n",
              "        [231., 231., 231.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[ 1.,  1.,  1.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        ...,\n",
              "        [ 1.,  1.,  1.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        [35., 35., 35.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        ...,\n",
              "        [ 1.,  1.,  1.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        [34., 34., 34.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        ...,\n",
              "        [ 1.,  1.,  1.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        [33., 33., 33.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        ...,\n",
              "        [30., 30., 30.],\n",
              "        [29., 29., 29.],\n",
              "        [ 1.,  1.,  1.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        ...,\n",
              "        [30., 30., 30.],\n",
              "        [29., 29., 29.],\n",
              "        [ 1.,  1.,  1.]],\n",
              "\n",
              "       [[ 1.,  1.,  1.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        ...,\n",
              "        [30., 30., 30.],\n",
              "        [29., 29., 29.],\n",
              "        [ 1.,  1.,  1.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [ 43.,  43.,  43.],\n",
              "        [239., 239., 239.],\n",
              "        [237., 237., 237.]],\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [  6.,   6.,   6.],\n",
              "        [236., 236., 236.],\n",
              "        [237., 237., 237.]],\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [  0.,   0.,   0.],\n",
              "        [240., 240., 240.],\n",
              "        [237., 237., 237.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [ 41.,  41.,  41.],\n",
              "        [237., 237., 237.],\n",
              "        [237., 237., 237.]],\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [ 40.,  40.,  40.],\n",
              "        [237., 237., 237.],\n",
              "        [237., 237., 237.]],\n",
              "\n",
              "       [[237., 237., 237.],\n",
              "        [237., 237., 237.],\n",
              "        [237., 237., 237.],\n",
              "        ...,\n",
              "        [237., 237., 237.],\n",
              "        [237., 237., 237.],\n",
              "        [237., 237., 237.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [  3.,   3.,   3.],\n",
              "        [  6.,   6.,   6.],\n",
              "        [  7.,   7.,   7.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [  3.,   3.,   3.],\n",
              "        [  5.,   5.,   5.],\n",
              "        [  6.,   6.,   6.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [  2.,   2.,   2.],\n",
              "        [  4.,   4.,   4.],\n",
              "        [  5.,   5.,   5.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[207., 207., 207.],\n",
              "        [116., 116., 116.],\n",
              "        [ 69.,  69.,  69.],\n",
              "        ...,\n",
              "        [131., 131., 131.],\n",
              "        [216., 216., 216.],\n",
              "        [253., 253., 253.]],\n",
              "\n",
              "       [[247., 247., 247.],\n",
              "        [192., 192., 192.],\n",
              "        [111., 111., 111.],\n",
              "        ...,\n",
              "        [199., 199., 199.],\n",
              "        [242., 242., 242.],\n",
              "        [255., 255., 255.]],\n",
              "\n",
              "       [[252., 252., 252.],\n",
              "        [239., 239., 239.],\n",
              "        [183., 183., 183.],\n",
              "        ...,\n",
              "        [238., 238., 238.],\n",
              "        [250., 250., 250.],\n",
              "        [254., 254., 254.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[13., 13., 13.],\n",
              "        [13., 13., 13.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [13., 13., 13.],\n",
              "        [14., 14., 14.],\n",
              "        [15., 15., 15.]],\n",
              "\n",
              "       [[10., 10., 10.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        ...,\n",
              "        [14., 14., 14.],\n",
              "        [13., 13., 13.],\n",
              "        [13., 13., 13.]],\n",
              "\n",
              "       [[15., 15., 15.],\n",
              "        [14., 14., 14.],\n",
              "        [14., 14., 14.],\n",
              "        ...,\n",
              "        [ 9.,  9.,  9.],\n",
              "        [11., 11., 11.],\n",
              "        [11., 11., 11.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[22., 22., 22.],\n",
              "        [23., 23., 23.],\n",
              "        [25., 25., 25.],\n",
              "        ...,\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[27., 27., 27.],\n",
              "        [25., 25., 25.],\n",
              "        [25., 25., 25.],\n",
              "        ...,\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[23., 23., 23.],\n",
              "        [29., 29., 29.],\n",
              "        [28., 28., 28.],\n",
              "        ...,\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 1.,  1.,  1.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[253., 253., 253.],\n",
              "        [255., 255., 255.],\n",
              "        [252., 252., 252.],\n",
              "        ...,\n",
              "        [255., 255., 255.],\n",
              "        [255., 255., 255.],\n",
              "        [255., 255., 255.]],\n",
              "\n",
              "       [[255., 255., 255.],\n",
              "        [251., 251., 251.],\n",
              "        [255., 255., 255.],\n",
              "        ...,\n",
              "        [255., 255., 255.],\n",
              "        [254., 254., 254.],\n",
              "        [253., 253., 253.]],\n",
              "\n",
              "       [[255., 255., 255.],\n",
              "        [248., 248., 248.],\n",
              "        [254., 254., 254.],\n",
              "        ...,\n",
              "        [255., 255., 255.],\n",
              "        [255., 255., 255.],\n",
              "        [254., 254., 254.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[255., 255., 255.],\n",
              "        [255., 255., 255.],\n",
              "        [ 89.,  89.,  91.],\n",
              "        ...,\n",
              "        [ 94.,  95.,  99.],\n",
              "        [ 93.,  94.,  98.],\n",
              "        [ 93.,  92.,  97.]],\n",
              "\n",
              "       [[255., 255., 255.],\n",
              "        [255., 255., 255.],\n",
              "        [ 88.,  88.,  90.],\n",
              "        ...,\n",
              "        [ 93.,  94.,  98.],\n",
              "        [ 91.,  92.,  96.],\n",
              "        [ 92.,  91.,  96.]],\n",
              "\n",
              "       [[255., 255., 255.],\n",
              "        [254., 254., 254.],\n",
              "        [ 88.,  88.,  90.],\n",
              "        ...,\n",
              "        [ 92.,  93.,  97.],\n",
              "        [ 90.,  91.,  95.],\n",
              "        [ 91.,  90.,  95.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        ...,\n",
              "        [58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        [58., 56., 59.]],\n",
              "\n",
              "       [[58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        ...,\n",
              "        [58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        [58., 56., 59.]],\n",
              "\n",
              "       [[58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        ...,\n",
              "        [58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        [58., 56., 59.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        ...,\n",
              "        [58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        [58., 56., 59.]],\n",
              "\n",
              "       [[58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        ...,\n",
              "        [58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        [58., 56., 59.]],\n",
              "\n",
              "       [[58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        ...,\n",
              "        [58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        [58., 56., 59.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[219., 219., 219.],\n",
              "        [100., 100., 100.],\n",
              "        [107., 107., 107.],\n",
              "        ...,\n",
              "        [110., 110., 110.],\n",
              "        [110., 110., 110.],\n",
              "        [110., 110., 110.]],\n",
              "\n",
              "       [[174., 174., 174.],\n",
              "        [  7.,   7.,   7.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [  5.,   5.,   5.],\n",
              "        [  6.,   6.,   6.],\n",
              "        [  6.,   6.,   6.]],\n",
              "\n",
              "       [[180., 180., 180.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [  2.,   2.,   2.],\n",
              "        [  3.,   3.,   3.],\n",
              "        [  3.,   3.,   3.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[209., 209., 209.],\n",
              "        [ 84.,  84.,  84.],\n",
              "        [ 80.,  80.,  80.],\n",
              "        ...,\n",
              "        [ 95.,  95.,  95.],\n",
              "        [ 95.,  95.,  95.],\n",
              "        [ 96.,  96.,  96.]],\n",
              "\n",
              "       [[205., 205., 205.],\n",
              "        [ 85.,  85.,  85.],\n",
              "        [ 83.,  83.,  83.],\n",
              "        ...,\n",
              "        [ 94.,  94.,  94.],\n",
              "        [ 94.,  94.,  94.],\n",
              "        [ 95.,  95.,  95.]],\n",
              "\n",
              "       [[226., 226., 226.],\n",
              "        [118., 118., 118.],\n",
              "        [121., 121., 121.],\n",
              "        ...,\n",
              "        [132., 132., 132.],\n",
              "        [133., 133., 133.],\n",
              "        [134., 134., 134.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[191., 191., 191.],\n",
              "        [191., 191., 191.],\n",
              "        [192., 192., 192.],\n",
              "        ...,\n",
              "        [163., 163., 163.],\n",
              "        [164., 164., 164.],\n",
              "        [164., 164., 164.]],\n",
              "\n",
              "       [[191., 191., 191.],\n",
              "        [191., 191., 191.],\n",
              "        [191., 191., 191.],\n",
              "        ...,\n",
              "        [157., 157., 157.],\n",
              "        [158., 158., 158.],\n",
              "        [159., 159., 159.]],\n",
              "\n",
              "       [[191., 191., 191.],\n",
              "        [191., 191., 191.],\n",
              "        [191., 191., 191.],\n",
              "        ...,\n",
              "        [151., 151., 151.],\n",
              "        [152., 152., 152.],\n",
              "        [153., 153., 153.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 82.,  82.,  82.],\n",
              "        [ 79.,  79.,  79.],\n",
              "        [ 77.,  77.,  77.],\n",
              "        ...,\n",
              "        [ 63.,  63.,  63.],\n",
              "        [ 63.,  63.,  63.],\n",
              "        [ 63.,  63.,  63.]],\n",
              "\n",
              "       [[ 82.,  82.,  82.],\n",
              "        [ 79.,  79.,  79.],\n",
              "        [ 77.,  77.,  77.],\n",
              "        ...,\n",
              "        [ 63.,  63.,  63.],\n",
              "        [ 63.,  63.,  63.],\n",
              "        [ 63.,  63.,  63.]],\n",
              "\n",
              "       [[ 82.,  82.,  82.],\n",
              "        [ 79.,  79.,  79.],\n",
              "        [ 78.,  78.,  78.],\n",
              "        ...,\n",
              "        [ 63.,  63.,  63.],\n",
              "        [ 63.,  63.,  63.],\n",
              "        [ 63.,  63.,  63.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[151., 151., 151.],\n",
              "        [ 37.,  37.,  37.],\n",
              "        [ 71.,  71.,  71.],\n",
              "        ...,\n",
              "        [ 87.,  87.,  87.],\n",
              "        [ 80.,  80.,  80.],\n",
              "        [ 64.,  64.,  64.]],\n",
              "\n",
              "       [[105., 105., 105.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  1.,   1.,   1.]],\n",
              "\n",
              "       [[110., 110., 110.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  5.,   5.,   7.],\n",
              "        ...,\n",
              "        [ 38.,  38.,  38.],\n",
              "        [ 22.,  22.,  22.],\n",
              "        [  1.,   1.,   1.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[188., 188., 188.],\n",
              "        [120., 120., 120.],\n",
              "        [140., 140., 140.],\n",
              "        ...,\n",
              "        [134., 134., 134.],\n",
              "        [132., 132., 132.],\n",
              "        [118., 118., 118.]],\n",
              "\n",
              "       [[190., 190., 190.],\n",
              "        [119., 119., 119.],\n",
              "        [143., 143., 143.],\n",
              "        ...,\n",
              "        [135., 135., 135.],\n",
              "        [130., 130., 130.],\n",
              "        [117., 117., 117.]],\n",
              "\n",
              "       [[179., 179., 179.],\n",
              "        [100., 100., 100.],\n",
              "        [129., 129., 129.],\n",
              "        ...,\n",
              "        [118., 118., 118.],\n",
              "        [114., 114., 114.],\n",
              "        [100., 100., 100.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[13., 13., 13.],\n",
              "        [15., 15., 15.],\n",
              "        [15., 15., 15.],\n",
              "        ...,\n",
              "        [18., 18., 18.],\n",
              "        [13., 13., 13.],\n",
              "        [14., 14., 14.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        ...,\n",
              "        [ 1.,  1.,  1.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 3.,  3.,  3.],\n",
              "        [ 2.,  2.,  2.],\n",
              "        ...,\n",
              "        [ 5.,  5.,  5.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 1.,  1.,  1.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 5.,  5.,  5.],\n",
              "        [ 4.,  4.,  4.],\n",
              "        ...,\n",
              "        [30., 30., 30.],\n",
              "        [22., 22., 22.],\n",
              "        [ 2.,  2.,  2.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 2.,  2.,  2.],\n",
              "        [ 4.,  4.,  4.],\n",
              "        ...,\n",
              "        [28., 28., 28.],\n",
              "        [18., 18., 18.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 1.,  1.,  1.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 1.,  1.,  1.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[ 26.,  26.,  26.],\n",
              "        [ 14.,  14.,  14.],\n",
              "        [ 14.,  14.,  14.],\n",
              "        ...,\n",
              "        [ 13.,  13.,  13.],\n",
              "        [ 12.,  12.,  12.],\n",
              "        [115., 115., 115.]],\n",
              "\n",
              "       [[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [ 93.,  93.,  93.]],\n",
              "\n",
              "       [[ 13.,  13.,  13.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [107., 107., 107.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[208., 208., 208.],\n",
              "        [215., 215., 215.],\n",
              "        [202., 202., 202.],\n",
              "        ...,\n",
              "        [179., 179., 179.],\n",
              "        [144., 144., 144.],\n",
              "        [185., 185., 185.]],\n",
              "\n",
              "       [[202., 202., 202.],\n",
              "        [206., 206., 206.],\n",
              "        [193., 193., 193.],\n",
              "        ...,\n",
              "        [165., 165., 165.],\n",
              "        [128., 128., 128.],\n",
              "        [176., 176., 176.]],\n",
              "\n",
              "       [[227., 227., 227.],\n",
              "        [226., 226., 226.],\n",
              "        [222., 222., 222.],\n",
              "        ...,\n",
              "        [206., 206., 206.],\n",
              "        [188., 188., 188.],\n",
              "        [212., 212., 212.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[253., 253., 253.],\n",
              "        [251., 251., 251.],\n",
              "        [250., 250., 250.],\n",
              "        ...,\n",
              "        [250., 250., 250.],\n",
              "        [246., 246., 246.],\n",
              "        [255., 255., 255.]],\n",
              "\n",
              "       [[254., 254., 254.],\n",
              "        [252., 252., 252.],\n",
              "        [252., 252., 252.],\n",
              "        ...,\n",
              "        [255., 255., 255.],\n",
              "        [255., 255., 255.],\n",
              "        [252., 252., 252.]],\n",
              "\n",
              "       [[171., 171., 169.],\n",
              "        [170., 170., 168.],\n",
              "        [169., 169., 167.],\n",
              "        ...,\n",
              "        [164., 164., 164.],\n",
              "        [166., 166., 166.],\n",
              "        [214., 214., 214.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 89.,  89.,  91.],\n",
              "        [ 78.,  78.,  80.],\n",
              "        [ 92.,  91.,  96.],\n",
              "        ...,\n",
              "        [ 76.,  77.,  81.],\n",
              "        [ 61.,  62.,  64.],\n",
              "        [172., 173., 175.]],\n",
              "\n",
              "       [[ 92.,  92.,  94.],\n",
              "        [ 78.,  78.,  80.],\n",
              "        [ 89.,  88.,  93.],\n",
              "        ...,\n",
              "        [ 76.,  77.,  81.],\n",
              "        [ 61.,  62.,  64.],\n",
              "        [172., 173., 175.]],\n",
              "\n",
              "       [[ 96.,  96.,  98.],\n",
              "        [ 79.,  79.,  81.],\n",
              "        [ 87.,  86.,  91.],\n",
              "        ...,\n",
              "        [ 76.,  77.,  81.],\n",
              "        [ 61.,  62.,  64.],\n",
              "        [172., 173., 175.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[6., 6., 6.],\n",
              "        [6., 6., 6.],\n",
              "        [6., 6., 6.],\n",
              "        ...,\n",
              "        [6., 6., 6.],\n",
              "        [6., 6., 6.],\n",
              "        [6., 6., 6.]],\n",
              "\n",
              "       [[6., 6., 6.],\n",
              "        [6., 6., 6.],\n",
              "        [6., 6., 6.],\n",
              "        ...,\n",
              "        [6., 6., 6.],\n",
              "        [6., 6., 6.],\n",
              "        [6., 6., 6.]],\n",
              "\n",
              "       [[6., 6., 6.],\n",
              "        [6., 6., 6.],\n",
              "        [6., 6., 6.],\n",
              "        ...,\n",
              "        [6., 6., 6.],\n",
              "        [6., 6., 6.],\n",
              "        [6., 6., 6.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[6., 6., 6.],\n",
              "        [6., 6., 6.],\n",
              "        [6., 6., 6.],\n",
              "        ...,\n",
              "        [6., 6., 6.],\n",
              "        [6., 6., 6.],\n",
              "        [6., 6., 6.]],\n",
              "\n",
              "       [[6., 6., 6.],\n",
              "        [6., 6., 6.],\n",
              "        [6., 6., 6.],\n",
              "        ...,\n",
              "        [6., 6., 6.],\n",
              "        [6., 6., 6.],\n",
              "        [6., 6., 6.]],\n",
              "\n",
              "       [[6., 6., 6.],\n",
              "        [6., 6., 6.],\n",
              "        [6., 6., 6.],\n",
              "        ...,\n",
              "        [6., 6., 6.],\n",
              "        [6., 6., 6.],\n",
              "        [6., 6., 6.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [ 30.,  30.,  30.],\n",
              "        [ 30.,  30.,  30.],\n",
              "        [ 32.,  32.,  32.]],\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [ 21.,  21.,  21.],\n",
              "        [ 20.,  20.,  20.],\n",
              "        [ 20.,  20.,  20.]],\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [ 21.,  21.,  21.],\n",
              "        [ 19.,  19.,  19.],\n",
              "        [ 12.,  12.,  12.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[122., 122., 122.],\n",
              "        [112., 112., 112.],\n",
              "        [111., 111., 111.],\n",
              "        ...,\n",
              "        [193., 193., 193.],\n",
              "        [183., 183., 183.],\n",
              "        [183., 183., 183.]],\n",
              "\n",
              "       [[119., 119., 119.],\n",
              "        [111., 111., 111.],\n",
              "        [115., 115., 115.],\n",
              "        ...,\n",
              "        [190., 190., 190.],\n",
              "        [192., 192., 192.],\n",
              "        [185., 185., 185.]],\n",
              "\n",
              "       [[113., 113., 113.],\n",
              "        [113., 113., 113.],\n",
              "        [116., 116., 116.],\n",
              "        ...,\n",
              "        [192., 192., 192.],\n",
              "        [191., 191., 191.],\n",
              "        [188., 188., 188.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.]],\n",
              "\n",
              "       [[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.]],\n",
              "\n",
              "       [[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.]],\n",
              "\n",
              "       [[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.]],\n",
              "\n",
              "       [[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[ 33.,  33.,  33.],\n",
              "        [ 18.,  18.,  18.],\n",
              "        [ 16.,  16.,  16.],\n",
              "        ...,\n",
              "        [ 15.,  15.,  15.],\n",
              "        [ 16.,  16.,  16.],\n",
              "        [ 96.,  96.,  96.]],\n",
              "\n",
              "       [[ 17.,  17.,  17.],\n",
              "        [  2.,   2.,   2.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [  0.,   0.,   0.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [ 81.,  81.,  81.]],\n",
              "\n",
              "       [[ 16.,  16.,  16.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [ 80.,  80.,  80.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 17.,  17.,  17.],\n",
              "        [  4.,   4.,   4.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [ 83.,  83.,  83.]],\n",
              "\n",
              "       [[ 16.,  16.,  16.],\n",
              "        [  3.,   3.,   3.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [ 79.,  79.,  79.]],\n",
              "\n",
              "       [[ 48.,  48.,  48.],\n",
              "        [ 35.,  35.,  35.],\n",
              "        [ 33.,  33.,  33.],\n",
              "        ...,\n",
              "        [ 33.,  33.,  33.],\n",
              "        [ 33.,  33.,  33.],\n",
              "        [105., 105., 105.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.]],\n",
              "\n",
              "       [[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.]],\n",
              "\n",
              "       [[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.]],\n",
              "\n",
              "       [[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.]],\n",
              "\n",
              "       [[1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        ...,\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.],\n",
              "        [1., 1., 1.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[ 86.,  86.,  86.],\n",
              "        [ 90.,  90.,  90.],\n",
              "        [ 89.,  89.,  89.],\n",
              "        ...,\n",
              "        [247., 247., 247.],\n",
              "        [247., 247., 247.],\n",
              "        [246., 246., 246.]],\n",
              "\n",
              "       [[ 90.,  90.,  90.],\n",
              "        [ 96.,  96.,  96.],\n",
              "        [ 96.,  96.,  96.],\n",
              "        ...,\n",
              "        [247., 247., 247.],\n",
              "        [247., 247., 247.],\n",
              "        [246., 246., 246.]],\n",
              "\n",
              "       [[ 89.,  89.,  89.],\n",
              "        [ 97.,  97.,  97.],\n",
              "        [ 98.,  98.,  98.],\n",
              "        ...,\n",
              "        [247., 247., 247.],\n",
              "        [247., 247., 247.],\n",
              "        [246., 246., 246.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[194., 194., 194.],\n",
              "        [194., 194., 194.],\n",
              "        [194., 194., 194.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.]],\n",
              "\n",
              "       [[198., 198., 198.],\n",
              "        [198., 198., 198.],\n",
              "        [196., 196., 196.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.]],\n",
              "\n",
              "       [[194., 194., 194.],\n",
              "        [194., 194., 194.],\n",
              "        [194., 194., 194.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[54., 52., 55.],\n",
              "        [54., 52., 55.],\n",
              "        [54., 52., 55.],\n",
              "        ...,\n",
              "        [54., 52., 55.],\n",
              "        [54., 52., 55.],\n",
              "        [54., 52., 55.]],\n",
              "\n",
              "       [[54., 52., 55.],\n",
              "        [54., 52., 55.],\n",
              "        [54., 52., 55.],\n",
              "        ...,\n",
              "        [54., 52., 55.],\n",
              "        [54., 52., 55.],\n",
              "        [54., 52., 55.]],\n",
              "\n",
              "       [[54., 52., 55.],\n",
              "        [54., 52., 55.],\n",
              "        [54., 52., 55.],\n",
              "        ...,\n",
              "        [54., 52., 55.],\n",
              "        [54., 52., 55.],\n",
              "        [54., 52., 55.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[54., 52., 55.],\n",
              "        [54., 52., 55.],\n",
              "        [54., 52., 55.],\n",
              "        ...,\n",
              "        [54., 52., 55.],\n",
              "        [54., 52., 55.],\n",
              "        [54., 52., 55.]],\n",
              "\n",
              "       [[54., 52., 55.],\n",
              "        [54., 52., 55.],\n",
              "        [54., 52., 55.],\n",
              "        ...,\n",
              "        [54., 52., 55.],\n",
              "        [54., 52., 55.],\n",
              "        [54., 52., 55.]],\n",
              "\n",
              "       [[54., 52., 55.],\n",
              "        [54., 52., 55.],\n",
              "        [54., 52., 55.],\n",
              "        ...,\n",
              "        [54., 52., 55.],\n",
              "        [54., 52., 55.],\n",
              "        [54., 52., 55.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[ 88.,  88.,  88.],\n",
              "        [ 85.,  85.,  85.],\n",
              "        [ 88.,  88.,  88.],\n",
              "        ...,\n",
              "        [107., 107., 107.],\n",
              "        [105., 105., 105.],\n",
              "        [106., 106., 106.]],\n",
              "\n",
              "       [[ 88.,  88.,  88.],\n",
              "        [ 88.,  88.,  88.],\n",
              "        [ 88.,  88.,  88.],\n",
              "        ...,\n",
              "        [110., 110., 110.],\n",
              "        [108., 108., 108.],\n",
              "        [109., 109., 109.]],\n",
              "\n",
              "       [[ 89.,  89.,  89.],\n",
              "        [ 90.,  90.,  90.],\n",
              "        [ 93.,  93.,  93.],\n",
              "        ...,\n",
              "        [113., 113., 113.],\n",
              "        [111., 111., 111.],\n",
              "        [114., 114., 114.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[  5.,   5.,   5.],\n",
              "        [  5.,   5.,   5.],\n",
              "        [  5.,   5.,   5.],\n",
              "        ...,\n",
              "        [  5.,   5.,   5.],\n",
              "        [  5.,   5.,   5.],\n",
              "        [  5.,   5.,   5.]],\n",
              "\n",
              "       [[  5.,   5.,   5.],\n",
              "        [  5.,   5.,   5.],\n",
              "        [  5.,   5.,   5.],\n",
              "        ...,\n",
              "        [  5.,   5.,   5.],\n",
              "        [  5.,   5.,   5.],\n",
              "        [  5.,   5.,   5.]],\n",
              "\n",
              "       [[  5.,   5.,   5.],\n",
              "        [  5.,   5.,   5.],\n",
              "        [  5.,   5.,   5.],\n",
              "        ...,\n",
              "        [  5.,   5.,   5.],\n",
              "        [  5.,   5.,   5.],\n",
              "        [  5.,   5.,   5.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[  2.,   2.,   2.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [ 56.,  56.,  56.]],\n",
              "\n",
              "       [[  8.,   8.,   8.],\n",
              "        [  5.,   5.,   5.],\n",
              "        [  6.,   6.,   6.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [ 58.,  58.,  58.]],\n",
              "\n",
              "       [[ 30.,  30.,  30.],\n",
              "        [ 26.,  26.,  26.],\n",
              "        [ 25.,  25.,  25.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [ 59.,  59.,  59.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[238., 238., 238.],\n",
              "        [235., 235., 235.],\n",
              "        [239., 239., 239.],\n",
              "        ...,\n",
              "        [ 66.,  66.,  66.],\n",
              "        [ 61.,  61.,  61.],\n",
              "        [117., 117., 117.]],\n",
              "\n",
              "       [[179., 179., 179.],\n",
              "        [176., 176., 176.],\n",
              "        [181., 181., 181.],\n",
              "        ...,\n",
              "        [ 85.,  85.,  85.],\n",
              "        [ 84.,  84.,  84.],\n",
              "        [142., 142., 142.]],\n",
              "\n",
              "       [[150., 150., 150.],\n",
              "        [148., 148., 148.],\n",
              "        [154., 154., 154.],\n",
              "        ...,\n",
              "        [113., 113., 113.],\n",
              "        [113., 113., 113.],\n",
              "        [172., 172., 172.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[253., 253., 253.],\n",
              "        [254., 254., 254.],\n",
              "        [252., 252., 252.],\n",
              "        ...,\n",
              "        [249., 249., 249.],\n",
              "        [255., 255., 255.],\n",
              "        [255., 255., 255.]],\n",
              "\n",
              "       [[238., 238., 236.],\n",
              "        [239., 239., 237.],\n",
              "        [238., 238., 236.],\n",
              "        ...,\n",
              "        [242., 242., 242.],\n",
              "        [229., 229., 229.],\n",
              "        [245., 245., 245.]],\n",
              "\n",
              "       [[179., 179., 177.],\n",
              "        [181., 181., 179.],\n",
              "        [180., 180., 178.],\n",
              "        ...,\n",
              "        [ 81.,  81.,  81.],\n",
              "        [ 75.,  75.,  75.],\n",
              "        [171., 171., 171.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[119., 120., 124.],\n",
              "        [ 97.,  98., 102.],\n",
              "        [ 98.,  99., 103.],\n",
              "        ...,\n",
              "        [ 69.,  69.,  71.],\n",
              "        [ 49.,  49.,  51.],\n",
              "        [168., 168., 170.]],\n",
              "\n",
              "       [[124., 123., 128.],\n",
              "        [ 95.,  94.,  99.],\n",
              "        [102., 101., 106.],\n",
              "        ...,\n",
              "        [ 66.,  66.,  68.],\n",
              "        [ 50.,  50.,  52.],\n",
              "        [169., 169., 171.]],\n",
              "\n",
              "       [[126., 125., 130.],\n",
              "        [ 96.,  95., 100.],\n",
              "        [103., 102., 107.],\n",
              "        ...,\n",
              "        [ 66.,  66.,  68.],\n",
              "        [ 50.,  50.,  52.],\n",
              "        [170., 170., 172.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[68., 69., 71.],\n",
              "        [67., 68., 70.],\n",
              "        [67., 68., 70.],\n",
              "        ...,\n",
              "        [65., 65., 67.],\n",
              "        [65., 65., 67.],\n",
              "        [65., 65., 67.]],\n",
              "\n",
              "       [[67., 68., 70.],\n",
              "        [67., 68., 70.],\n",
              "        [67., 68., 70.],\n",
              "        ...,\n",
              "        [65., 65., 67.],\n",
              "        [65., 65., 67.],\n",
              "        [65., 65., 67.]],\n",
              "\n",
              "       [[68., 69., 71.],\n",
              "        [68., 69., 71.],\n",
              "        [68., 69., 71.],\n",
              "        ...,\n",
              "        [65., 65., 67.],\n",
              "        [65., 65., 67.],\n",
              "        [65., 65., 67.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[69., 70., 72.],\n",
              "        [70., 71., 73.],\n",
              "        [70., 71., 73.],\n",
              "        ...,\n",
              "        [65., 65., 67.],\n",
              "        [65., 65., 67.],\n",
              "        [65., 65., 67.]],\n",
              "\n",
              "       [[69., 70., 72.],\n",
              "        [70., 71., 73.],\n",
              "        [70., 71., 73.],\n",
              "        ...,\n",
              "        [65., 65., 67.],\n",
              "        [65., 65., 67.],\n",
              "        [65., 65., 67.]],\n",
              "\n",
              "       [[69., 70., 72.],\n",
              "        [70., 71., 73.],\n",
              "        [70., 71., 73.],\n",
              "        ...,\n",
              "        [65., 65., 67.],\n",
              "        [65., 65., 67.],\n",
              "        [65., 65., 67.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [3., 3., 3.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  2.,   2.,   2.],\n",
              "        [  4.,   4.,   4.]],\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  2.,   2.,   2.],\n",
              "        [  3.,   3.,   3.]],\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  2.,   2.,   2.],\n",
              "        [  3.,   3.,   3.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [ 92.,  92.,  92.],\n",
              "        [102., 102., 102.],\n",
              "        [104., 104., 104.]],\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [ 89.,  89.,  89.],\n",
              "        [100., 100., 100.],\n",
              "        [102., 102., 102.]],\n",
              "\n",
              "       [[  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [ 83.,  83.,  83.],\n",
              "        [ 94.,  94.,  94.],\n",
              "        [ 97.,  97.,  97.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[193., 193., 193.],\n",
              "        [193., 193., 193.],\n",
              "        [194., 194., 194.],\n",
              "        ...,\n",
              "        [178., 178., 178.],\n",
              "        [135., 135., 135.],\n",
              "        [137., 137., 137.]],\n",
              "\n",
              "       [[193., 193., 193.],\n",
              "        [193., 193., 193.],\n",
              "        [194., 194., 194.],\n",
              "        ...,\n",
              "        [176., 176., 176.],\n",
              "        [134., 134., 134.],\n",
              "        [135., 135., 135.]],\n",
              "\n",
              "       [[193., 193., 193.],\n",
              "        [193., 193., 193.],\n",
              "        [193., 193., 193.],\n",
              "        ...,\n",
              "        [176., 176., 176.],\n",
              "        [132., 132., 132.],\n",
              "        [133., 133., 133.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 83.,  83.,  83.],\n",
              "        [ 81.,  81.,  81.],\n",
              "        [ 79.,  79.,  79.],\n",
              "        ...,\n",
              "        [ 57.,  57.,  57.],\n",
              "        [ 66.,  66.,  66.],\n",
              "        [ 66.,  66.,  66.]],\n",
              "\n",
              "       [[ 83.,  83.,  83.],\n",
              "        [ 81.,  81.,  81.],\n",
              "        [ 79.,  79.,  79.],\n",
              "        ...,\n",
              "        [ 57.,  57.,  57.],\n",
              "        [ 66.,  66.,  66.],\n",
              "        [ 66.,  66.,  66.]],\n",
              "\n",
              "       [[ 83.,  83.,  83.],\n",
              "        [ 81.,  81.,  81.],\n",
              "        [ 79.,  79.,  79.],\n",
              "        ...,\n",
              "        [ 57.,  57.,  57.],\n",
              "        [ 66.,  66.,  66.],\n",
              "        [ 66.,  66.,  66.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[ 58.,  56.,  59.],\n",
              "        [ 58.,  56.,  59.],\n",
              "        [ 58.,  56.,  59.],\n",
              "        ...,\n",
              "        [ 60.,  58.,  61.],\n",
              "        [ 47.,  45.,  48.],\n",
              "        [120., 118., 121.]],\n",
              "\n",
              "       [[ 58.,  56.,  59.],\n",
              "        [ 58.,  56.,  59.],\n",
              "        [ 58.,  56.,  59.],\n",
              "        ...,\n",
              "        [ 60.,  58.,  61.],\n",
              "        [ 47.,  45.,  48.],\n",
              "        [120., 118., 121.]],\n",
              "\n",
              "       [[ 58.,  56.,  59.],\n",
              "        [ 58.,  56.,  59.],\n",
              "        [ 58.,  56.,  59.],\n",
              "        ...,\n",
              "        [ 60.,  58.,  61.],\n",
              "        [ 47.,  45.,  48.],\n",
              "        [120., 118., 121.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 58.,  56.,  59.],\n",
              "        [ 58.,  56.,  59.],\n",
              "        [ 58.,  56.,  59.],\n",
              "        ...,\n",
              "        [ 60.,  58.,  61.],\n",
              "        [ 47.,  45.,  48.],\n",
              "        [120., 118., 121.]],\n",
              "\n",
              "       [[ 58.,  56.,  59.],\n",
              "        [ 58.,  56.,  59.],\n",
              "        [ 58.,  56.,  59.],\n",
              "        ...,\n",
              "        [ 60.,  58.,  61.],\n",
              "        [ 47.,  45.,  48.],\n",
              "        [120., 118., 121.]],\n",
              "\n",
              "       [[ 58.,  56.,  59.],\n",
              "        [ 58.,  56.,  59.],\n",
              "        [ 58.,  56.,  59.],\n",
              "        ...,\n",
              "        [ 60.,  58.,  61.],\n",
              "        [ 47.,  45.,  48.],\n",
              "        [120., 118., 121.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[ 16.,  16.,  16.],\n",
              "        [ 46.,  46.,  46.],\n",
              "        [ 36.,  36.,  36.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.]],\n",
              "\n",
              "       [[ 94.,  94.,  94.],\n",
              "        [162., 162., 162.],\n",
              "        [169., 169., 169.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.]],\n",
              "\n",
              "       [[ 87.,  87.,  87.],\n",
              "        [180., 180., 180.],\n",
              "        [188., 188., 188.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 15.,  15.,  15.],\n",
              "        [ 30.,  30.,  30.],\n",
              "        [ 32.,  32.,  32.],\n",
              "        ...,\n",
              "        [ 49.,  49.,  49.],\n",
              "        [ 50.,  50.,  50.],\n",
              "        [ 51.,  51.,  51.]],\n",
              "\n",
              "       [[ 16.,  16.,  16.],\n",
              "        [ 30.,  30.,  30.],\n",
              "        [ 32.,  32.,  32.],\n",
              "        ...,\n",
              "        [ 51.,  51.,  51.],\n",
              "        [ 51.,  51.,  51.],\n",
              "        [ 52.,  52.,  52.]],\n",
              "\n",
              "       [[ 17.,  17.,  17.],\n",
              "        [ 31.,  31.,  31.],\n",
              "        [ 31.,  31.,  31.],\n",
              "        ...,\n",
              "        [ 53.,  53.,  53.],\n",
              "        [ 53.,  53.,  53.],\n",
              "        [ 55.,  55.,  55.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [1., 1., 1.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [1., 1., 1.],\n",
              "        [3., 3., 3.],\n",
              "        ...,\n",
              "        [2., 2., 4.],\n",
              "        [3., 3., 3.],\n",
              "        [1., 1., 1.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [3., 3., 5.],\n",
              "        ...,\n",
              "        [3., 3., 5.],\n",
              "        [2., 2., 4.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [4., 4., 4.],\n",
              "        ...,\n",
              "        [3., 3., 5.],\n",
              "        [2., 2., 2.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 2.],\n",
              "        [0., 0., 2.],\n",
              "        [2., 2., 4.],\n",
              "        ...,\n",
              "        [3., 3., 5.],\n",
              "        [3., 3., 5.],\n",
              "        [1., 1., 3.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [2., 2., 2.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[  0.,   0.,   0.],\n",
              "        [  0.,   0.,   2.],\n",
              "        [  0.,   0.,   2.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [ 52.,  52.,  52.]],\n",
              "\n",
              "       [[  6.,   6.,   6.],\n",
              "        [  2.,   2.,   2.],\n",
              "        [  2.,   2.,   4.],\n",
              "        ...,\n",
              "        [  2.,   2.,   2.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [ 57.,  57.,  57.]],\n",
              "\n",
              "       [[  7.,   7.,   7.],\n",
              "        [  0.,   0.,   2.],\n",
              "        [  5.,   5.,   5.],\n",
              "        ...,\n",
              "        [  4.,   4.,   6.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [ 56.,  56.,  56.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[172., 172., 172.],\n",
              "        [163., 163., 163.],\n",
              "        [171., 171., 171.],\n",
              "        ...,\n",
              "        [175., 175., 175.],\n",
              "        [162., 162., 162.],\n",
              "        [190., 190., 190.]],\n",
              "\n",
              "       [[170., 170., 170.],\n",
              "        [165., 165., 165.],\n",
              "        [170., 170., 170.],\n",
              "        ...,\n",
              "        [178., 178., 178.],\n",
              "        [164., 164., 164.],\n",
              "        [191., 191., 191.]],\n",
              "\n",
              "       [[155., 155., 155.],\n",
              "        [151., 151., 151.],\n",
              "        [164., 164., 164.],\n",
              "        ...,\n",
              "        [166., 166., 166.],\n",
              "        [154., 154., 154.],\n",
              "        [184., 184., 184.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[171., 171., 171.],\n",
              "        [154., 154., 154.],\n",
              "        [165., 165., 165.],\n",
              "        ...,\n",
              "        [ 14.,  14.,  14.],\n",
              "        [ 13.,  13.,  13.],\n",
              "        [ 13.,  13.,  13.]],\n",
              "\n",
              "       [[147., 147., 147.],\n",
              "        [110., 110., 110.],\n",
              "        [103., 103., 103.],\n",
              "        ...,\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  1.,   1.,   1.]],\n",
              "\n",
              "       [[127., 127., 127.],\n",
              "        [108., 108., 108.],\n",
              "        [110., 110., 110.],\n",
              "        ...,\n",
              "        [  1.,   1.,   1.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[146., 146., 146.],\n",
              "        [137., 137., 137.],\n",
              "        [154., 154., 154.],\n",
              "        ...,\n",
              "        [154., 154., 154.],\n",
              "        [152., 152., 152.],\n",
              "        [149., 149., 149.]],\n",
              "\n",
              "       [[150., 150., 150.],\n",
              "        [141., 141., 141.],\n",
              "        [152., 152., 152.],\n",
              "        ...,\n",
              "        [156., 156., 156.],\n",
              "        [152., 152., 152.],\n",
              "        [152., 152., 152.]],\n",
              "\n",
              "       [[151., 151., 151.],\n",
              "        [144., 144., 144.],\n",
              "        [149., 149., 149.],\n",
              "        ...,\n",
              "        [159., 159., 159.],\n",
              "        [154., 154., 154.],\n",
              "        [147., 147., 147.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[255., 255., 255.],\n",
              "        [250., 250., 250.],\n",
              "        [225., 225., 225.],\n",
              "        ...,\n",
              "        [ 83.,  83.,  85.],\n",
              "        [ 79.,  79.,  79.],\n",
              "        [ 96.,  96.,  96.]],\n",
              "\n",
              "       [[253., 253., 253.],\n",
              "        [252., 252., 252.],\n",
              "        [225., 225., 225.],\n",
              "        ...,\n",
              "        [ 62.,  62.,  64.],\n",
              "        [ 58.,  58.,  58.],\n",
              "        [ 73.,  73.,  73.]],\n",
              "\n",
              "       [[252., 252., 252.],\n",
              "        [255., 255., 255.],\n",
              "        [227., 227., 227.],\n",
              "        ...,\n",
              "        [ 69.,  69.,  71.],\n",
              "        [ 64.,  64.,  64.],\n",
              "        [ 79.,  79.,  79.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[250., 250., 250.],\n",
              "        [253., 253., 253.],\n",
              "        [201., 201., 203.],\n",
              "        ...,\n",
              "        [123., 124., 128.],\n",
              "        [120., 119., 124.],\n",
              "        [125., 124., 129.]],\n",
              "\n",
              "       [[255., 255., 255.],\n",
              "        [250., 250., 250.],\n",
              "        [193., 193., 193.],\n",
              "        ...,\n",
              "        [109., 110., 114.],\n",
              "        [112., 112., 114.],\n",
              "        [117., 117., 119.]],\n",
              "\n",
              "       [[251., 251., 251.],\n",
              "        [255., 255., 255.],\n",
              "        [228., 228., 228.],\n",
              "        ...,\n",
              "        [189., 190., 194.],\n",
              "        [194., 194., 196.],\n",
              "        [199., 199., 201.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[ 0.,  0.,  0.],\n",
              "        [21., 21., 21.],\n",
              "        [18., 18., 18.],\n",
              "        ...,\n",
              "        [18., 18., 18.],\n",
              "        [18., 18., 18.],\n",
              "        [ 0.,  0.,  0.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [13., 13., 13.],\n",
              "        [13., 13., 13.],\n",
              "        ...,\n",
              "        [13., 13., 13.],\n",
              "        [13., 13., 13.],\n",
              "        [13., 13., 13.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [13., 13., 13.],\n",
              "        [13., 13., 13.],\n",
              "        ...,\n",
              "        [13., 13., 13.],\n",
              "        [13., 13., 13.],\n",
              "        [13., 13., 13.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [13., 13., 13.],\n",
              "        [13., 13., 13.],\n",
              "        ...,\n",
              "        [13., 13., 13.],\n",
              "        [13., 13., 13.],\n",
              "        [13., 13., 13.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [13., 13., 13.],\n",
              "        [13., 13., 13.],\n",
              "        ...,\n",
              "        [13., 13., 13.],\n",
              "        [13., 13., 13.],\n",
              "        [13., 13., 13.]],\n",
              "\n",
              "       [[ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 0.,  0.,  0.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[ 15.,  15.,  15.],\n",
              "        [ 24.,  24.,  24.],\n",
              "        [ 27.,  27.,  27.],\n",
              "        ...,\n",
              "        [ 23.,  23.,  23.],\n",
              "        [ 21.,  21.,  21.],\n",
              "        [ 19.,  19.,  19.]],\n",
              "\n",
              "       [[  5.,   5.,   5.],\n",
              "        [ 10.,  10.,  10.],\n",
              "        [ 12.,  12.,  12.],\n",
              "        ...,\n",
              "        [  7.,   7.,   7.],\n",
              "        [  5.,   5.,   5.],\n",
              "        [  3.,   3.,   3.]],\n",
              "\n",
              "       [[  8.,   8.,   8.],\n",
              "        [ 10.,  10.,  10.],\n",
              "        [ 10.,  10.,  10.],\n",
              "        ...,\n",
              "        [  4.,   4.,   4.],\n",
              "        [  3.,   3.,   3.],\n",
              "        [  1.,   1.,   1.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[ 17.,  17.,  17.],\n",
              "        [ 30.,  30.,  30.],\n",
              "        [ 45.,  45.,  45.],\n",
              "        ...,\n",
              "        [100., 100., 100.],\n",
              "        [102., 102., 102.],\n",
              "        [105., 105., 105.]],\n",
              "\n",
              "       [[ 14.,  14.,  14.],\n",
              "        [ 25.,  25.,  25.],\n",
              "        [ 39.,  39.,  39.],\n",
              "        ...,\n",
              "        [101., 101., 101.],\n",
              "        [103., 103., 103.],\n",
              "        [107., 107., 107.]],\n",
              "\n",
              "       [[ 13.,  13.,  13.],\n",
              "        [ 22.,  22.,  22.],\n",
              "        [ 35.,  35.,  35.],\n",
              "        ...,\n",
              "        [105., 105., 105.],\n",
              "        [106., 106., 106.],\n",
              "        [109., 109., 109.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        ...,\n",
              "        [58., 56., 59.],\n",
              "        [60., 58., 61.],\n",
              "        [48., 46., 49.]],\n",
              "\n",
              "       [[58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        ...,\n",
              "        [58., 56., 59.],\n",
              "        [60., 58., 61.],\n",
              "        [48., 46., 49.]],\n",
              "\n",
              "       [[58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        [58., 56., 59.],\n",
              "        ...,\n",
              "        [58., 56., 59.],\n",
              "        [60., 58., 61.],\n",
              "        [48., 46., 49.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[63., 63., 65.],\n",
              "        [63., 63., 65.],\n",
              "        [62., 62., 64.],\n",
              "        ...,\n",
              "        [58., 56., 59.],\n",
              "        [60., 58., 61.],\n",
              "        [48., 46., 49.]],\n",
              "\n",
              "       [[64., 64., 66.],\n",
              "        [62., 62., 64.],\n",
              "        [60., 60., 62.],\n",
              "        ...,\n",
              "        [58., 56., 59.],\n",
              "        [60., 58., 61.],\n",
              "        [48., 46., 49.]],\n",
              "\n",
              "       [[64., 64., 66.],\n",
              "        [62., 62., 64.],\n",
              "        [60., 60., 62.],\n",
              "        ...,\n",
              "        [58., 56., 59.],\n",
              "        [60., 58., 61.],\n",
              "        [48., 46., 49.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[ 62.,  62.,  62.],\n",
              "        [ 58.,  58.,  58.],\n",
              "        [ 61.,  61.,  61.],\n",
              "        ...,\n",
              "        [ 32.,  32.,  32.],\n",
              "        [ 33.,  33.,  33.],\n",
              "        [ 30.,  30.,  30.]],\n",
              "\n",
              "       [[ 18.,  18.,  18.],\n",
              "        [ 15.,  15.,  15.],\n",
              "        [ 19.,  19.,  19.],\n",
              "        ...,\n",
              "        [  0.,   0.,   0.],\n",
              "        [  1.,   1.,   1.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       [[  9.,   9.,   9.],\n",
              "        [  6.,   6.,   6.],\n",
              "        [ 10.,  10.,  10.],\n",
              "        ...,\n",
              "        [  2.,   2.,   2.],\n",
              "        [  2.,   2.,   2.],\n",
              "        [  2.,   2.,   2.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[253., 253., 253.],\n",
              "        [253., 253., 253.],\n",
              "        [253., 253., 253.],\n",
              "        ...,\n",
              "        [ 58.,  58.,  58.],\n",
              "        [ 55.,  55.,  55.],\n",
              "        [ 54.,  54.,  54.]],\n",
              "\n",
              "       [[253., 253., 253.],\n",
              "        [253., 253., 253.],\n",
              "        [253., 253., 253.],\n",
              "        ...,\n",
              "        [ 57.,  57.,  57.],\n",
              "        [ 55.,  55.,  55.],\n",
              "        [ 52.,  52.,  52.]],\n",
              "\n",
              "       [[253., 253., 253.],\n",
              "        [253., 253., 253.],\n",
              "        [253., 253., 253.],\n",
              "        ...,\n",
              "        [ 58.,  58.,  58.],\n",
              "        [ 57.,  57.,  57.],\n",
              "        [ 50.,  50.,  50.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[127., 128., 132.],\n",
              "        [128., 129., 133.],\n",
              "        [128., 129., 133.],\n",
              "        ...,\n",
              "        [ 92.,  92.,  94.],\n",
              "        [110., 110., 112.],\n",
              "        [121., 122., 126.]],\n",
              "\n",
              "       [[127., 128., 132.],\n",
              "        [128., 129., 133.],\n",
              "        [128., 129., 133.],\n",
              "        ...,\n",
              "        [ 92.,  92.,  94.],\n",
              "        [110., 110., 112.],\n",
              "        [120., 121., 125.]],\n",
              "\n",
              "       [[128., 129., 133.],\n",
              "        [128., 129., 133.],\n",
              "        [128., 129., 133.],\n",
              "        ...,\n",
              "        [ 92.,  92.,  94.],\n",
              "        [110., 110., 112.],\n",
              "        [120., 121., 125.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[158., 159., 163.],\n",
              "        [160., 161., 165.],\n",
              "        [162., 163., 167.],\n",
              "        ...,\n",
              "        [ 45.,  43.,  44.],\n",
              "        [ 84.,  84.,  84.],\n",
              "        [100., 100., 102.]],\n",
              "\n",
              "       [[161., 162., 166.],\n",
              "        [161., 162., 166.],\n",
              "        [161., 162., 166.],\n",
              "        ...,\n",
              "        [ 47.,  45.,  46.],\n",
              "        [ 84.,  82.,  83.],\n",
              "        [ 99.,  98., 103.]],\n",
              "\n",
              "       [[161., 162., 166.],\n",
              "        [161., 162., 166.],\n",
              "        [161., 162., 166.],\n",
              "        ...,\n",
              "        [ 47.,  45.,  46.],\n",
              "        [ 84.,  82.,  83.],\n",
              "        [ 99.,  98., 103.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]],\n",
              "\n",
              "       [[0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        ...,\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.],\n",
              "        [0., 0., 0.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[170., 170., 170.],\n",
              "        [140., 140., 140.],\n",
              "        [143., 143., 143.],\n",
              "        ...,\n",
              "        [155., 155., 155.],\n",
              "        [192., 192., 192.],\n",
              "        [246., 246., 246.]],\n",
              "\n",
              "       [[ 64.,  64.,  64.],\n",
              "        [ 33.,  33.,  33.],\n",
              "        [ 34.,  34.,  34.],\n",
              "        ...,\n",
              "        [ 52.,  52.,  52.],\n",
              "        [117., 117., 117.],\n",
              "        [208., 208., 208.]],\n",
              "\n",
              "       [[ 31.,  31.,  31.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  1.,   1.,   1.],\n",
              "        ...,\n",
              "        [ 10.,  10.,  10.],\n",
              "        [ 83.,  83.,  83.],\n",
              "        [199., 199., 199.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        ...,\n",
              "        [ 53.,  53.,  53.],\n",
              "        [126., 126., 126.],\n",
              "        [214., 214., 214.]],\n",
              "\n",
              "       [[254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        ...,\n",
              "        [ 88.,  88.,  88.],\n",
              "        [150., 150., 150.],\n",
              "        [221., 221., 221.]],\n",
              "\n",
              "       [[254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        [254., 254., 254.],\n",
              "        ...,\n",
              "        [178., 178., 178.],\n",
              "        [215., 215., 215.],\n",
              "        [253., 253., 253.]]], dtype=float32)]\n",
              " new penumonia class images path :[array([[[ 41.,  41.,  41.],\n",
              "        [  9.,   9.,   9.],\n",
              "        [ 27.,  27.,  27.],\n",
              "        ...,\n",
              "        [ 25.,  25.,  25.],\n",
              "        [ 23.,  23.,  23.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       [[ 13.,  13.,  13.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [  0.,   0.,   0.],\n",
              "        ...,\n",
              "        [  0.,   0.,   0.],\n",
              "        [  2.,   2.,   2.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       [[ 29.,  29.,  29.],\n",
              "        [  0.,   0.,   0.],\n",
              "        [ 17.,  17.,  17.],\n",
              "        ...,\n",
              "        [ 12.,  12.,  12.],\n",
              "        [ 11.,  11.,  11.],\n",
              "        [  0.,   0.,   0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[129., 129., 129.],\n",
              "        [116., 116., 116.],\n",
              "        [131., 131., 131.],\n",
              "        ...,\n",
              "        [147., 147., 147.],\n",
              "        [144., 144., 144.],\n",
              "        [124., 124., 124.]],\n",
              "\n",
              "       [[129., 129., 129.],\n",
              "        [114., 114., 114.],\n",
              "        [131., 131., 131.],\n",
              "        ...,\n",
              "        [143., 143., 143.],\n",
              "        [142., 142., 142.],\n",
              "        [124., 124., 124.]],\n",
              "\n",
              "       [[110., 110., 110.],\n",
              "        [ 96.,  96.,  96.],\n",
              "        [118., 118., 118.],\n",
              "        ...,\n",
              "        [135., 135., 135.],\n",
              "        [130., 130., 130.],\n",
              "        [110., 110., 110.]]], dtype=float32)]\n"
            ]
          }
        ],
        "source": [
          "for array_conversion_images in penumonia_class_images:\n",
          "  new_pneumonia_class_images = []\n",
          "  array_conver = img_to_array(array_conversion_images)\n",
          "  new_pneumonia_class_images.append(array_conver)\n",
          "  print(f\" new penumonia class images path :{new_pneumonia_class_images}\")"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 54,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 633,
            "status": "ok",
            "timestamp": 1733211405492,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "gyaNfX4OSCvp",
          "outputId": "9d351dfc-8f26-4d00-96cb-8851eb0c7f10"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "<class 'list'>\n",
              "<class 'list'>\n"
            ]
          }
        ],
        "source": [
          "print(type(new_normal_class_images))\n",
          "print(type(new_pneumonia_class_images))"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 55,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 3,
            "status": "ok",
            "timestamp": 1733211406924,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "_UZd5SkCQz4R",
          "outputId": "9abbc9ac-5b43-44bd-ee53-243988f03d9d"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stderr",
            "text": [
              "ERROR:root:normal class images have not been stored in form of array\n"
            ]
          }
        ],
        "source": [
          "def check_array_images(normal_class_images):\n",
          "  logging.info(\"checking the array images\")\n",
          "  if type(new_normal_class_images) == 'numpy.ndarray':\n",
          "    logging.info(\"normal class images have been stored in form of array\")\n",
          "  else:\n",
          "    logging.error(\"normal class images have not been stored in form of array\")\n",
          "\n",
          "\n",
          "#calling the function to check the array\n",
          "check_array_images(normal_class_images)"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 56,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 602,
            "status": "ok",
            "timestamp": 1733211412179,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "jw35UYQER_pY",
          "outputId": "bd49df5f-2a40-4413-c6aa-06c46ce018c0"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              " normal class images in array form [[[[0. 0. 0.]\n",
              "   [0. 0. 0.]\n",
              "   [0. 0. 0.]\n",
              "   ...\n",
              "   [0. 0. 0.]\n",
              "   [0. 0. 0.]\n",
              "   [0. 0. 0.]]\n",
              "\n",
              "  [[0. 0. 0.]\n",
              "   [0. 0. 0.]\n",
              "   [0. 0. 0.]\n",
              "   ...\n",
              "   [0. 0. 0.]\n",
              "   [0. 0. 0.]\n",
              "   [0. 0. 0.]]\n",
              "\n",
              "  [[0. 0. 0.]\n",
              "   [0. 0. 0.]\n",
              "   [0. 0. 0.]\n",
              "   ...\n",
              "   [0. 0. 0.]\n",
              "   [0. 0. 0.]\n",
              "   [0. 0. 0.]]\n",
              "\n",
              "  ...\n",
              "\n",
              "  [[0. 0. 0.]\n",
              "   [0. 0. 0.]\n",
              "   [0. 0. 0.]\n",
              "   ...\n",
              "   [0. 0. 0.]\n",
              "   [0. 0. 0.]\n",
              "   [0. 0. 0.]]\n",
              "\n",
              "  [[0. 0. 0.]\n",
              "   [0. 0. 0.]\n",
              "   [0. 0. 0.]\n",
              "   ...\n",
              "   [0. 0. 0.]\n",
              "   [0. 0. 0.]\n",
              "   [0. 0. 0.]]\n",
              "\n",
              "  [[0. 0. 0.]\n",
              "   [0. 0. 0.]\n",
              "   [0. 0. 0.]\n",
              "   ...\n",
              "   [0. 0. 0.]\n",
              "   [0. 0. 0.]\n",
              "   [0. 0. 0.]]]]\n",
              " pneumonia class images in array form [[[[ 41.  41.  41.]\n",
              "   [  9.   9.   9.]\n",
              "   [ 27.  27.  27.]\n",
              "   ...\n",
              "   [ 25.  25.  25.]\n",
              "   [ 23.  23.  23.]\n",
              "   [  0.   0.   0.]]\n",
              "\n",
              "  [[ 13.  13.  13.]\n",
              "   [  0.   0.   0.]\n",
              "   [  0.   0.   0.]\n",
              "   ...\n",
              "   [  0.   0.   0.]\n",
              "   [  2.   2.   2.]\n",
              "   [  0.   0.   0.]]\n",
              "\n",
              "  [[ 29.  29.  29.]\n",
              "   [  0.   0.   0.]\n",
              "   [ 17.  17.  17.]\n",
              "   ...\n",
              "   [ 12.  12.  12.]\n",
              "   [ 11.  11.  11.]\n",
              "   [  0.   0.   0.]]\n",
              "\n",
              "  ...\n",
              "\n",
              "  [[129. 129. 129.]\n",
              "   [116. 116. 116.]\n",
              "   [131. 131. 131.]\n",
              "   ...\n",
              "   [147. 147. 147.]\n",
              "   [144. 144. 144.]\n",
              "   [124. 124. 124.]]\n",
              "\n",
              "  [[129. 129. 129.]\n",
              "   [114. 114. 114.]\n",
              "   [131. 131. 131.]\n",
              "   ...\n",
              "   [143. 143. 143.]\n",
              "   [142. 142. 142.]\n",
              "   [124. 124. 124.]]\n",
              "\n",
              "  [[110. 110. 110.]\n",
              "   [ 96.  96.  96.]\n",
              "   [118. 118. 118.]\n",
              "   ...\n",
              "   [135. 135. 135.]\n",
              "   [130. 130. 130.]\n",
              "   [110. 110. 110.]]]]\n"
            ]
          }
        ],
        "source": [
          "#now let see if images array are in list format then it will convert into array\n",
          "#created an custom exception\n",
          "try:\n",
          "  if type(new_normal_class_images) == list and type(new_pneumonia_class_images)==list:\n",
          "    new_normal_class_images = np.array(new_normal_class_images)\n",
          "    new_pneumonia_class_images = np.array(new_pneumonia_class_images)\n",
          "except Exception as e:\n",
          "  print(e)\n",
          "finally:\n",
          "  print(f\" normal class images in array form {new_normal_class_images}\")\n",
          "  print(f\" pneumonia class images in array form {new_pneumonia_class_images}\")"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": null,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/",
            "height": 1000,
            "output_embedded_package_id": "1vBegNB6iPeiOxBGCkXt5M65DBUQmQ32G"
          },
          "executionInfo": {
            "elapsed": 59857,
            "status": "ok",
            "timestamp": 1732961600072,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "Qm1KAOJrSwPM",
          "outputId": "dbbffbe0-443d-4eee-a37a-324dacf49677"
        },
        "outputs": [
          {
            "output_type": "display_data",
            "data": {
              "text/plain": "Output hidden; open in https://colab.research.google.com to view."
            },
            "metadata": {}
          }
        ],
        "source": [
          "for image_show in normal_class_images:\n",
          "  plt.imshow(image_show)\n",
          "  plt.title(\"normal class images\")\n",
          "  plt.show()"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 57,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 535,
            "status": "ok",
            "timestamp": 1733211438270,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "uQdHq_KVUoOq",
          "outputId": "3be3db6d-f7e4-45e0-c683-f6583495ce54"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              " normal images with resized shape [array([[[125.625  , 125.625  , 125.625  ],\n",
              "        [113.55078, 113.55078, 113.55078],\n",
              "        [121.68359, 121.68359, 121.68359],\n",
              "        ...,\n",
              "        [120.60547, 120.60547, 120.60547],\n",
              "        [113.8125 , 113.8125 , 113.8125 ],\n",
              "        [110.62891, 110.62891, 110.62891]],\n",
              "\n",
              "       [[126.36328, 126.36328, 126.36328],\n",
              "        [112.25   , 112.25   , 112.25   ],\n",
              "        [111.0625 , 111.0625 , 111.0625 ],\n",
              "        ...,\n",
              "        [116.6875 , 116.6875 , 116.6875 ],\n",
              "        [109.52734, 109.52734, 109.52734],\n",
              "        [105.44922, 105.44922, 105.44922]],\n",
              "\n",
              "       [[118.45703, 118.45703, 118.45703],\n",
              "        [129.625  , 129.625  , 129.625  ],\n",
              "        [111.4375 , 111.4375 , 111.4375 ],\n",
              "        ...,\n",
              "        [123.22266, 123.22266, 123.22266],\n",
              "        [109.12891, 109.12891, 109.12891],\n",
              "        [102.4375 , 102.4375 , 102.4375 ]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[138.07812, 138.07812, 138.07812],\n",
              "        [140.0625 , 140.0625 , 140.0625 ],\n",
              "        [147.96484, 147.96484, 147.96484],\n",
              "        ...,\n",
              "        [170.1875 , 170.1875 , 170.1875 ],\n",
              "        [175.125  , 175.125  , 175.125  ],\n",
              "        [174.3164 , 174.3164 , 174.3164 ]],\n",
              "\n",
              "       [[138.8125 , 138.8125 , 138.8125 ],\n",
              "        [143.6875 , 143.6875 , 143.6875 ],\n",
              "        [145.4414 , 145.4414 , 145.4414 ],\n",
              "        ...,\n",
              "        [171.6211 , 171.6211 , 171.6211 ],\n",
              "        [180.16016, 180.16016, 180.16016],\n",
              "        [171.53906, 171.53906, 171.53906]],\n",
              "\n",
              "       [[141.19531, 141.19531, 141.19531],\n",
              "        [145.4375 , 145.4375 , 145.4375 ],\n",
              "        [150.64453, 150.64453, 150.64453],\n",
              "        ...,\n",
              "        [168.25   , 168.25   , 168.25   ],\n",
              "        [165.10156, 165.10156, 165.10156],\n",
              "        [167.49219, 167.49219, 167.49219]]], dtype=float32)]\n"
            ]
          }
        ],
        "source": [
          "#let resize the images\n",
          "normal_image_resized = []\n",
          "for images in new_normal_class_images:\n",
          "  resized_images = smart_resize(images,(128,128))\n",
          "  normal_image_resized.append(resized_images)\n",
          "  print(f\" normal images with resized shape {normal_image_resized}\")"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 58,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 487,
            "status": "ok",
            "timestamp": 1733211444606,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "FaB1InApVMLt",
          "outputId": "13d80d01-9da6-4294-d913-14d420e4df0b"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              " pneumonia images with resized shape [array([[[  2.2421875,   2.2421875,   2.2421875],\n",
              "        [ 14.326569 ,  14.326569 ,  14.326569 ],\n",
              "        [ 13.       ,  13.       ,  13.       ],\n",
              "        ...,\n",
              "        [ 12.487625 ,  12.487625 ,  12.487625 ],\n",
              "        [  9.691025 ,   9.691025 ,   9.691025 ],\n",
              "        [  7.3459625,   7.3459625,   7.3459625]],\n",
              "\n",
              "       [[  2.2421875,   2.2421875,   2.2421875],\n",
              "        [ 13.       ,  13.       ,  13.       ],\n",
              "        [ 13.0312805,  13.0312805,  13.0312805],\n",
              "        ...,\n",
              "        [  6.0312805,   6.0312805,   6.0312805],\n",
              "        [  5.5398254,   5.5398254,   5.5398254],\n",
              "        [  4.276169 ,   4.276169 ,   4.276169 ]],\n",
              "\n",
              "       [[  2.2421875,   2.2421875,   2.2421875],\n",
              "        [ 12.134781 ,  12.134781 ,  12.134781 ],\n",
              "        [ 11.238907 ,  11.238907 ,  11.238907 ],\n",
              "        ...,\n",
              "        [  3.039688 ,   3.039688 ,   3.039688 ],\n",
              "        [  2.8144684,   2.8144684,   2.8144684],\n",
              "        [  2.056656 ,   2.056656 ,   2.056656 ]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[144.71222  , 144.71222  , 144.71222  ],\n",
              "        [163.10165  , 163.10165  , 163.10165  ],\n",
              "        [197.32297  , 197.32297  , 197.32297  ],\n",
              "        ...,\n",
              "        [179.84047  , 179.84047  , 179.84047  ],\n",
              "        [171.11131  , 171.11131  , 171.11131  ],\n",
              "        [155.60156  , 155.60156  , 155.60156  ]],\n",
              "\n",
              "       [[143.56367  , 143.56367  , 143.56367  ],\n",
              "        [166.89806  , 166.89806  , 166.89806  ],\n",
              "        [185.80269  , 185.80269  , 185.80269  ],\n",
              "        ...,\n",
              "        [176.40828  , 176.40828  , 176.40828  ],\n",
              "        [173.6875   , 173.6875   , 173.6875   ],\n",
              "        [148.88399  , 148.88399  , 148.88399  ]],\n",
              "\n",
              "       [[134.31914  , 134.31914  , 134.31914  ],\n",
              "        [170.80624  , 170.80624  , 170.80624  ],\n",
              "        [172.53322  , 172.53322  , 172.53322  ],\n",
              "        ...,\n",
              "        [171.83069  , 171.83069  , 171.83069  ],\n",
              "        [176.2461   , 176.2461   , 176.2461   ],\n",
              "        [149.       , 149.       , 149.       ]]], dtype=float32)]\n"
            ]
          }
        ],
        "source": [
          "pneumonia_image_resized = []\n",
          "for images in new_pneumonia_class_images:\n",
          "  resized_images = smart_resize(images,(128,128))\n",
          "  pneumonia_image_resized.append(resized_images)\n",
          "  print(f\" pneumonia images with resized shape {pneumonia_image_resized}\")"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 60,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 670,
            "status": "ok",
            "timestamp": 1733211478594,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "Y-YcRWGmjreL",
          "outputId": "60f988a7-cbbd-42d1-b2b8-2235276b299a"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "[0]\n",
              "[1]\n"
            ]
          }
        ],
        "source": [
          "normal_labels = []\n",
          "pneumonia_labels = []\n",
          "normal_data = []\n",
          "pneumonia_data = []\n",
          "\n",
          "for image_data in normal_image_resized:\n",
          "    array = np.array(image_data)\n",
          "    normal_data.append(array)\n",
          "    normal_labels.append(0)  # Append 0 for normal\n",
          "\n",
          "for image_data_1 in pneumonia_image_resized:\n",
          "    array_1 = np.array(image_data_1)\n",
          "    pneumonia_data.append(array_1) #Append to pneumonia_data, not pneumonia_labels\n",
          "    pneumonia_labels.append(1)  # Append 1 for pneumonia\n",
          "\n",
          "print(normal_labels)\n",
          "print(pneumonia_labels)"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 61,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 651,
            "status": "ok",
            "timestamp": 1733211578744,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "J1QT6cp6NuFj",
          "outputId": "a015835a-8eb4-4a15-8daa-2be518cab44e"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              " normal labels <class 'list'>\n",
              " pneumonia labels <class 'list'>\n",
              " normal data <class 'list'>\n",
              " pneumonia data <class 'list'>\n"
            ]
          }
        ],
        "source": [
          "print(f\" normal labels {type(normal_labels)}\")\n",
          "print(f\" pneumonia labels {type(pneumonia_labels)}\")\n",
          "print(f\" normal data {type(normal_data)}\")\n",
          "print(f\" pneumonia data {type(pneumonia_data)}\")"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 62,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 396,
            "status": "ok",
            "timestamp": 1733211583492,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "LJXK_QCTk4bP",
          "outputId": "074fd1b4-8bc9-41a9-af73-8df4bfa857c3"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "[[[[125.625   125.625   125.625  ]\n",
              "   [113.55078 113.55078 113.55078]\n",
              "   [121.68359 121.68359 121.68359]\n",
              "   ...\n",
              "   [120.60547 120.60547 120.60547]\n",
              "   [113.8125  113.8125  113.8125 ]\n",
              "   [110.62891 110.62891 110.62891]]\n",
              "\n",
              "  [[126.36328 126.36328 126.36328]\n",
              "   [112.25    112.25    112.25   ]\n",
              "   [111.0625  111.0625  111.0625 ]\n",
              "   ...\n",
              "   [116.6875  116.6875  116.6875 ]\n",
              "   [109.52734 109.52734 109.52734]\n",
              "   [105.44922 105.44922 105.44922]]\n",
              "\n",
              "  [[118.45703 118.45703 118.45703]\n",
              "   [129.625   129.625   129.625  ]\n",
              "   [111.4375  111.4375  111.4375 ]\n",
              "   ...\n",
              "   [123.22266 123.22266 123.22266]\n",
              "   [109.12891 109.12891 109.12891]\n",
              "   [102.4375  102.4375  102.4375 ]]\n",
              "\n",
              "  ...\n",
              "\n",
              "  [[138.07812 138.07812 138.07812]\n",
              "   [140.0625  140.0625  140.0625 ]\n",
              "   [147.96484 147.96484 147.96484]\n",
              "   ...\n",
              "   [170.1875  170.1875  170.1875 ]\n",
              "   [175.125   175.125   175.125  ]\n",
              "   [174.3164  174.3164  174.3164 ]]\n",
              "\n",
              "  [[138.8125  138.8125  138.8125 ]\n",
              "   [143.6875  143.6875  143.6875 ]\n",
              "   [145.4414  145.4414  145.4414 ]\n",
              "   ...\n",
              "   [171.6211  171.6211  171.6211 ]\n",
              "   [180.16016 180.16016 180.16016]\n",
              "   [171.53906 171.53906 171.53906]]\n",
              "\n",
              "  [[141.19531 141.19531 141.19531]\n",
              "   [145.4375  145.4375  145.4375 ]\n",
              "   [150.64453 150.64453 150.64453]\n",
              "   ...\n",
              "   [168.25    168.25    168.25   ]\n",
              "   [165.10156 165.10156 165.10156]\n",
              "   [167.49219 167.49219 167.49219]]]]\n",
              "[[[[  2.2421875   2.2421875   2.2421875]\n",
              "   [ 14.326569   14.326569   14.326569 ]\n",
              "   [ 13.         13.         13.       ]\n",
              "   ...\n",
              "   [ 12.487625   12.487625   12.487625 ]\n",
              "   [  9.691025    9.691025    9.691025 ]\n",
              "   [  7.3459625   7.3459625   7.3459625]]\n",
              "\n",
              "  [[  2.2421875   2.2421875   2.2421875]\n",
              "   [ 13.         13.         13.       ]\n",
              "   [ 13.0312805  13.0312805  13.0312805]\n",
              "   ...\n",
              "   [  6.0312805   6.0312805   6.0312805]\n",
              "   [  5.5398254   5.5398254   5.5398254]\n",
              "   [  4.276169    4.276169    4.276169 ]]\n",
              "\n",
              "  [[  2.2421875   2.2421875   2.2421875]\n",
              "   [ 12.134781   12.134781   12.134781 ]\n",
              "   [ 11.238907   11.238907   11.238907 ]\n",
              "   ...\n",
              "   [  3.039688    3.039688    3.039688 ]\n",
              "   [  2.8144684   2.8144684   2.8144684]\n",
              "   [  2.056656    2.056656    2.056656 ]]\n",
              "\n",
              "  ...\n",
              "\n",
              "  [[144.71222   144.71222   144.71222  ]\n",
              "   [163.10165   163.10165   163.10165  ]\n",
              "   [197.32297   197.32297   197.32297  ]\n",
              "   ...\n",
              "   [179.84047   179.84047   179.84047  ]\n",
              "   [171.11131   171.11131   171.11131  ]\n",
              "   [155.60156   155.60156   155.60156  ]]\n",
              "\n",
              "  [[143.56367   143.56367   143.56367  ]\n",
              "   [166.89806   166.89806   166.89806  ]\n",
              "   [185.80269   185.80269   185.80269  ]\n",
              "   ...\n",
              "   [176.40828   176.40828   176.40828  ]\n",
              "   [173.6875    173.6875    173.6875   ]\n",
              "   [148.88399   148.88399   148.88399  ]]\n",
              "\n",
              "  [[134.31914   134.31914   134.31914  ]\n",
              "   [170.80624   170.80624   170.80624  ]\n",
              "   [172.53322   172.53322   172.53322  ]\n",
              "   ...\n",
              "   [171.83069   171.83069   171.83069  ]\n",
              "   [176.2461    176.2461    176.2461   ]\n",
              "   [149.        149.        149.       ]]]]\n"
            ]
          }
        ],
        "source": [
          "try:\n",
          "  if type(normal_data)==list and type(pneumonia_data)==list:\n",
          "       normal_data = np.array(normal_data)\n",
          "       pneumonia_data = np.array(pneumonia_data)\n",
          "       print(normal_data)\n",
          "       print(pneumonia_data)\n",
          "except Exception as error:\n",
          "  print(f\" error in retrieving data type {error} \")"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 63,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 535,
            "status": "ok",
            "timestamp": 1733211590208,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "uVZtxbDAnCpe",
          "outputId": "3e405f15-9157-4adc-e3c5-e213bc9bc363"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              " data [[[[125.625     125.625     125.625    ]\n",
              "   [113.55078   113.55078   113.55078  ]\n",
              "   [121.68359   121.68359   121.68359  ]\n",
              "   ...\n",
              "   [120.60547   120.60547   120.60547  ]\n",
              "   [113.8125    113.8125    113.8125   ]\n",
              "   [110.62891   110.62891   110.62891  ]]\n",
              "\n",
              "  [[126.36328   126.36328   126.36328  ]\n",
              "   [112.25      112.25      112.25     ]\n",
              "   [111.0625    111.0625    111.0625   ]\n",
              "   ...\n",
              "   [116.6875    116.6875    116.6875   ]\n",
              "   [109.52734   109.52734   109.52734  ]\n",
              "   [105.44922   105.44922   105.44922  ]]\n",
              "\n",
              "  [[118.45703   118.45703   118.45703  ]\n",
              "   [129.625     129.625     129.625    ]\n",
              "   [111.4375    111.4375    111.4375   ]\n",
              "   ...\n",
              "   [123.22266   123.22266   123.22266  ]\n",
              "   [109.12891   109.12891   109.12891  ]\n",
              "   [102.4375    102.4375    102.4375   ]]\n",
              "\n",
              "  ...\n",
              "\n",
              "  [[138.07812   138.07812   138.07812  ]\n",
              "   [140.0625    140.0625    140.0625   ]\n",
              "   [147.96484   147.96484   147.96484  ]\n",
              "   ...\n",
              "   [170.1875    170.1875    170.1875   ]\n",
              "   [175.125     175.125     175.125    ]\n",
              "   [174.3164    174.3164    174.3164   ]]\n",
              "\n",
              "  [[138.8125    138.8125    138.8125   ]\n",
              "   [143.6875    143.6875    143.6875   ]\n",
              "   [145.4414    145.4414    145.4414   ]\n",
              "   ...\n",
              "   [171.6211    171.6211    171.6211   ]\n",
              "   [180.16016   180.16016   180.16016  ]\n",
              "   [171.53906   171.53906   171.53906  ]]\n",
              "\n",
              "  [[141.19531   141.19531   141.19531  ]\n",
              "   [145.4375    145.4375    145.4375   ]\n",
              "   [150.64453   150.64453   150.64453  ]\n",
              "   ...\n",
              "   [168.25      168.25      168.25     ]\n",
              "   [165.10156   165.10156   165.10156  ]\n",
              "   [167.49219   167.49219   167.49219  ]]]\n",
              "\n",
              "\n",
              " [[[  2.2421875   2.2421875   2.2421875]\n",
              "   [ 14.326569   14.326569   14.326569 ]\n",
              "   [ 13.         13.         13.       ]\n",
              "   ...\n",
              "   [ 12.487625   12.487625   12.487625 ]\n",
              "   [  9.691025    9.691025    9.691025 ]\n",
              "   [  7.3459625   7.3459625   7.3459625]]\n",
              "\n",
              "  [[  2.2421875   2.2421875   2.2421875]\n",
              "   [ 13.         13.         13.       ]\n",
              "   [ 13.0312805  13.0312805  13.0312805]\n",
              "   ...\n",
              "   [  6.0312805   6.0312805   6.0312805]\n",
              "   [  5.5398254   5.5398254   5.5398254]\n",
              "   [  4.276169    4.276169    4.276169 ]]\n",
              "\n",
              "  [[  2.2421875   2.2421875   2.2421875]\n",
              "   [ 12.134781   12.134781   12.134781 ]\n",
              "   [ 11.238907   11.238907   11.238907 ]\n",
              "   ...\n",
              "   [  3.039688    3.039688    3.039688 ]\n",
              "   [  2.8144684   2.8144684   2.8144684]\n",
              "   [  2.056656    2.056656    2.056656 ]]\n",
              "\n",
              "  ...\n",
              "\n",
              "  [[144.71222   144.71222   144.71222  ]\n",
              "   [163.10165   163.10165   163.10165  ]\n",
              "   [197.32297   197.32297   197.32297  ]\n",
              "   ...\n",
              "   [179.84047   179.84047   179.84047  ]\n",
              "   [171.11131   171.11131   171.11131  ]\n",
              "   [155.60156   155.60156   155.60156  ]]\n",
              "\n",
              "  [[143.56367   143.56367   143.56367  ]\n",
              "   [166.89806   166.89806   166.89806  ]\n",
              "   [185.80269   185.80269   185.80269  ]\n",
              "   ...\n",
              "   [176.40828   176.40828   176.40828  ]\n",
              "   [173.6875    173.6875    173.6875   ]\n",
              "   [148.88399   148.88399   148.88399  ]]\n",
              "\n",
              "  [[134.31914   134.31914   134.31914  ]\n",
              "   [170.80624   170.80624   170.80624  ]\n",
              "   [172.53322   172.53322   172.53322  ]\n",
              "   ...\n",
              "   [171.83069   171.83069   171.83069  ]\n",
              "   [176.2461    176.2461    176.2461   ]\n",
              "   [149.        149.        149.       ]]]]\n",
              " labels [0 1]\n"
            ]
          }
        ],
        "source": [
          "Data = np.concatenate((normal_data, pneumonia_data), axis=0)\n",
          "labels =np.concatenate((normal_labels, pneumonia_labels) ,axis=0)\n",
          "print(f\" data {Data}\")\n",
          "print(f\" labels {labels}\")"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 64,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 834,
            "status": "ok",
            "timestamp": 1733211598927,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "N2Ci-cqQnT_u",
          "outputId": "98d5fba3-a779-4c8f-bdbe-58b5bf1a394f"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "[0]\n",
              "[1]\n"
            ]
          }
        ],
        "source": [
          "try:\n",
          "  if type(normal_labels)==list and type(pneumonia_labels)==list:\n",
          "       normal_labels = np.array(normal_labels)\n",
          "       pneumonia_labels = np.array(pneumonia_labels)\n",
          "       print(normal_labels)\n",
          "       print(pneumonia_labels)\n",
          "except Exception as error:\n",
          "  print(f\" error in retrieving conversion of data type {error}\")"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "lMun_w5kOrKe"
        },
        "source": [
          "# Train Test Split"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 65,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 583,
            "status": "ok",
            "timestamp": 1733211602494,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "eF52g3_HOxZB",
          "outputId": "1196611b-7513-4488-d6b7-9ca8f52e9d54"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              " X_train (1, 128, 128, 3)\n",
              " Y_train (1,)\n",
              " X_test (1, 128, 128, 3)\n",
              " y_test (1,)\n"
            ]
          }
        ],
        "source": [
          "from sklearn.model_selection import train_test_split\n",
          "\n",
          "class FeatureSplitter:\n",
          "  def __init__(self,Data,labels):\n",
          "    self.data = Data\n",
          "    self.labels = labels\n",
          "    self.train_size = 0.7\n",
          "    self.test_size = 0.3\n",
          "    self.random_state = np.random.randint(0,100)\n",
          "  def split_data(self):\n",
          "    logging.info(\"splitting the data\")\n",
          "    X_train , X_test , y_train , y_test = train_test_split(self.data , self.labels , train_size = self.train_size ,\n",
          "                                                           test_size = self.test_size , random_state = self.random_state)\n",
          "    return X_train , X_test , y_train , y_test\n",
          "    return logging.info(\"data has been splitted into 70 and 30 ratio\")\n",
          "\n",
          "result = FeatureSplitter(Data,labels)\n",
          "X_train , X_test , y_train , y_test = result.split_data()\n",
          "print(f\" X_train {X_train.shape}\")\n",
          "print(f\" Y_train {y_train.shape}\")\n",
          "print(f\" X_test {X_test.shape}\")\n",
          "print(f\" y_test {y_test.shape}\")"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 66,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 380,
            "status": "ok",
            "timestamp": 1733211606457,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "gUVmsSPOYj9a",
          "outputId": "eee698a2-f844-4735-d804-3ebe055515d6"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              " new shape of train and test (128, 128, 3) (128, 128, 3)\n"
            ]
          }
        ],
        "source": [
          "new_X_train = X_train.reshape(128,128,3)\n",
          "new_X_test = X_test.reshape(128,128,3)\n",
          "print(f\" new shape of train and test {new_X_train.shape} {new_X_test.shape}\")"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "n9bmtpYgR4_i"
        },
        "source": [
          "# CNN model Pipeline"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 67,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 417,
            "status": "ok",
            "timestamp": 1733211608440,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "uzgQOCKwR8Tl",
          "outputId": "9a0f0dcb-0d7f-4d69-ec5c-9fb7c2eb2e09"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              " cnn model Pipeline(steps=[('cnn_model', <Sequential name=sequential_2, built=False>)])\n"
            ]
          }
        ],
        "source": [
          "#now initiliazing the model pipeline for cnn model\n",
          "class CNNModel:\n",
          "  def __init__(self):\n",
          "    self.preprocessing = [('cnn_model',Sequential())]\n",
          "  def create_model_pipeline(self):\n",
          "    logging.info(\"Cnn model pipeline has been started\")\n",
          "    try:\n",
          "      cnn_model = Pipeline(steps=self.preprocessing)\n",
          "      return cnn_model\n",
          "    except Exception as error:\n",
          "      print(f\" error {error}\")\n",
          "      logging.error(\"cnn model pipeline processing has been terminated\")\n",
          "\n",
          "result = CNNModel()\n",
          "cnn_model = result.create_model_pipeline()\n",
          "print(f\" cnn model {cnn_model}\")"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "Q3OUdMrHTwts"
        },
        "source": [
          "# Cnn neural network"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 68,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/",
            "height": 430
          },
          "executionInfo": {
            "elapsed": 520,
            "status": "ok",
            "timestamp": 1733211613745,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "_d8lmV1BZbyV",
          "outputId": "268848ff-1444-43cc-e447-0133b47014f8"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              " cnn model Pipeline(steps=[('cnn_model', <Sequential name=sequential_3, built=True>)])\n"
            ]
          },
          {
            "output_type": "display_data",
            "data": {
              "text/plain": [
                "\u001b[1mModel: \"sequential_3\"\u001b[0m\n"
              ],
              "text/html": [
                "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_3\"</span>\n",
                "</pre>\n"
              ]
            },
            "metadata": {}
          },
          {
            "output_type": "display_data",
            "data": {
              "text/plain": [
                "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
                "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
                "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
                "│ conv2d_3 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m126\u001b[0m, \u001b[38;5;34m126\u001b[0m, \u001b[38;5;34m32\u001b[0m)        │             \u001b[38;5;34m896\u001b[0m │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ max_pooling2d_3 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m63\u001b[0m, \u001b[38;5;34m63\u001b[0m, \u001b[38;5;34m32\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ conv2d_4 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m61\u001b[0m, \u001b[38;5;34m61\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │          \u001b[38;5;34m18,496\u001b[0m │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ max_pooling2d_4 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ conv2d_5 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m128\u001b[0m)         │          \u001b[38;5;34m73,856\u001b[0m │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ max_pooling2d_5 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m128\u001b[0m)         │               \u001b[38;5;34m0\u001b[0m │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ flatten_1 (\u001b[38;5;33mFlatten\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m25088\u001b[0m)               │               \u001b[38;5;34m0\u001b[0m │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │       \u001b[38;5;34m3,211,392\u001b[0m │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │             \u001b[38;5;34m129\u001b[0m │\n",
                "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
              ],
              "text/html": [
                "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
                "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
                "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
                "│ conv2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">126</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">126</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">896</span> │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ max_pooling2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">63</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">63</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ conv2d_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">61</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">61</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │          <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ max_pooling2d_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ conv2d_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">73,856</span> │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ max_pooling2d_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)         │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ flatten_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">25088</span>)               │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │       <span style=\"color: #00af00; text-decoration-color: #00af00\">3,211,392</span> │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">129</span> │\n",
                "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
                "</pre>\n"
              ]
            },
            "metadata": {}
          },
          {
            "output_type": "display_data",
            "data": {
              "text/plain": [
                "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m3,304,769\u001b[0m (12.61 MB)\n"
              ],
              "text/html": [
                "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">3,304,769</span> (12.61 MB)\n",
                "</pre>\n"
              ]
            },
            "metadata": {}
          },
          {
            "output_type": "display_data",
            "data": {
              "text/plain": [
                "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m3,304,769\u001b[0m (12.61 MB)\n"
              ],
              "text/html": [
                "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">3,304,769</span> (12.61 MB)\n",
                "</pre>\n"
              ]
            },
            "metadata": {}
          },
          {
            "output_type": "display_data",
            "data": {
              "text/plain": [
                "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
              ],
              "text/html": [
                "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
                "</pre>\n"
              ]
            },
            "metadata": {}
          }
        ],
        "source": [
          "\n",
          "class CNNModel:\n",
          "  def __init__(self):\n",
          "    # Initialize the Sequential model directly\n",
          "    self.cnn_model = Sequential()\n",
          "  def create_model_pipeline(self):\n",
          "    logging.info(\"Cnn model pipeline has been started\")\n",
          "    try:\n",
          "      #Add layers directly to the Sequential model\n",
          "      self.cnn_model.add(Conv2D(32, activation='relu', kernel_size=(3, 3), input_shape=(128, 128, 3)))\n",
          "      self.cnn_model.add(MaxPooling2D(pool_size=(2, 2)))\n",
          "      self.cnn_model.add(Conv2D(64, activation='relu', kernel_size=(3, 3)))\n",
          "      self.cnn_model.add(MaxPooling2D(pool_size=(2, 2)))\n",
          "      self.cnn_model.add(Conv2D(128, activation='relu', kernel_size=(3, 3)))\n",
          "      self.cnn_model.add(MaxPooling2D(pool_size=(2, 2)))\n",
          "      self.cnn_model.add(Flatten())\n",
          "      self.cnn_model.add(Dense(128, activation='relu'))\n",
          "      self.cnn_model.add(Dense(1, activation='sigmoid'))\n",
          "\n",
          "      # Wrap the Sequential model in a Pipeline\n",
          "      cnn_pipeline = Pipeline(steps=[('cnn_model', self.cnn_model)])\n",
          "      return cnn_pipeline\n",
          "    except Exception as error:\n",
          "      print(f\" error {error}\")\n",
          "      logging.error(\"cnn model pipeline processing has been terminated\")\n",
          "\n",
          "result = CNNModel()\n",
          "cnn_model = result.create_model_pipeline()\n",
          "print(f\" cnn model {cnn_model}\")\n",
          "\n",
          "cnn_model[0].summary()\n",
          "\n"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 69,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 4875,
            "status": "ok",
            "timestamp": 1733211625450,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "0xlVq2Ljaj7V",
          "outputId": "4fcd678b-79c1-49b2-c20e-2e905744ccb2"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "Epoch 1/10\n",
              "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3s/step - accuracy: 0.0000e+00 - loss: 41.3710 - val_accuracy: 0.0000e+00 - val_loss: 1041.9398\n",
              "Epoch 2/10\n",
              "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 340ms/step - accuracy: 1.0000 - loss: 0.0000e+00 - val_accuracy: 0.0000e+00 - val_loss: 1701.4335\n",
              "Epoch 3/10\n",
              "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 162ms/step - accuracy: 1.0000 - loss: 0.0000e+00 - val_accuracy: 0.0000e+00 - val_loss: 2322.4570\n",
              "Epoch 4/10\n",
              "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 312ms/step - accuracy: 1.0000 - loss: 0.0000e+00 - val_accuracy: 0.0000e+00 - val_loss: 2899.0544\n",
              "Epoch 5/10\n",
              "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 254ms/step - accuracy: 1.0000 - loss: 0.0000e+00 - val_accuracy: 0.0000e+00 - val_loss: 3433.1033\n",
              "Epoch 6/10\n",
              "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 139ms/step - accuracy: 1.0000 - loss: 0.0000e+00 - val_accuracy: 0.0000e+00 - val_loss: 3934.5750\n",
              "Epoch 7/10\n",
              "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 127ms/step - accuracy: 1.0000 - loss: 0.0000e+00 - val_accuracy: 0.0000e+00 - val_loss: 4411.4985\n",
              "Epoch 8/10\n",
              "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 123ms/step - accuracy: 1.0000 - loss: 0.0000e+00 - val_accuracy: 0.0000e+00 - val_loss: 4874.0864\n",
              "Epoch 9/10\n",
              "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 142ms/step - accuracy: 1.0000 - loss: 0.0000e+00 - val_accuracy: 0.0000e+00 - val_loss: 5322.2153\n",
              "Epoch 10/10\n",
              "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 147ms/step - accuracy: 1.0000 - loss: 0.0000e+00 - val_accuracy: 0.0000e+00 - val_loss: 5754.4126\n"
            ]
          },
          {
            "output_type": "execute_result",
            "data": {
              "text/plain": [
                "<keras.src.callbacks.history.History at 0x7fcd75ea1a50>"
              ]
            },
            "metadata": {},
            "execution_count": 69
          }
        ],
        "source": [
          "cnn_model[0].compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\n",
          "\n",
          "cnn_model[0].fit(X_train , y_train ,epochs = 10 , validation_data=(X_test,y_test))"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 70,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 457,
            "status": "ok",
            "timestamp": 1733211638857,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "b_ozKVHCbkJf",
          "outputId": "4a1ae6a4-4c3f-4c61-f83a-e58ec91adeba"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 122ms/step\n",
              " cnn model redictions [[0.]]\n"
            ]
          }
        ],
        "source": [
          "cnn_model_predictions = cnn_model[0].predict(X_test)\n",
          "print(f\" cnn model redictions {cnn_model_predictions}\")"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "ZmPQLkKia79r"
        },
        "source": [
          "model is working worst on training and testing data"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 71,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 408,
            "status": "ok",
            "timestamp": 1733211640614,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "JIrgc8nVbHW9",
          "outputId": "f27a4787-23b0-43d2-c73f-c90ca8c915c1"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 38ms/step - accuracy: 1.0000 - loss: 0.0000e+00\n",
              "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 44ms/step - accuracy: 0.0000e+00 - loss: 5754.4126\n"
            ]
          }
        ],
        "source": [
          "training_accuracy = cnn_model[0].evaluate(X_train,y_train)\n",
          "testing_acuracy = cnn_model[0].evaluate(X_test,y_test)\n"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "ghLKJyFgbIMu"
        },
        "source": [
          "# CNN model Optimization"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "ZsDYGXjscCeR"
        },
        "source": [
          "selecting the best image or fixed image value from image directory"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 72,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 802,
            "status": "ok",
            "timestamp": 1733211648072,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "APPhOiwvcHOG",
          "outputId": "6408336e-7d48-45c9-ae9a-193573b6e00a"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "Found 148 images belonging to 2 classes.\n",
              "Found 40 images belonging to 2 classes.\n",
              "Found 40 images belonging to 2 classes.\n"
            ]
          }
        ],
        "source": [
          "train_data_generator = ImageDataGenerator(\n",
          "    rescale=1./255\n",
          ")\n",
          "test_data_generator = ImageDataGenerator(\n",
          "    rescale=0./255\n",
          ")\n",
          "\n",
          "train_image_directory = \"/content/drive/MyDrive/COVID19/train\"\n",
          "test_image_directory =  \"/content/drive/MyDrive/COVID19/test\"\n",
          "train_data_generation = train_data_generator.flow_from_directory(\n",
          "    train_image_directory,\n",
          "    target_size=(128,128),\n",
          "    class_mode=\"binary\",\n",
          "    batch_size=32\n",
          "\n",
          ")\n",
          "validation_data_generation = test_data_generator.flow_from_directory(\n",
          "    test_image_directory,\n",
          "    target_size=(128,128),\n",
          "    batch_size=32,\n",
          "    class_mode=\"binary\"\n",
          ")\n",
          "test_data_generation = test_data_generator.flow_from_directory(\n",
          "    test_image_directory,\n",
          "    target_size=(128,128),\n",
          "    batch_size=32,\n",
          "    class_mode=\"binary\"\n",
          ")"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 73,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "id": "i2q_-t54ezSI",
          "executionInfo": {
            "status": "ok",
            "timestamp": 1733211803839,
            "user_tz": -330,
            "elapsed": 151685,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            }
          },
          "outputId": "51e15d0e-ead7-4e07-bfbb-76fd6c4aa6c5"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "Epoch 1/10\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 2s/step - accuracy: 0.4740 - loss: 6.6560 - val_accuracy: 0.5000 - val_loss: 168.4143\n",
              "Epoch 2/10\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 2s/step - accuracy: 0.4657 - loss: 0.7938 - val_accuracy: 0.5000 - val_loss: 38.3870\n",
              "Epoch 3/10\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 2s/step - accuracy: 0.5122 - loss: 0.6892 - val_accuracy: 0.5000 - val_loss: 19.2976\n",
              "Epoch 4/10\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 1s/step - accuracy: 0.6028 - loss: 0.6682 - val_accuracy: 0.5000 - val_loss: 29.7373\n",
              "Epoch 5/10\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 1s/step - accuracy: 0.6714 - loss: 0.6139 - val_accuracy: 1.0000 - val_loss: 6.3915e-09\n",
              "Epoch 6/10\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 2s/step - accuracy: 0.7733 - loss: 0.5279 - val_accuracy: 0.7000 - val_loss: 27.3973\n",
              "Epoch 7/10\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 2s/step - accuracy: 0.8195 - loss: 0.4364 - val_accuracy: 1.0000 - val_loss: 0.0000e+00\n",
              "Epoch 8/10\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 2s/step - accuracy: 0.9127 - loss: 0.2750 - val_accuracy: 0.9750 - val_loss: 1.9481\n",
              "Epoch 9/10\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 2s/step - accuracy: 0.9261 - loss: 0.1972 - val_accuracy: 1.0000 - val_loss: 0.0000e+00\n",
              "Epoch 10/10\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 2s/step - accuracy: 0.9323 - loss: 0.1571 - val_accuracy: 1.0000 - val_loss: 0.0000e+00\n"
            ]
          }
        ],
        "source": [
          "cnn_model[0].compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\n",
          "\n",
          "history = cnn_model[0].fit(train_data_generation,epochs = 10 , validation_data=validation_data_generation)"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 84,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "elapsed": 16517,
            "status": "ok",
            "timestamp": 1733212494963,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "1AqVw9wigGKz",
          "outputId": "01c3f992-73e0-4ed7-b8db-7568dd9f8438"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 57ms/step\n",
              " cnn model predictions [[1.]]\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 1s/step - accuracy: 0.9868 - loss: 0.0390\n",
              "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 207ms/step - accuracy: 0.9292 - loss: 6.0736\n",
              "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 107ms/step - accuracy: 0.9292 - loss: 6.0736\n",
              " training accuracy 0.9864864945411682\n",
              " testing accuracy 0.925000011920929\n",
              " validation accuracy 0.925000011920929\n"
            ]
          }
        ],
        "source": [
          "generation_cnn_model_prediction = cnn_model[0].predict(X_test)\n",
          "print(f\" cnn model predictions {generation_cnn_model_prediction}\")\n",
          "\n",
          "training_accuracy = cnn_model[0].evaluate(train_data_generation)\n",
          "testing_acuracy = cnn_model[0].evaluate(test_data_generation)\n",
          "validation_accuracy = cnn_model[0].evaluate(validation_data_generation)\n",
          "\n",
          "print(f\" training accuracy {training_accuracy[1]}\")\n",
          "print(f\" testing accuracy {testing_acuracy[1]}\")\n",
          "print(f\" validation accuracy {validation_accuracy[1]}\")"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 76,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/",
            "height": 452
          },
          "executionInfo": {
            "elapsed": 2760,
            "status": "ok",
            "timestamp": 1733212009547,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "NaWlUrCfiVoX",
          "outputId": "fddebdba-410d-474d-bd48-15983bdbfaac"
        },
        "outputs": [
          {
            "output_type": "display_data",
            "data": {
              "text/plain": [
                "<Figure size 640x480 with 1 Axes>"
              ],
              "image/png": "\n"
            },
            "metadata": {}
          }
        ],
        "source": [
          "accuracy = history.history['accuracy']\n",
          "loss = history.history['loss']\n",
          "val_loss = history.history['val_loss']\n",
          "val_accuracy = history.history['val_accuracy']\n",
          "plt.plot(accuracy , label='training accuracy')\n",
          "plt.plot(loss , label='training loss')\n",
          "plt.title(\"training accuracy and loss\")\n",
          "plt.legend()\n",
          "plt.show()"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 77,
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/",
            "height": 452
          },
          "executionInfo": {
            "elapsed": 1164,
            "status": "ok",
            "timestamp": 1733212018865,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            },
            "user_tz": -330
          },
          "id": "ev8jHWUvicnC",
          "outputId": "4b5f03c4-9ac8-4f71-c604-a8a25c8c1b3e"
        },
        "outputs": [
          {
            "output_type": "display_data",
            "data": {
              "text/plain": [
                "<Figure size 640x480 with 1 Axes>"
              ],
              "image/png": "\n"
            },
            "metadata": {}
          }
        ],
        "source": [
          "plt.plot(val_accuracy , label='validation accuracy')\n",
          "plt.plot(val_loss , label='validation loss')\n",
          "plt.title(\"validation accuracy and loss\")\n",
          "plt.legend()\n",
          "plt.show()"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "ovY7210zjlNV"
        },
        "source": [
          "using callbacks for imrpove the model performance"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": 78,
        "metadata": {
          "id": "McLujVb6jqLx",
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "executionInfo": {
            "status": "ok",
            "timestamp": 1733212168182,
            "user_tz": -330,
            "elapsed": 143953,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            }
          },
          "outputId": "a73ec161-3f0c-4bdb-d2f3-9046699b39cc"
        },
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "Epoch 1/100\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 2s/step - accuracy: 0.8465 - loss: 0.4387 - val_accuracy: 0.8750 - val_loss: 39.3295\n",
              "Epoch 2/100\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 2s/step - accuracy: 0.9385 - loss: 0.2765 - val_accuracy: 0.9750 - val_loss: 0.0460\n",
              "Epoch 3/100\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 2s/step - accuracy: 0.9514 - loss: 0.1662 - val_accuracy: 1.0000 - val_loss: 1.5454e-09\n",
              "Epoch 4/100\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 2s/step - accuracy: 0.9206 - loss: 0.1547 - val_accuracy: 1.0000 - val_loss: 5.5544e-37\n",
              "Epoch 5/100\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 2s/step - accuracy: 0.9568 - loss: 0.1323 - val_accuracy: 0.9500 - val_loss: 3.1898\n",
              "Epoch 6/100\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 2s/step - accuracy: 0.9745 - loss: 0.0763 - val_accuracy: 0.9250 - val_loss: 6.8987\n",
              "Epoch 7/100\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 2s/step - accuracy: 0.9925 - loss: 0.0510 - val_accuracy: 0.9250 - val_loss: 6.1723\n"
            ]
          }
        ],
        "source": [
          "#setting the callbacks as if we increase the epchs numebr of values\n",
          "callbacks = EarlyStopping(monitor='val_loss',patience=3)\n",
          "\n",
          "cnn_model[0].compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\n",
          "\n",
          "history_1 = cnn_model[0].fit(train_data_generation,epochs=100,validation_data = validation_data_generation,\n",
          "                             callbacks=[callbacks])"
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "cnn_model_callbacks_predictions = cnn_model[0].predict(X_test)\n",
          "print(f\" cnn_model using callbacks prediction {cnn_model_callbacks_predictions}\")"
        ],
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "id": "5dkem0hTgNj7",
          "executionInfo": {
            "status": "ok",
            "timestamp": 1733212553065,
            "user_tz": -330,
            "elapsed": 363,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            }
          },
          "outputId": "1d097e5a-60db-417c-98da-1adb4f4e6a31"
        },
        "execution_count": 86,
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 35ms/step\n",
              " cnn_model using callbacks prediction [[1.]]\n"
            ]
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "\n",
          "training_accuracy = cnn_model[0].evaluate(train_data_generation)\n",
          "testing_acuracy = cnn_model[0].evaluate(test_data_generation)\n",
          "validation_accuracy = cnn_model[0].evaluate(validation_data_generation)\n",
          "\n",
          "print(f\" training accuracy {training_accuracy[1]}\")\n",
          "print(f\" testing accuracy {testing_acuracy[1]}\")\n",
          "print(f\" validation accuracy {validation_accuracy[1]}\")"
        ],
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "id": "dq-CAz9GhNIP",
          "executionInfo": {
            "status": "ok",
            "timestamp": 1733212610521,
            "user_tz": -330,
            "elapsed": 19865,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            }
          },
          "outputId": "56469614-9923-4d30-a93d-97983b72e213"
        },
        "execution_count": 87,
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 1s/step - accuracy: 0.9833 - loss: 0.0377\n",
              "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 79ms/step - accuracy: 0.9292 - loss: 6.2530\n",
              "\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 117ms/step - accuracy: 0.9187 - loss: 6.6867\n",
              " training accuracy 0.9864864945411682\n",
              " testing accuracy 0.925000011920929\n",
              " validation accuracy 0.925000011920929\n"
            ]
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "#let see the computationality of each epochs\n",
          "accuracy = history_1.history['accuracy']\n",
          "loss = history_1.history['loss']\n",
          "val_loss = history_1.history['val_loss']\n",
          "val_accuracy = history_1.history['val_accuracy']\n",
          "\n",
          "plt.plot(accuracy , label='training accuracy')\n",
          "plt.plot(loss , label='training loss')\n",
          "plt.title(\"training accuracy and loss\")\n",
          "plt.legend()\n",
          "plt.show()"
        ],
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/",
            "height": 452
          },
          "id": "m0K_6bzHhZSv",
          "executionInfo": {
            "status": "ok",
            "timestamp": 1733212647579,
            "user_tz": -330,
            "elapsed": 714,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            }
          },
          "outputId": "0e6240b7-c6cf-4486-ae07-e83a45755d66"
        },
        "execution_count": 88,
        "outputs": [
          {
            "output_type": "display_data",
            "data": {
              "text/plain": [
                "<Figure size 640x480 with 1 Axes>"
              ],
              "image/png": "\n"
            },
            "metadata": {}
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "plt.plot(val_accuracy , label='validation accuracy')\n",
          "plt.plot(val_loss , label='validation loss')\n",
          "plt.title(\"validation accuracy and loss\")\n",
          "plt.legend()\n",
          "plt.show()"
        ],
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/",
            "height": 452
          },
          "id": "w_NlbOR-hnPL",
          "executionInfo": {
            "status": "ok",
            "timestamp": 1733212692510,
            "user_tz": -330,
            "elapsed": 1777,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            }
          },
          "outputId": "78056d02-1070-4c7c-f8a9-9b8acc49dc00"
        },
        "execution_count": 90,
        "outputs": [
          {
            "output_type": "display_data",
            "data": {
              "text/plain": [
                "<Figure size 640x480 with 1 Axes>"
              ],
              "image/png": "iVBORw0KGgoAAAANSUhEUgAAAh8AAAGzCAYAAACPa3XZAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABYhUlEQVR4nO3deXwU9f3H8dfm2iTkIiHkIOGQ+zDcIKKIAiIIBUVEoeUQURFQoVRLfxXQqrG2tlhFWq23UBAU8QAREVCRGyM3CoIkJNyQkASSkJ3fH0MWliTkzmyS9/Px2Mfuzn535rOTwL4z3+98x2YYhoGIiIhIJfGwugARERGpWRQ+REREpFIpfIiIiEilUvgQERGRSqXwISIiIpVK4UNEREQqlcKHiIiIVCqFDxEREalUCh8iIiJSqRQ+pMZ5++23sdlsHDx40LmsZ8+e9OzZs8j3rl69GpvNxurVq8u1JpvNxsyZM8t1nVK9NGzYkNGjRxfZTr9LUhUofIhUkqVLl+pLQUQE8LK6ABF38OWXX1b4NpYuXcrs2bMLDCDnzp3Dy0v/HEWkZtCRDxHAx8cHHx8fy7bv6+ur8FEMmZmZVpcgIuVA4UPc2qJFi7DZbKxZsybfa//5z3+w2Wzs2LEDgG3btjF69GiuueYafH19iYyM5L777uPkyZNFbqegMR9JSUkMHjyYWrVqUbduXSZPnkxWVla+93777bcMHTqU+vXrY7fbiY2NZfLkyZw7d87ZZvTo0cyePRsw++TzbnkK6qf/4Ycf6NevH0FBQQQEBNCrVy/Wr1/v0iZv/MratWuZMmUK4eHh1KpVizvuuIPjx48X+blLss8OHz7M2LFjiY6Oxm6306hRI8aPH092drazzZkzZ5g8eTINGzbEbrcTExPDyJEjOXHihEu9l4+3gYLH0vTs2ZM2bdqwZcsWevTogb+/P3/6058AWLJkCbfffruzlsaNG/OXv/yF3NzcfHVv2LCB/v37U7t2bWrVqkVcXBwvvfQSAG+99RY2m40ffvgh3/uee+45PD09OXz4cKH779dff+Xhhx+mefPm+Pn5ERYWxtChQ/N9vpL8nAzD4JlnniEmJgZ/f39uvvlmdu7cWWgNxVGc36WcnByeeuopmjZtiq+vL2FhYdxwww2sWLHC2ebIkSOMGTOGmJgY7HY7UVFRDBo0KN/nFSmK/tQSt3b77bcTEBDABx98wE033eTy2oIFC2jdujVt2rQBYMWKFfzyyy+MGTOGyMhIdu7cyWuvvcbOnTtZv369y5d9Uc6dO0evXr04dOgQjzzyCNHR0bz33nt8/fXX+douXLiQzMxMxo8fT1hYGBs3buTll18mKSmJhQsXAvDggw+SnJzMihUreO+994rc/s6dO7nxxhsJCgri8ccfx9vbm//85z/07NmTNWvW0LVrV5f2kyZNonbt2syYMYODBw8ya9YsJk6cyIIFC666neLus+TkZLp06cKZM2d44IEHaNGiBYcPH2bRokVkZmbi4+NDeno6N954I7t37+a+++6jQ4cOnDhxgk8++YSkpCTq1KlT3N3vdPLkSfr168c999zDb3/7WyIiIgDzyzwgIIApU6YQEBDA119/zfTp00lLS+Nvf/uby+cbMGAAUVFRPProo0RGRrJ7924+++wzHn30Ue666y4mTJjA3Llzad++vcu2586dS8+ePalXr16h9W3atInvv/+ee+65h5iYGA4ePMicOXPo2bMnu3btwt/f36V9cX5O06dP55lnnqF///7079+frVu3cuutt7qEvJIo7u/SzJkziY+P5/7776dLly6kpaWxefNmtm7dSp8+fQAYMmQIO3fuZNKkSTRs2JBjx46xYsUKDh06RMOGDUtVn9RQhoibu/fee426desaFy5ccC5LSUkxPDw8jKefftq5LDMzM997//e//xmA8c033ziXvfXWWwZgHDhwwLnspptuMm666Sbn81mzZhmA8cEHHziXZWRkGE2aNDEAY9WqVVfdbnx8vGGz2Yxff/3VuWzChAlGYf/kAGPGjBnO54MHDzZ8fHyM/fv3O5clJycbgYGBRo8ePfJ9lt69exsOh8O5fPLkyYanp6dx5syZArd3tdoL2mcjR440PDw8jE2bNuVrn7fd6dOnG4Dx0UcfFdqmoH1vGIaxatWqfPv1pptuMgDj3//+d7HqfvDBBw1/f3/j/PnzhmEYxoULF4xGjRoZDRo0ME6fPl1gPYZh/n5FR0cbubm5zmVbt241AOOtt97Kt52i6li3bp0BGO+++65zWXF/TseOHTN8fHyM22+/3aXdn/70JwMwRo0addV6DKP0v0tt27Y1br/99kLXe/r0aQMw/va3vxVZg0hR1O0ibm/YsGEcO3bM5ZD8okWLcDgcDBs2zLnMz8/P+fj8+fOcOHGC6667DoCtW7eWaJtLly4lKiqKu+66y7nM39+fBx54IF/by7ebkZHBiRMnuP766zEMo8DD+UXJzc3lyy+/ZPDgwVxzzTXO5VFRUQwfPpzvvvuOtLQ0l/c88MADLkd2brzxRnJzc/n111+vuq3i7DOHw8HHH3/MwIED6dSpU7515G33ww8/pG3bttxxxx2Ftikpu93OmDFjrlr32bNnOXHiBDfeeCOZmZns2bMHMLsaDhw4wGOPPUZISEih9YwcOZLk5GRWrVrlXDZ37lz8/PwYMmTIVeu7vI6cnBxOnjxJkyZNCAkJKfB3rqif01dffUV2djaTJk1yaffYY49dtY7ClOR3KSQkhJ07d/Lzzz8X+ll9fHxYvXo1p0+fLlU9InkUPsTt3XbbbQQHB7scml6wYAHt2rWjWbNmzmWnTp3i0UcfJSIiAj8/P8LDw2nUqBEAqampJdrmr7/+SpMmTfJ9aTZv3jxf20OHDjF69GhCQ0MJCAggPDzc2UVU0u0CHD9+nMzMzAK31bJlSxwOB4mJiS7L69ev7/K8du3aAEV+SRRnnx0/fpy0tDRn91Zh9u/fX2SbkqpXr16BA4F37tzJHXfcQXBwMEFBQYSHh/Pb3/7Wpe79+/cDFFlTnz59iIqKYu7cuYAZtv73v/8xaNAgAgMDr/rec+fOMX36dGJjY7Hb7dSpU4fw8HDOnDlT4M++qJ9TXghp2rSpS7vw8HBn25Ioye/S008/zZkzZ2jWrBnXXnstf/jDH9i2bZuzvd1u569//SvLli0jIiKCHj168MILL3DkyJES1yWi8CFuz263M3jwYBYvXsyFCxc4fPgwa9eudTnqAXD33Xfz+uuv89BDD/HRRx/x5Zdf8sUXXwDmF0pFyM3NpU+fPnz++ec88cQTfPzxx6xYsYK33367Qrd7JU9PzwKXG4Zx1fdV9j4r7AhIQQNFwfXIQp4zZ85w00038eOPP/L000/z6aefsmLFCv76178CJa/b09OT4cOH8+GHH3L+/HlWrVpFcnKyM8xczaRJk3j22We5++67+eCDD/jyyy9ZsWIFYWFhBdZR2p9TZejRowf79+/nzTffpE2bNvz3v/+lQ4cO/Pe//3W2eeyxx/jpp5+Ij4/H19eXJ598kpYtW5bqCJ/UbBpwKlXCsGHDeOedd1i5ciW7d+/GMAyX8HH69GlWrlzJU089xfTp053LCzuEXJQGDRqwY8cODMNw+cLcu3evS7vt27fz008/8c477zBy5Ejn8svPEMhT3K6H8PBw/P39820LYM+ePXh4eBAbG1vcj1Ko4u6z8PBwgoKCnGcVFaZx48ZFtsn76/3MmTMuy4vqHrrc6tWrOXnyJB999BE9evRwLj9w4EC+egB27NhB7969r7rOkSNH8uKLL/Lpp5+ybNkywsPD6du3b5G1LFq0iFGjRvHiiy86l50/fz7f5yuuBg0aAObP4PJukuPHj5eqq6Okv0uhoaGMGTOGMWPGkJ6eTo8ePZg5cyb333+/s03jxo35/e9/z+9//3t+/vln2rVrx4svvsj7779f4vqk5tKRD6kSevfuTWhoKAsWLGDBggV06dLF2T0Al/6ivPIvyFmzZpVqe/379yc5OZlFixY5l2VmZvLaa6+5tCtou4ZhOE/lvFytWrWA/F+8V/L09OTWW29lyZIlLqcwHj16lHnz5nHDDTcQFBRU0o9U4HaurB3y7zMPDw8GDx7Mp59+yubNm/OtJ+/9Q4YM4ccff2Tx4sWFtskLBN98843ztdzc3Hz7taR1Z2dn8+qrr7q069ChA40aNWLWrFn59vmVnzkuLo64uDj++9//8uGHH3LPPfcUa94VT0/PfOt6+eWXCz2SU5TevXvj7e3Nyy+/7LLe0v4el+R36crTqwMCAmjSpInz9PLMzEzOnz/v0qZx48YEBgYWeAq6yNXoyIdUCd7e3tx5553Mnz+fjIwM/v73v7u8HhQU5OyDzsnJoV69enz55Zf5/hournHjxvHKK68wcuRItmzZQlRUFO+9916+UydbtGhB48aNmTp1KocPHyYoKIgPP/ywwL9SO3bsCMAjjzxC37598fT05J577ilw+8888wwrVqzghhtu4OGHH8bLy4v//Oc/ZGVl8cILL5TqM12pJPvsueee48svv+Smm27igQceoGXLlqSkpLBw4UK+++47QkJC+MMf/sCiRYsYOnQo9913Hx07duTUqVN88skn/Pvf/6Zt27a0bt2a6667jmnTpnHq1ClCQ0OZP38+Fy5cKHbd119/PbVr12bUqFE88sgj2Gw23nvvvXwhwMPDgzlz5jBw4EDatWvHmDFjiIqKYs+ePezcuZPly5e7tB85ciRTp04FKFaXC8CAAQN47733CA4OplWrVqxbt46v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06dPA/m7rQDatWvnUpfNZmPOnDn85je/oVatWjz77LNF7rc8b775Jq1bt3buk4kTJwJw3333MWDAAJe2OTk51K1blzfeeOOq+6Qsyjy9+urVq12e+/r6Mnv2bGbPnl3WVZev8BZgD4KsNDi2C6Liin6PiEgZnMvJpdX05ZZse9fTffH3Kfq/+KFDhzJp0iRWrVpFr169ADh16hRffPEFS5cuBcy5nfr378+zzz6L3W7n3XffZeDAgezdu5f69esXuY309HQGDBhAnz59eP/99zlw4ACPPvqoSxuHw0FMTAwLFy4kLCyM77//ngceeICoqCjuvvtupk6dyu7du0lLS+Ott94CIDQ0lOTkZJf1HD58mP79+zN69Gjeffdd9uzZw7hx4/D19XX5In/nnXeYMmUKGzZsYN26dYwePZru3bvTp0+fAj/D2bNnGTVqFC+//DKGYfDiiy/Sv39/fv75ZwIDA3E4HPTr14+zZ8/y/vvv07hxY3bt2uWcCyMhIYFevXpx33338dJLL+Hl5cWqVatKPA3/zJkzef7555k1axZeXl5F7jeAOXPmMGXKFJ5//nn69etHamqqc+LP+++/nx49epCSkkJUVBQAn332GZmZmQwbNqxEtZVEzbm2i4cH1OsIv6yCpI0KHyIiQO3atenXrx/z5s1zho9FixZRp04dbr75ZgDatm1L27Ztne/5y1/+wuLFi/nkk0+cf0Ffzbx583A4HLzxxhv4+vrSunVrkpKSGD9+vLONt7e3y7QLjRo1Yt26dXzwwQfcfffdBAQE4OfnR1ZW1lW7WV599VViY2N55ZVXsNlstGjRguTkZJ544gmmT5/unIclLi6OGTNmANC0aVNeeeUVVq5cWWj4yJs4M89rr71GSEgIa9asYcCAAXz11Vds3LiR3bt306xZMwCuueYaZ/sXXniBTp068eqrrzqXtW7dush9d6Xhw4czZswYl2VX228AzzzzDL///e9dAl/nzp0BuP7662nevDnvvfcejz/+OGBODjp06NAyT6F+NTUnfADEdjXDR+Im6Hy/1dWISDXn5+3Jrqf7Wrbt4hoxYgTjxo3j1VdfxW63M3fuXO655x7nF3V6ejozZ87k888/JyUlhQsXLnDu3DkOHTpUrPXv3r2buLg4lykaCjoJYfbs2bz55pscOnSIc+fOkZ2dTbt27Yr9OfK21a1bN5fJsLp37056ejpJSUnOIzVXXhokKiqKY8eOFbreo0eP8uc//5nVq1dz7NgxcnNzyczMdO6DhIQEYmJinMHjSgkJCQwdOrREn6UgnTp1yrfsavvt2LFjJCcnO4NlQe6//35ee+01Hn/8cY4ePcqyZcv4+uuvy1zr1dSw8GEmPRI3WFuHiNQINputWF0fVhs4cCCGYfD555/TuXNnvv32W/75z386X586dSorVqzg73//O02aNMHPz4+77rqL7Ozscqth/vz5TJ06lRdffJFu3boRGBjI3/72NzZsqJj/r68cqGmz2fKNe7ncqFGjOHnyJC+99BINGjTAbrfTrVs35z7w8/O76vaKet3DwyPfOJ2cnJx87WrVquXyvKj9VtR2AUaOHMkf//hH1q1bx/fff0+jRo248cYbi3xfWbj/v4ryVO9iYjx9ANKPQ0C4tfWIiLgBX19f7rzzTubOncu+ffto3rw5HTp0cL6+du1aRo8ezR133AGYR0IOHjxY7PW3bNmS9957j/PnzzuPfqxfv96lzdq1a7n++ut5+OGHncv279/v0sbHx6fIMRItW7bkww8/xDAM59GPtWvXEhgYSExMTLFrvtLatWt59dVX6d+/P2BOunnixAnn63FxcSQlJfHTTz8VePQjLi6OlStXFjqjd3h4OCkpKc7naWlpHDhwoFh1XW2/BQYG0rBhQ1auXOnsRrtSWFgYgwcP5q233mLdunX5unUqQs26CIFfCIS3NB8n5Z8eXkSkphoxYgSff/45b775JiNGjHB5rWnTpnz00UckJCTw448/Mnz48KseJbjS8OHDsdlsjBs3jl27drF06VL+/ve/59vG5s2bWb58OT/99BNPPvlkvst4NGzYkG3btrF3715OnDhR4JGBhx9+mMTERCZNmsSePXtYsmQJM2bMYMqUKWW67k7Tpk1577332L17Nxs2bGDEiBEuRxVuuukmevTowZAhQ1ixYgUHDhxg2bJlfPHFF4A5m/emTZt4+OGH2bZtG3v27GHOnDnOAHPLLbfw3nvv8e2337J9+3ZGjRpVrAu3FWe/zZw5kxdffJF//etf/Pzzz2zdupWXX37Zpc3999/PO++8w+7duxk1alSp91Nx1azwAep6EREpwC233EJoaCh79+5l+PDhLq/94x//oHbt2lx//fUMHDiQvn37uhwZKUpAQACffvop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vvzySxISEhgzZky5buNy3t7eLs9tNlu+cS9l0a9fP3799VcmT55McnIyvXr1YurUqQB06NCBAwcO8Je//IVz585x9913c9ddd5XbtqsChQ+d8SIiNZyvry933nknc+fO5X//+x/NmzenQ4cOztfXrl3L6NGjueOOO7j22muJjIzk4MGDxV5/y5Yt2bZtG+fPn3cuW79+vUubtWvXcv311/Pwww/Tvn17mjRpwv79+13a+Pj4kJubW+S21q1b53KZ+LVr1xIYGEhMTPkc3W7cuDE+Pj6sXbvWuSwnJ4dNmzbRqlUr57Lw8HBGjRrF+++/z6xZs3jttdecrwUFBTFs2DBef/11FixYwIcffsipU6fKpb6qQOEj78hHyjbIOWdtLSIiFhkxYgSff/45b775pstRDzDHRHz00UckJCTw448/Mnz48BIdJRg+fDg2m41x48axa9culi5dyt///vd829i8eTPLly/np59+4sknn3Q5ewTMcRPbtm1j7969nDhxgpycnHzbevjhh0lMTGTSpEns2bOHJUuWMGPGDKZMmeLsRiqrWrVqMX78eP7whz/wxRdfsGvXLsaNG0dmZiZjx44FYPr06SxZsoR9+/axc+dOPvvsM1q2bAnAP/7xD/73v/+xZ88efvrpJxYuXEhkZCQhISHlUl9VoPARUh8CIsCRY852KiJSA91yyy2Ehoayd+9ehg8f7vLaP/7xD2rXrs3111/PwIED6du3r8uRkaIEBATw6aefsn37dtq3b8///d//8de//tWlzYMPPsidd97JsGHD6Nq1KydPnuThhx92aTNu3DiaN29Op06dCA8PdznykKdevXosXbqUjRs30rZtWx566CHGjh3Ln//85xLsjaI9//zzDBkyhN/97nd06NCBffv2sXz5cufEaj4+PkybNo24uDh69OiBp6cn8+fPByAwMJAXXniBTp060blzZw4ePMjSpUvLLRxVBTbDKObJ4JUkLS2N4OBgUlNTCQoKqpyNzh8Bez6DPk9D90eLbi8icoXz589z4MABGjVq5DKwUqQ6udrveUm+v2tOzLoaDToVERGpNAofALFdzfvEjcWeFVBERERKR+EDIKodeHhDxjE486vV1YiIiFRrCh8A3r4QdXHCmcRNV28rIiIiZVKi8DFnzhzi4uIICgoiKCiIbt26sWzZMufrPXv2dF7wJ+/2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Wzp9+jTdu3fH29ubZcuWsWvXLl588UVq165tTUFGDdClSxdjwoQJzue5ublGdHS0ER8fb2FV7g8wFi9ebHUZVcaxY8cMwFizZo3VpVQJtWvXNv773/9aXYbbOnv2rNG0aVNjxYoVxk033WQ8+uijVpfkdmbMmGG0bdvW6jKqhCeeeMK44YYbrC7Dqdof+cjOzmbLli307t3buczDw4PevXuzbt06CyuT6iY1NRWA0NBQiytxb7m5ucyfP5+MjAy6detmdTlua8KECdx+++0u/3dJfj///DPR0dFcc801jBgxgkOHDlldklv65JNP6NSpE0OHDqVu3bq0b9+e119/3bJ6qn34OHHiBLm5uURERLgsj4iI4MiRIxZVJdWNw+Hgscceo3v37rRp08bqctzS9u3bCQgIwG6389BDD7F48WJatWpldVluaf78+WzdupX4+HirS3FrXbt25e233+aLL75gzpw5HDhwgBtvvJGzZ89aXZrb+eWXX5gzZw5NmzZl+fLljB8/nkceeYR33nnHknq8LNmqSDUzYcIEduzYof7mq2jevDkJCQmkpqayaNEiRo0axZo1axRArpCYmMijjz7KihUr8PX1tboct9avXz/n47i4OLp27UqDBg344IMPGDt2rIWVuR+Hw0GnTp147rnnAGjfvj07duzg3//+N6NGjar0eqr9kY86derg6enJ0aNHXZYfPXqUyMhIi6qS6mTixIl89tlnrFq1ipiYGKvLcVs+Pj40adKEjh07Eh8fT9u2bXnppZesLsvtbNmyhWPHjtGhQwe8vLzw8vJizZo1/Otf/8LLy4vc3FyrS3RbISEhNGvWjH379lldituJiorKF/RbtmxpWTdVtQ8fPj4+dOzYkZUrVzqXORwOVq5cqf5mKRPDMJg4cSKLFy/m66+/plGjRlaXVKU4HA6ysrKsLsPt9OrVi+3bt5OQkOC8derUiREjRpCQkICnp6fVJbqt9PR09u/fT1RUlNWluJ3u3bvnmwrgp59+okGDBpbUUyO6XaZMmcKoUaPo1KkTXbp0YdasWWRkZDBmzBirS3M76enpLn81HDhwgISEBEJDQ6lfv76FlbmfCRMmMG/ePJYsWUJgYKBzDFFwcDB+fn4WV+depk2bRr9+/ahfvz5nz55l3rx5rF69muXLl1tdmtsJDAzMN26oVq1ahIWFaTzRFaZOncrAgQNp0KABycnJzJgxA09PT+69916rS3M7kydP5vrrr+e5557j7rvvZuPGjbz22mu89tpr1hRk9ek2leXll1826tevb/j4+BhdunQx1q9fb3VJbmnVqlUGkO82atQoq0tzOwXtJ8B46623rC7N7dx3331GgwYNDB8fHyM8PNzo1auX8eWXX1pdVpWhU20LNmzYMCMqKsrw8fEx6tWrZwwbNszYt2+f1WW5rU8//dRo06aNYbfbjRYtWhivvfaaZbXYDMMwrIk9IiIiUhNV+zEfIiIi4l4UPkRERKRSKXyIiIhIpVL4EBERkUql8CEiIiKVSuFDREREKpXCh4iIiFQqhQ8RERGpVAofIiIiUqkUPkRERKRSKXyIiIhIpfp/GQY+SZiDTk0AAAAASUVORK5CYII=\n"
            },
            "metadata": {}
          }
        ]
      },
      {
        "cell_type": "markdown",
        "source": [
          "using regularization , padding and strides\n"
        ],
        "metadata": {
          "id": "AQKeDZYtiYd4"
        }
      },
      {
        "cell_type": "code",
        "source": [
          "class CNNModel:\n",
          "  def __init__(self):\n",
          "    # Initialize the Sequential model directly\n",
          "    self.cnn_model = Sequential()\n",
          "  def create_model_pipeline(self):\n",
          "    logging.info(\"Cnn model pipeline has been started\")\n",
          "    try:\n",
          "      #Add layers directly to the Sequential model\n",
          "      self.cnn_model.add(Conv2D(32, activation='relu', strides = (1,1),kernel_size=(3, 3),padding='valid' ,input_shape=(128, 128, 3),kernel_regularizer=\"l2\"))\n",
          "      self.cnn_model.add(MaxPooling2D(pool_size=(2, 2)))\n",
          "      self.cnn_model.add(Conv2D(64, activation='relu', kernel_size=(3, 3)))\n",
          "      self.cnn_model.add(MaxPooling2D(pool_size=(2, 2)))\n",
          "      self.cnn_model.add(Conv2D(128, activation='relu', kernel_size=(3, 3)))\n",
          "      self.cnn_model.add(MaxPooling2D(pool_size=(2, 2)))\n",
          "      self.cnn_model.add(Flatten())\n",
          "      self.cnn_model.add(Dense(128, activation='relu'))\n",
          "      self.cnn_model.add(Dense(1, activation='sigmoid'))\n",
          "\n",
          "      # Wrap the Sequential model in a Pipeline\n",
          "      cnn_pipeline = Pipeline(steps=[('cnn_model', self.cnn_model)])\n",
          "      return cnn_pipeline\n",
          "    except Exception as error:\n",
          "      print(f\" error {error}\")\n",
          "      logging.error(\"cnn model pipeline processing has been terminated\")\n",
          "\n",
          "result = CNNModel()\n",
          "cnn_model = result.create_model_pipeline()\n",
          "print(f\" cnn model {cnn_model}\")\n",
          "\n",
          "cnn_model[0].summary()"
        ],
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/",
            "height": 430
          },
          "id": "570qdvX3ibhn",
          "executionInfo": {
            "status": "ok",
            "timestamp": 1733213047134,
            "user_tz": -330,
            "elapsed": 379,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            }
          },
          "outputId": "f9beff83-7394-4d29-bfd6-054ad4ff7b13"
        },
        "execution_count": 95,
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              " cnn model Pipeline(steps=[('cnn_model', <Sequential name=sequential_4, built=True>)])\n"
            ]
          },
          {
            "output_type": "display_data",
            "data": {
              "text/plain": [
                "\u001b[1mModel: \"sequential_4\"\u001b[0m\n"
              ],
              "text/html": [
                "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_4\"</span>\n",
                "</pre>\n"
              ]
            },
            "metadata": {}
          },
          {
            "output_type": "display_data",
            "data": {
              "text/plain": [
                "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
                "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
                "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
                "│ conv2d_6 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m126\u001b[0m, \u001b[38;5;34m126\u001b[0m, \u001b[38;5;34m32\u001b[0m)        │             \u001b[38;5;34m896\u001b[0m │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ max_pooling2d_6 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m63\u001b[0m, \u001b[38;5;34m63\u001b[0m, \u001b[38;5;34m32\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ conv2d_7 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m61\u001b[0m, \u001b[38;5;34m61\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │          \u001b[38;5;34m18,496\u001b[0m │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ max_pooling2d_7 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ conv2d_8 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m128\u001b[0m)         │          \u001b[38;5;34m73,856\u001b[0m │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ max_pooling2d_8 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m128\u001b[0m)         │               \u001b[38;5;34m0\u001b[0m │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ flatten_2 (\u001b[38;5;33mFlatten\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m25088\u001b[0m)               │               \u001b[38;5;34m0\u001b[0m │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ dense_4 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │       \u001b[38;5;34m3,211,392\u001b[0m │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ dense_5 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │             \u001b[38;5;34m129\u001b[0m │\n",
                "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
              ],
              "text/html": [
                "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
                "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
                "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
                "│ conv2d_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">126</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">126</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">896</span> │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ max_pooling2d_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">63</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">63</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ conv2d_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">61</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">61</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │          <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ max_pooling2d_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ conv2d_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">73,856</span> │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ max_pooling2d_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)         │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ flatten_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">25088</span>)               │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ dense_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │       <span style=\"color: #00af00; text-decoration-color: #00af00\">3,211,392</span> │\n",
                "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
                "│ dense_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">129</span> │\n",
                "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
                "</pre>\n"
              ]
            },
            "metadata": {}
          },
          {
            "output_type": "display_data",
            "data": {
              "text/plain": [
                "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m3,304,769\u001b[0m (12.61 MB)\n"
              ],
              "text/html": [
                "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">3,304,769</span> (12.61 MB)\n",
                "</pre>\n"
              ]
            },
            "metadata": {}
          },
          {
            "output_type": "display_data",
            "data": {
              "text/plain": [
                "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m3,304,769\u001b[0m (12.61 MB)\n"
              ],
              "text/html": [
                "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">3,304,769</span> (12.61 MB)\n",
                "</pre>\n"
              ]
            },
            "metadata": {}
          },
          {
            "output_type": "display_data",
            "data": {
              "text/plain": [
                "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
              ],
              "text/html": [
                "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
                "</pre>\n"
              ]
            },
            "metadata": {}
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "cnn_model[0].compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\n",
          "\n",
          "history_2 = cnn_model[0].fit(train_data_generation,epochs = 10 , validation_data=validation_data_generation)"
        ],
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "id": "Yzp5aQ9Kp-j8",
          "executionInfo": {
            "status": "ok",
            "timestamp": 1733215050206,
            "user_tz": -330,
            "elapsed": 160350,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            }
          },
          "outputId": "862c63a9-f464-47c5-9fc6-7115033aef2a"
        },
        "execution_count": 99,
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "Epoch 1/10\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m17s\u001b[0m 2s/step - accuracy: 0.9692 - loss: 0.2104 - val_accuracy: 0.9500 - val_loss: 13.1016\n",
              "Epoch 2/10\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 2s/step - accuracy: 0.9726 - loss: 0.1082 - val_accuracy: 0.9750 - val_loss: 6.8993\n",
              "Epoch 3/10\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 1s/step - accuracy: 0.9865 - loss: 0.0648 - val_accuracy: 1.0000 - val_loss: 0.0314\n",
              "Epoch 4/10\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 1s/step - accuracy: 0.9850 - loss: 0.0686 - val_accuracy: 0.9750 - val_loss: 0.1962\n",
              "Epoch 5/10\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 2s/step - accuracy: 0.9894 - loss: 0.0588 - val_accuracy: 1.0000 - val_loss: 0.0313\n",
              "Epoch 6/10\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 2s/step - accuracy: 0.9820 - loss: 0.0806 - val_accuracy: 1.0000 - val_loss: 0.0312\n",
              "Epoch 7/10\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 1s/step - accuracy: 0.9771 - loss: 0.0756 - val_accuracy: 1.0000 - val_loss: 0.0312\n",
              "Epoch 8/10\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 2s/step - accuracy: 1.0000 - loss: 0.0420 - val_accuracy: 1.0000 - val_loss: 0.0311\n",
              "Epoch 9/10\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 2s/step - accuracy: 1.0000 - loss: 0.0399 - val_accuracy: 1.0000 - val_loss: 0.0310\n",
              "Epoch 10/10\n",
              "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 2s/step - accuracy: 1.0000 - loss: 0.0394 - val_accuracy: 1.0000 - val_loss: 0.0310\n"
            ]
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "cnn_model_prediction = cnn_model.predict(X_test)\n",
          "print(f\" cnn model predictions {cnn_model_predictions}\")"
        ],
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "id": "gt1BeVybq3SD",
          "executionInfo": {
            "status": "ok",
            "timestamp": 1733215215513,
            "user_tz": -330,
            "elapsed": 599,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            }
          },
          "outputId": "092ccd4e-08c7-43ab-98a3-be84334c69ae"
        },
        "execution_count": 107,
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 153ms/step\n",
              " cnn model predictions [[1.]]\n"
            ]
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "type(cnn_model_prediction)"
        ],
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "id": "H1N4FB9nrEx6",
          "executionInfo": {
            "status": "ok",
            "timestamp": 1733215222679,
            "user_tz": -330,
            "elapsed": 700,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            }
          },
          "outputId": "a52084d6-6bd6-4aa0-b2b0-36dfdd97efa5"
        },
        "execution_count": 109,
        "outputs": [
          {
            "output_type": "execute_result",
            "data": {
              "text/plain": [
                "numpy.ndarray"
              ]
            },
            "metadata": {},
            "execution_count": 109
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "X_test_preprocessed = X_test / 255.0  # Scale pixel values to [0, 1]\n",
          "\n",
          "cnn_model_predictions = cnn_model.predict(X_test_preprocessed)\n",
          "print(f\" cnn model predictions {cnn_model_predictions}\")\n",
          "new_predictions = cnn_model_predictions.astype('int')\n",
          "print(new_predictions)"
        ],
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "id": "lv1Xmpu5quvC",
          "executionInfo": {
            "status": "ok",
            "timestamp": 1733215420786,
            "user_tz": -330,
            "elapsed": 379,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            }
          },
          "outputId": "fcb6a6f0-4fe3-4224-f950-af5ab1cfd366"
        },
        "execution_count": 116,
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 100ms/step\n",
              " cnn model predictions [[0.99890363]]\n",
              "[[0]]\n"
            ]
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "accuracy = history_2.history['accuracy']\n",
          "loss = history_2.history['loss']\n",
          "val_loss = history_2.history['val_loss']\n",
          "val_accuracy = history_2.history['val_accuracy']\n",
          "\n",
          "plt.scatter(accuracy , loss , label='training')\n",
          "plt.scatter(val_accuracy , val_loss , label='testing loss')\n",
          "plt.title(\"training accuracy and loss\")\n",
          "plt.legend()\n",
          "plt.show()"
        ],
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/",
            "height": 452
          },
          "id": "aetr6LkdsLXU",
          "executionInfo": {
            "status": "ok",
            "timestamp": 1733215670664,
            "user_tz": -330,
            "elapsed": 576,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            }
          },
          "outputId": "a50ac348-4237-4de7-dc00-ffb6763f1dd6"
        },
        "execution_count": 127,
        "outputs": [
          {
            "output_type": "display_data",
            "data": {
              "text/plain": [
                "<Figure size 640x480 with 1 Axes>"
              ],
              "image/png": "\n"
            },
            "metadata": {}
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "plt.plot(accuracy , loss , label='training')\n",
          "plt.plot(val_accuracy , val_loss , label='testing loss')\n",
          "plt.title(\"training accuracy and loss\")\n",
          "plt.legend()\n",
          "plt.show()"
        ],
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/",
            "height": 452
          },
          "id": "ZY_NBg31tIW4",
          "executionInfo": {
            "status": "ok",
            "timestamp": 1733215698702,
            "user_tz": -330,
            "elapsed": 544,
            "user": {
              "displayName": "Shivansh Bajpai",
              "userId": "18292177948762598200"
            }
          },
          "outputId": "6e51ff25-e802-463d-bca4-5ad272419955"
        },
        "execution_count": 128,
        "outputs": [
          {
            "output_type": "display_data",
            "data": {
              "text/plain": [
                "<Figure size 640x480 with 1 Axes>"
              ],
              "image/png": "\n"
            },
            "metadata": {}
          }
        ]
      },
      {
        "cell_type": "markdown",
        "source": [],
        "metadata": {
          "id": "ahiV97QJhyA7"
        }
      },
      {
        "cell_type": "code",
        "source": [],
        "metadata": {
          "id": "Q60Lh6d4uPKL"
        },
        "execution_count": null,
        "outputs": []
      }
    ],
    "metadata": {
      "colab": {
        "provenance": [],
        "mount_file_id": "1Fb1vB0mnqeu5uSYcZADelGFdisV_dBuV",
        "authorship_tag": "ABX9TyNGKcKOqSKPszxFmvQLWns0"
      },
      "kernelspec": {
        "display_name": "Python 3",
        "name": "python3"
      },
      "language_info": {
        "name": "python"
      }
    },
    "nbformat": 4,
    "nbformat_minor": 0
  }